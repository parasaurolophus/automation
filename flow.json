[
    {
        "id": "24510f25743eef8c",
        "type": "tab",
        "label": "Timer",
        "disabled": false,
        "info": "Periodically send time-based event messages which are used to trigger\nautomation.\n\n# Details\n\nThis flow divides each day into five segments. It sends a message\nwith `msg.topic` set to `trigger` at the start of each\nsegment<sup>*</sup>. It periodically sends such `trigger` messages via\na `link out` node to flows on the _Shades_ and _Lighting_ tabs. Each\nsuch message has `msg.payload` set to an object with the following\nproperties:\n\n| Property               | Description                                                                             |\n|------------------------|-----------------------------------------------------------------------------------------|\n| `msg.payload.lighting` | Boolean value indicating whether or not lighting automation is currently enabled        |\n| `msg.payload.shades`   | Boolean value indicating whether or not window covering automation is currently enabled |\n| `msg.payload.theme`    | String indicating which lighting theme to activate in the evening                       |\n| `msg.payload.time`     | String indicating which the current time of day                                         |\n\n> <sup>*</sup>The wording here describes the canonical case of exactly\n> five `trigger` events per day. In reality, more or fewer than five\n> `trigger`  events may be sent in a given day depending on when and\n> how often flows are restarted as well as corner cases as to how\n> certain segments are defined, as described below.\n\n### Time\n\nThe `msg.payload.time` for each `trigger` message will be one of the\nfollowing following strings:\n\n| `msg.payload.time` | Description<sup>**</sup>                                                                                    |\n|--------------------|-------------------------------------------------------------------------------------------------------------|\n| `morning`          | Sent at sunrise                                                                                             |\n| `midday`           | Sent when the sun is high enough to no longer be shining directly into east-facing windows                  |\n| `afternoon`        | Sent when the sun is coming from the west and low enough to start shining directly into west-facing windows |\n| `evening`          | Sent at sunset                                                                                              |\n| `night`            | Sent at bedtime, as described below                                                                         |\n\n> <sup>**</sup>The sun's position is obtained each minute using\n> [suncalc](https://www.npmjs.com/package/suncalc). \"Coming\n> from the west\" means the sun's azimuth is greater than 0, otherwise\n> it is coming from the east. The sun being \"low enough\" to shine\n> directly into windows is determined empirically for a given house\n> by comparing the sun's altitude as reported by _suncalc_ at various\n> times of day to how the sunlight is or is not intruding\n> uncomfortably at that moment.\n\nCanonically, `trigger` events are sent five times per day at the times\nspecified in the preceding table, including times that vary from day\nto day due to randomly generated offsets or the changing position of\nthe sun over the course of a year. That said, \"extra\" `trigger`\nmessages will be sent when flows are restarted or when the user takes\ncertain actions using dashboard controls such as changing the bedtime\nor enabling or disabling lighting and window shade automation.\nSimilarly, some `trigger` messages may be missing or skipped on any\ngiven day. For example, the criteria defining `midday` are never met at\ncertain times of year for some latitudes.\n\nMore precisely, a new `trigger` event is sent:\n\n1. When flows are started\n2. When a new value for `sunrise`, `sunset`, `bedtime` or `theme` is\n   calculated each day or, in the case of `bedtime`, a user changes\n   the _Bedtime_ setting on the dashboard\n3. A state transition is detected when handling a `now` message each\n   minute, using the logic implied by the preceding table\n4. Lighting or window shade automation is enabled or disabled via the\n   dashboard, as described in the documentation for their respective\n   flow tabs\n\nIn summary, the values for `sunrise`, `sunrise` and `bedtime` are\ncalculated once whenever flows start up and again at the start of each\nday. The value for `bedtime` is recalculated any time a user changes\nthe _Bedtime_ setting on the dashboard. The `bedtime` calculation\nincludes an offset that is randomly calculated each day, as described\nbelow. In addition, `now` events are sent each minute and their handler\ncompares the current time to the rules described above in order to\ndecide when to send `trigger` event messages and what their payloads\nshould contain.\n\n#### Bedtime\n\nA user can choose a value for \"bedtime\" from a dropdown control on the\ndashboard. The actual time at which an event with `msg.topic` set to\n`trigger` and `msg.payload.time` set to `night` will vary slightly each\nday. The intent is to provide a modest degree of simulated presence when\nthe home is unoccupied. In particular, this flow sets the value of\n`msg.payload.time` in `trigger` event messages by adding or subtrating\na randomly generated offset of up 30 minutes to the hour specified by\nthe _Bedtime_ dashboard control. The offset is regenerated once each\nday and also when a user changes any of the dashboard settings\ncontrolling automation.\n\n#### Midday and Afternoon\n\nAt first glance, dividing each day into five distinct time ranges may\nseem excessive. However, different types of home automation rules\nfocus on distinct criteria. The `midday` and `afternoon` values for\n`msg.payload.time` in `trigger` event messages are used to control\neast- and west-facing window coverings in addition to the `morning`,\n`evening` and `night` values which are also of interest for lighting.\nSee the documentation for the _Shades_ and _Lighting_ flow tabs for\nmore information on how the various values for `msg.payload.time` are\nused.\n\n### Theme\n\nThe `msg.payload.theme` property of `trigger` event messages is used to\nindicate special times of year when specific lighting schemes might be\nappropriate:\n\n| `msg.payload.theme` | Description                      |\n|---------------------|----------------------------------|\n| `tribal`            | July 1 - 4 (US Independence Day) |\n| `spooky`            | Any day in October               |\n| `jolly`             | Any day in December              |\n| `standard`          | Any other day                    |",
        "env": []
    },
    {
        "id": "448b73182a92925c",
        "type": "tab",
        "label": "Automation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dcb190a34f9985d0",
        "type": "tab",
        "label": "PowerView",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "86021a0ae2220c2b",
        "type": "tab",
        "label": "Hue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a8af92611acc27a",
        "type": "subflow",
        "name": "Notify",
        "info": "Display a message as a \"toast\" on the\ndashboard and in the debug console.",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "d2492fc09315bfc0"
                    },
                    {
                        "id": "30e1991ea828ba4f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {
            "module": "@parasaurolophus/node-red-notify",
            "type": "notify",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Display a message as a toast on the dashboard and in the debug console",
            "keywords": "node-red",
            "license": "MIT"
        },
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_toast.png",
        "status": {
            "x": 200,
            "y": 220,
            "wires": [
                {
                    "id": "5280e126498476bc",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a0b7d0294edc5956",
        "type": "subflow",
        "name": "EventSource readyState",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "726e859588b521d1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 100,
                "wires": [
                    {
                        "id": "834d9349d1ebe8de",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "CLASS",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-eventsource-readystate",
            "type": "eventsource-readystate",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Convert the numeric status code for an EventSource into a string for display to the user",
            "keywords": "node-red",
            "license": "MIT"
        },
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_text.png",
        "status": {
            "x": 960,
            "y": 180,
            "wires": [
                {
                    "id": "b00c5123ccc7aca8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d61db14468b910ab",
        "type": "subflow",
        "name": "Hue API V2",
        "info": "This subflow encapsulates logic necessary to subscribe to event messages\nsent by a Philips Hue Bridge. It wraps this fairly complex logic as a\nsubflow as a convenience for connecting to multiple bridges on a single\nLAN.\n\n# Input\n\nThe receipt of any input message triggers a sequence of events as\ndescribed below. The actual content of the incoming message is ignored.\n\n# Output\n\nAn ongoing stream of event messages wrapped in a data structure suitable\nfor providing a set of dynamically created dashboard controls using a\n`ui_template` node.\n\n# Details\n\nThis subflow requires the following configuration:\n\n| Environment Variable | Description                                                                       |\n|----------------------|-----------------------------------------------------------------------------------|\n| `ADDRESS`            | IP address or host name of the Hue bridge                                         |\n| `KEY`                | A valid client application key for the Hue bridge                                 |\n| `TARGET`             | The label of a `link in` node that will be called to send messages to the Hue bridge |\n| `BRIDGE`             | A unique name for the Hue bridge at the given `ADDRESS`                           |\n\nSee\n<https://developers.meethue.com/develop/application-design-guidance/hue-bridge-discovery/>\nfor information on determining the value for `${ADDRESS}`.\n\nSee <https://developers.meethue.com/develop/hue-api-v2/getting-started/>\nfor information on how to generate the value for `${KEY}`; the\n_@parasaurolophus/node-red-create-hue-application-key_ subflow provides\na convenience wrapper for the relevant API.\n\nThe value of `${TARGET}` must be the name of a `link in` node that\nconnects to an instance of the\n_@parasaurolophus/node-red-send-hue-command_ subflow configured\nwith the same values for `${ADDRESS}` and `${KEY}`. The output of that\nsubflow must connect to a `link out` node configured to return its\ncaller.\n\nThe value of `${BRIDGE}` can be any string you wish to identify a\nparticular bridge. It will be used to form flow context storage keys.\n\nUpon receipt of any incoming message, this subflow:\n\n1. Fetches the complete set of \"resources\" from the Hue bridge\n2. Parses and reformats a subset of that metadata for use in\n   dynamically creating dashboard controls for the light groups and\n   scenes defined using the native Hue mobile app\n3. Uses a\n   [@parasaurolophus/node-red-eventsource](https://flows.nodered.org/node/@parasaurolophus/node-red-eventsource)\n   node to subscribe to event messages sent by the bridge\n4. Sends update messages each time the state of the dynamically created\n   dashboard controls change\n\nThe output of this flow should be connected to a `ui_template` node. The\noutput of that `ui_template` should be sent to an instance of the\n_@parasaurolophus/node-red-send-hue-command_ subflow configured with the\nsame values for `${ADDRESS}` and `${KEY}`. Typically, this would be\nthrough a `link call` node configured to invoke the same `link in` as\nspecified by `${TARGET}`.",
        "category": "hue",
        "in": [
            {
                "x": 40,
                "y": 380,
                "wires": [
                    {
                        "id": "07d9702ee21263d3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1070,
                "y": 160,
                "wires": [
                    {
                        "id": "d9ae737367ebed62",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1300,
                "y": 560,
                "wires": [
                    {
                        "id": "d48dd4b5aa1368b0",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1300,
                "y": 620,
                "wires": [
                    {
                        "id": "5d95dbf897fe7abd",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1050,
                "y": 240,
                "wires": [
                    {
                        "id": "c9d3ee76b8c11967",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": ""
            },
            {
                "name": "KEY",
                "type": "str",
                "value": ""
            },
            {
                "name": "TARGET",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-api-v2",
            "type": "hue-api-v2",
            "version": "1.0.1",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Wrap the API (V2) exposed by a Philips Hue Bridge",
            "keywords": "node-red,philips-hue,hue",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "outputLabels": [
            "dashboard",
            "onopen",
            "onerror",
            "events"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 1260,
            "y": 680,
            "wires": [
                {
                    "id": "8cd24b2b4ab64410",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "dd3a1235085c7ed7",
        "type": "subflow",
        "name": "Send Hue Command",
        "info": "Send a HTTP request to the API (V2) on a Philips Hue Bridge.\n\n# Input\n\nSee the documentation for the `http request` node for information about\nhow to format a message for use with an HTTP based API like that exposed\nby a Hue Bridge. In particular, this subflow assumes that `msg.payload`\nand `msg.method` will be set appropriately for the particular API entry\npoint you wish to invoke. In addition, this subflow assumes that\n`msg.topic` is the bridge resource URI representing the command entry\npoint or resource to fetch. It will be converted to a proper value for\nthe `msg.url` property, as described below.\n\n# Output\n\nThe the output of a `http request` node used to interact with the Hue\nbridge.\n\n# Details\n\nThis subflow will set `msg.url` and `msg.headers` according to the\nvalues of:\n\n- `msg.topic`\n- `${ADDRESS}`\n- `${KEY}`\n\nbefore sending the message through to a `http request` node. The URL\nwill be formed by prepending the `htts://` scheme and value of the\n`${ADDRESS}` environment variable to `msg.topic`. The value of\n`msg.headers` will include the client application security token\ncontained in the `${KEY}` environment variable. The other message\nproperties will be passed through unchanged to the `http request` node.\n\nSee <https://developers.meethue.com/develop/hue-api-v2/> for details of\nthe various API entry points that can be invoked using this subflow.\n\nSee\n<https://developers.meethue.com/develop/application-design-guidance/hue-bridge-discovery/>\nfor information on how to obtain the `${ADDRESS}` for your bridge.\n\nSee <https://developers.meethue.com/develop/hue-api-v2/getting-started/> for\ninformation on how to generate a value to pass as the `${KEY}`. The\n_@parasaurolophus/node-red-create-hue-application-key_ subflow provides\na convenient way to invoke the relevat API entry point.",
        "category": "hue",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "fa870f94fa1ea10b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 120,
                "wires": [
                    {
                        "id": "20ac42d7649c260a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 870,
                "y": 200,
                "wires": [
                    {
                        "id": "c029fcaa62306eb2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": ""
            },
            {
                "name": "KEY",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-send-hue-command",
            "type": "send-hue-command",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Send a message to the Philips Hue Bridge API V2",
            "keywords": "node-red,philips-hue,hue",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "inputLabels": [
            "command"
        ],
        "outputLabels": [
            "response",
            "error"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 640,
            "y": 280,
            "wires": [
                {
                    "id": "7f6c4efded50ed6b",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "9a9103e8b9a05415",
        "type": "subflow",
        "name": "Save State",
        "info": "Save `msg.payload` in parent flow context. At start, send the saved\nvalue or a default value.\n\nThe following environment variables must be configured for each\ninstance of this subflow:\n\n- `TOPIC` is the value for `msg.topic` in output messages\n- `STATE` is the name of flow context variable to use (`$parent.` will\n  be prepended ot `STATE` when accessing flow context)\n- `STORE` is the name of the context store (defaults to `file`)\n- `DEFAULT` is the default value to send at start if there is not yet a\n  stored value for the given `STATE` in the named context `STORE`\n\nNote that `STORE` must be the name of a filesystem-backed context store\nin order for the stored `STATE` to be preserved across restarts. Note\nalso that prepending `$parent.` to `STATE` means that the stored\n`STATE` will be accessible to other nodes in the same flow as an of\nthis subflow.",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "e4c0d45173cb5dad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 240,
                "y": 60,
                "wires": [
                    {
                        "id": "e4c0d45173cb5dad",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TOPIC",
                "type": "str",
                "value": ""
            },
            {
                "name": "STATE",
                "type": "str",
                "value": ""
            },
            {
                "name": "STORE",
                "type": "str",
                "value": "file"
            },
            {
                "name": "DEFAULT",
                "type": "json",
                "value": "null"
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-save-state",
            "type": "save-state",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Store msg.payload in flow context and re-send saved value at start up",
            "keywords": "node-red",
            "license": "MIT"
        },
        "color": "#3FADB5",
        "icon": "font-awesome/fa-dashboard",
        "status": {
            "x": 240,
            "y": 120,
            "wires": [
                {
                    "id": "82ef6a5436d70449",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ff5e6c57350b517d",
        "type": "group",
        "z": "24510f25743eef8c",
        "name": "periodically send timer event messages",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "03ac34a13709be39",
            "c50b52aee3f36be8",
            "47d3d2e7f832edc0",
            "9dc6f3432564c1e2",
            "83852d4482fadfc7",
            "829d6487fc430502",
            "32e4dd9341d63405",
            "54c207974d22c913",
            "c45a75a4ea70bf3a",
            "6a14f93e5d6efc13",
            "8e8260bf6d0fb1d1",
            "a3864a0d07101185",
            "6397de314a021b18",
            "26656249d7cbd1bd",
            "7696fdb01e9be86c"
        ],
        "x": 14,
        "y": 19,
        "w": 1262,
        "h": 242
    },
    {
        "id": "60e4d1c056ed3a0c",
        "type": "group",
        "z": "448b73182a92925c",
        "name": "trigger lighting automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "8083b56440c292c8",
            "21d5dda80821a109",
            "aae17e5a30471de5",
            "f590050ce69df70f",
            "7ed122d84c5e7167",
            "6b81bc8a01c525d8",
            "0de1a81dd7644afc",
            "776dedfbba2c68ec",
            "b314af61e3fe5e68",
            "5720dd9348b987ef",
            "c2ebf6c0d74ad0e4",
            "4e1d20e601e89e22",
            "31328f7909c93485",
            "c92600f6307981f9",
            "8bd183126cc5beaf",
            "c015dc9dbd457ad9",
            "e69068dc88fed591",
            "ece9e398ddf1a6a0",
            "fa502f5378dbe770",
            "28d0a7dae21e1fcf",
            "9fff86ab30bd6e09",
            "e913f94a740c212f",
            "91fe88dbcdcfd5fc",
            "59515344b6be644c",
            "d16bfe986e4d4a68",
            "945e6e160c72332c"
        ],
        "x": 74,
        "y": 19
    },
    {
        "id": "2da3e0020db1582c",
        "type": "group",
        "z": "24510f25743eef8c",
        "name": "automation dashboard controls",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "ecfbd237278bdee4",
            "8802b0ac9b530f7c",
            "3a210f7e37be9ff5",
            "617c23c03011acd7",
            "e147ba939c07a9a6",
            "e15932987c8aeb5e",
            "b681bcc695abf3d1",
            "895d1c6f5d4cf269",
            "c5b9a97f9cc97bd1",
            "02d93ffb776df2c5",
            "974cc61995ad786c",
            "6ac690b97c6f499a",
            "e6217093fd1deefe"
        ],
        "x": 14,
        "y": 279,
        "w": 582,
        "h": 262
    },
    {
        "id": "eaaca1e226cc9251",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "send message to powerview hub",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "70e42b6637f4c865",
            "413305fe8cf8bc16",
            "3b9aea255e25c86d",
            "b528e18246309ead",
            "450c11f088a3f9ee",
            "a250d71416af8250"
        ],
        "x": 94,
        "y": 119
    },
    {
        "id": "74348749d23b9082",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "dynamically create powerview controls on dashboard",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "02eb116aa3a7efad",
            "a2ce2f10f0cbc3b4",
            "4597056c8e33d1d2",
            "a4b2cb7314b93cec",
            "e89d138990a2c571",
            "09ed6328f31946db",
            "a4115f1a663ecf84",
            "b3fa2dd0b396e5ba",
            "7379bd9759e06a98",
            "fa994326c2180556",
            "97d89691a9505bb9",
            "23ce9cde77523965",
            "ca455aa5752d94d8",
            "78a3fbe808d63c4c",
            "8d7e72df780c1561",
            "9950e52333199d8f",
            "b3b32f662f388893",
            "b6e07b7b99531b02",
            "7fb1bd1acb1ca5f7",
            "0a9432f7e85182e1",
            "6f2a76cdcf373136",
            "9b899812a51421bf",
            "75f0adce74746386",
            "ddda84706da2c026"
        ],
        "x": 94,
        "y": 259
    },
    {
        "id": "2c4eab1ce95057ef",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "get all configuration data from hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "07d9702ee21263d3",
            "27cbc52e000f9fd1",
            "8909e3d843ad752c",
            "fcf52eacd721a4a9",
            "afd10513e80a6c06"
        ],
        "x": 74,
        "y": 319
    },
    {
        "id": "061d94914ef0f0c0",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "format grouped light event data for dashboard",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "eeb425059507ba39",
            "3fe9b64e4c386d21",
            "d9ae737367ebed62",
            "edb141c15ed881a4",
            "a3bfbe7bec9a2dda",
            "b698fabef55c0f4c",
            "c9d3ee76b8c11967"
        ],
        "x": 74,
        "y": 119
    },
    {
        "id": "ad76998e48254ce7",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "5e8b87d6d8f0fed7"
        ],
        "x": 74,
        "y": 19
    },
    {
        "id": "86efe0cfe1142093",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "store resource state changes in flow context",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "fcb648906e6b792a",
            "339ebff143d5b535",
            "1bc6cee6558ccaf4",
            "36dd0d5dc31ca8b4",
            "980418c680804201",
            "d29c26656d2e74ae"
        ],
        "x": 794,
        "y": 279
    },
    {
        "id": "595f21be09dd9396",
        "type": "group",
        "z": "86021a0ae2220c2b",
        "name": "basement hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "10c74bd3ce62390f",
            "85c6aa31ab17c911",
            "ef72c1743493465e",
            "214548005f7e99ab",
            "40f45c398a50b05e",
            "3f8329fdc5c54932",
            "3600df219088f5a6",
            "e53ba9a7af486095",
            "ab59aff7c27c6728",
            "0236f877cea9aa1b",
            "299a8ff9654c4b2a",
            "174b7dc47587b326",
            "46486cd695774a6c"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            },
            {
                "name": "BRIDGE",
                "value": "basement",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send basement hue command",
                "type": "str"
            }
        ],
        "x": 514,
        "y": 379,
        "w": 792,
        "h": 342
    },
    {
        "id": "d6d68c481562616a",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "subscribe to server sent events from hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "1056f2ddf9c58227",
            "2d13eb8e173c7968",
            "d48dd4b5aa1368b0",
            "d6f78cafaf0b00d7",
            "22e026e913c8a836",
            "1cd6fafb6c18354c",
            "f855f79c60d5581f",
            "dc94e795cd3258f8",
            "1da7ab591b98f32c",
            "5d95dbf897fe7abd",
            "8cd24b2b4ab64410"
        ],
        "x": 74,
        "y": 459
    },
    {
        "id": "2d9ad017d6aeb18f",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "activate a powerview scene",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "b6ce3321e4119a91",
            "689bb9bf9977b2c7",
            "26124b0246ef158d",
            "e90c8c66623d3a7b"
        ],
        "x": 94,
        "y": 539
    },
    {
        "id": "da437f2ac1efc073",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "74e55c13e48dd047"
        ],
        "x": 94,
        "y": 19
    },
    {
        "id": "49f5aae09949b530",
        "type": "group",
        "z": "448b73182a92925c",
        "name": "trigger shades automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "a9a05d5f14d5310e",
            "31e39e81f78fa235",
            "37bac7a6b658ade4",
            "ec730ac674a50f58",
            "6a9ac472018c38ea",
            "c8c9c1f0d8b62902",
            "9e961b1409432775",
            "db4f7c2c93cd8f30",
            "cd74e5b3da0290a6"
        ],
        "x": 74,
        "y": 579
    },
    {
        "id": "398a971f596a3c77",
        "type": "group",
        "z": "24510f25743eef8c",
        "name": "initialize dashboard controls at start",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "48fca1b6724de951",
            "1f1835bd1f7a046b",
            "d3e8ba34d44f67aa"
        ],
        "x": 894,
        "y": 279,
        "w": 382,
        "h": 82
    },
    {
        "id": "c1cff1a3486c905d",
        "type": "group",
        "z": "86021a0ae2220c2b",
        "name": "",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "b26df763264faaa4",
            "1180af1e760ed933"
        ],
        "x": 14,
        "y": 19,
        "w": 492,
        "h": 122
    },
    {
        "id": "f773f7f5615b8215",
        "type": "group",
        "z": "86021a0ae2220c2b",
        "name": "ground floor hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "f87cd6036de631b7",
            "0226968bb49f22c5",
            "4ebca8a3aa5763e5",
            "466fb66350e127f2",
            "acac97da53ff2812",
            "460867bbae94da5a",
            "915b3721df3bd41d",
            "f4e7f3f6609ec608",
            "13a8932676232537",
            "e178773d828de62d",
            "33da30d97725e077",
            "0696c3dfdfb89df9",
            "6b013bba424e77d0"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            },
            {
                "name": "BRIDGE",
                "value": "ground-floor",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send ground floor hue command",
                "type": "str"
            }
        ],
        "x": 514,
        "y": 19,
        "w": 832,
        "h": 342
    },
    {
        "id": "7ed122d84c5e7167",
        "type": "junction",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "x": 580,
        "y": 260,
        "wires": [
            [
                "f590050ce69df70f",
                "c2ebf6c0d74ad0e4"
            ]
        ]
    },
    {
        "id": "834d9349d1ebe8de",
        "type": "junction",
        "z": "a0b7d0294edc5956",
        "x": 720,
        "y": 140,
        "wires": [
            [
                "b00c5123ccc7aca8"
            ]
        ]
    },
    {
        "id": "c9d3ee76b8c11967",
        "type": "junction",
        "z": "d61db14468b910ab",
        "g": "061d94914ef0f0c0",
        "x": 360,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "5d95dbf897fe7abd",
        "type": "junction",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "x": 520,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "31328f7909c93485",
        "type": "junction",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "x": 600,
        "y": 480,
        "wires": [
            [
                "4e1d20e601e89e22",
                "5720dd9348b987ef",
                "91fe88dbcdcfd5fc"
            ]
        ]
    },
    {
        "id": "8bd183126cc5beaf",
        "type": "junction",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "x": 580,
        "y": 100,
        "wires": [
            [
                "c92600f6307981f9",
                "c015dc9dbd457ad9",
                "e913f94a740c212f"
            ]
        ]
    },
    {
        "id": "6e79e7537966793f",
        "type": "ui_tab",
        "name": "Controls",
        "icon": "fa-home",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "679eed718054e895",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Automation",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "none",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d45acf67bdd65c8f",
        "type": "ui_group",
        "name": "Automation",
        "tab": "6e79e7537966793f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "bad6261ac75df85d",
        "type": "ui_group",
        "name": "Window Shades",
        "tab": "6e79e7537966793f",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "21f11f110d626f5a",
        "type": "ui_group",
        "name": "Ground Floor Lighting",
        "tab": "6e79e7537966793f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ab9e7529ab02c320",
        "type": "ui_group",
        "name": "Basement Lighting",
        "tab": "6e79e7537966793f",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "96738d9e92f617dc",
        "type": "tls-config",
        "z": "dd3a1235085c7ed7",
        "name": "Ignore Certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "448d1e2ff0ff4a74",
        "type": "ui_toast",
        "z": "4a8af92611acc27a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 450,
        "y": 60,
        "wires": [
            []
        ],
        "info": "Display the HTML snippet as a \"toast\" on the dashboard."
    },
    {
        "id": "30e1991ea828ba4f",
        "type": "debug",
        "z": "4a8af92611acc27a",
        "name": "notification",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 190,
        "y": 140,
        "wires": [],
        "info": "Add the message to the debug pane."
    },
    {
        "id": "0985cf211a9510a2",
        "type": "template",
        "z": "4a8af92611acc27a",
        "name": "<pre>",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div>\n    <pre>{{payload}}</pre>\n</div>",
        "output": "str",
        "x": 310,
        "y": 60,
        "wires": [
            [
                "448d1e2ff0ff4a74"
            ]
        ],
        "info": "Wrap `msg.payload` in HTML."
    },
    {
        "id": "d2492fc09315bfc0",
        "type": "function",
        "z": "4a8af92611acc27a",
        "name": "stringify",
        "func": "msg.payload = JSON.stringify(msg, undefined, ' ')\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            [
                "0985cf211a9510a2"
            ]
        ],
        "info": "Pretty-print `msg.payload`."
    },
    {
        "id": "5280e126498476bc",
        "type": "status",
        "z": "4a8af92611acc27a",
        "name": "count",
        "scope": [
            "30e1991ea828ba4f"
        ],
        "x": 90,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "152881af3cfe09a3",
        "type": "switch",
        "z": "a0b7d0294edc5956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "4585854e9c80742e"
            ],
            [
                "69ef20c042513eec"
            ],
            [
                "621754612c4b4783"
            ],
            [
                "28f1f48654f5d897"
            ],
            [
                "d93ad1b014d6eaf4"
            ]
        ],
        "info": "Select the string representation of `EventSource.readyState` based on\nits numeric value."
    },
    {
        "id": "726e859588b521d1",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(status.text)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "152881af3cfe09a3"
            ]
        ],
        "info": "Parse `msg.status.text` as a number in `msg.payload`."
    },
    {
        "id": "4585854e9c80742e",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "unitialized",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "unitialized",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "className",
                "pt": "msg",
                "to": "${CLASS}-white",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 60,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ]
    },
    {
        "id": "69ef20c042513eec",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "connecting",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "connecting",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "className",
                "pt": "msg",
                "to": "${CLASS}-yellow",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ]
    },
    {
        "id": "621754612c4b4783",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "connected",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "connected",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "className",
                "pt": "msg",
                "to": "${CLASS}-green",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ]
    },
    {
        "id": "28f1f48654f5d897",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "failed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "failed",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "className",
                "pt": "msg",
                "to": "${CLASS}-red",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ]
    },
    {
        "id": "d93ad1b014d6eaf4",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "invalid",
        "rules": [
            {
                "t": "set",
                "p": "className",
                "pt": "msg",
                "to": "${CLASS}-grey",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 220,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ]
    },
    {
        "id": "b00c5123ccc7aca8",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"text\":payload,\t   \"shape\":status.shape,\t   \"fill\":status.fill\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 180,
        "wires": [
            []
        ],
        "info": "Convert the string representation of the `EventSource.readyState` back\ninto this subflow's status."
    },
    {
        "id": "07d9702ee21263d3",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 380,
        "wires": [
            [
                "27cbc52e000f9fd1"
            ]
        ],
        "info": "Prepare `msg.topic`, `msg.payload`, `msg.method` and `msg.target` to\nsend a request for all resource metadata to a Hue bridge using a\n`link call` node. The assumption is that the link will invoke an\ninstance of the _Send to Hue Bridge_ subflow configured with the same\nvalues for `ADDRESS` and `KEY`."
    },
    {
        "id": "27cbc52e000f9fd1",
        "type": "link call",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "${TARGET}",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "8909e3d843ad752c"
            ]
        ],
        "info": "Dynamically call the `link in` specified by `${TARGET}`."
    },
    {
        "id": "8909e3d843ad752c",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "parse metadata",
        "func": "if (msg.statusCode != 200) {\n\n    throw 'response status ' + msg.statusCode + ' from Hue API'\n\n}\n\nconst resources = {}\nconst events = []\n\nfor (let resource of msg.payload.data) {\n\n    const type = resources[resource.type] || {}\n\n    type[resource.id] = resource\n    resources[resource.type] = type\n\n}\n\nflow.set('resources', resources)\nflow.set('merged', [])\n\nfor (let id in resources.grouped_light) {\n\n    const grouped_light = resources.grouped_light[id]\n\n    events.push({\n        topic: 'add',\n        payload: grouped_light\n    })\n}\n\nreturn [\n    events,\n    {\n        payload: true\n    }\n]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 380,
        "wires": [
            [
                "afd10513e80a6c06"
            ],
            [
                "fcf52eacd721a4a9"
            ]
        ],
        "outputLabels": [
            "events",
            ""
        ],
        "info": "Reformat the resource data received from the Hue bridge for more\nefficient access while processing server-sent events and dynamically\nmanaging dashboard controls. Store the reformatted data in flow\ncontext. \"Prime the pump\" for server-sent event handling.\n\n# Input\n\nResponse from a Hue bridge containing response to a `/resource` request.\n\n# Outputs\n\n1. A stream of `grouped_light` events in the same format that would\n   be received as server-sent events\n2. A message used to signal that the flow context is ready to start\n   receiving event messages sent by the Hue bridge.\n\n# Details\n\nUse the value of `${BRIDGE}` as a key to store this subflow instance's\ndata in flow context as `$parent.hue.${BRIDGE}`."
    },
    {
        "id": "d48dd4b5aa1368b0",
        "type": "EventSource",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "d6f78cafaf0b00d7"
            ],
            [],
            [
                "5d95dbf897fe7abd"
            ]
        ],
        "info": "Subscribe to server-sent events from the\n[Hue Bridge API v2](https://developers.meethue.com/develop/hue-api-v2/).\n\nSee\n<https://developers.meethue.com/develop/hue-api-v2/core-concepts/#events>\nfor more information."
    },
    {
        "id": "2d13eb8e173c7968",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"url\":\"https://\" & $env('ADDRESS') & \"/eventstream/clip/v2\",\"initDict\":{\"withCredentials\":false,\"https\":{\"rejectUnauthorized\":false},\"headers\":{\"hue-application-key\":$env('KEY')}}}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 560,
        "wires": [
            [
                "d48dd4b5aa1368b0"
            ]
        ],
        "info": "Set `msg.payload` to the URL and `initDict` parameters required by the\n[Hue Bridge API V2](https://developers.meethue.com/develop/hue-api-v2/)\n\nSee\n<https://developers.meethue.com/develop/hue-api-v2/core-concepts/#events>\nfor more information."
    },
    {
        "id": "d6f78cafaf0b00d7",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 500,
        "wires": [
            [
                "22e026e913c8a836"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.data`."
    },
    {
        "id": "22e026e913c8a836",
        "type": "json",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 690,
        "y": 500,
        "wires": [
            [
                "1cd6fafb6c18354c"
            ]
        ],
        "info": "Parse the JSON string in `msg.payload`."
    },
    {
        "id": "1cd6fafb6c18354c",
        "type": "split",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 500,
        "wires": [
            [
                "f855f79c60d5581f"
            ]
        ],
        "info": "Split the array in `msg.payload` into individual messages."
    },
    {
        "id": "f855f79c60d5581f",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "topic & data",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.type",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 500,
        "wires": [
            [
                "dc94e795cd3258f8"
            ]
        ],
        "info": "Set `msg.topic` to `msg.payload.type` and then move `msg.payload.data`\nto `msg.payload`."
    },
    {
        "id": "dc94e795cd3258f8",
        "type": "split",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "1da7ab591b98f32c"
            ]
        ],
        "info": "Split the array in `msg.payload` into individual messages."
    },
    {
        "id": "8cd24b2b4ab64410",
        "type": "status",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "eventsource status",
        "scope": [
            "d48dd4b5aa1368b0"
        ],
        "x": 1090,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1056f2ddf9c58227",
        "type": "link in",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "subscribe",
        "links": [
            "fcf52eacd721a4a9"
        ],
        "x": 115,
        "y": 560,
        "wires": [
            [
                "2d13eb8e173c7968"
            ]
        ]
    },
    {
        "id": "fcf52eacd721a4a9",
        "type": "link out",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "ready",
        "mode": "link",
        "links": [
            "1056f2ddf9c58227"
        ],
        "x": 635,
        "y": 400,
        "wires": []
    },
    {
        "id": "fcb648906e6b792a",
        "type": "link out",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "publish",
        "mode": "link",
        "links": [
            "edb141c15ed881a4"
        ],
        "x": 1175,
        "y": 360,
        "wires": []
    },
    {
        "id": "edb141c15ed881a4",
        "type": "link in",
        "z": "d61db14468b910ab",
        "g": "061d94914ef0f0c0",
        "name": "events",
        "links": [
            "fcb648906e6b792a"
        ],
        "x": 115,
        "y": 200,
        "wires": [
            [
                "a3bfbe7bec9a2dda"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "339ebff143d5b535",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "update",
        "func": "const resources = flow.get('resources')\nconst type = resources[msg.payload.type] || {}\nconst resource = type[msg.payload.id] || {}\n\nfor (let key in msg.payload) {\n\n    resource[key] = msg.payload[key]\n\n}\n\nmsg.payload = resource\ntype[msg.payload.id] = resource\nresources[msg.payload.type] = type\nflow.set('resources', resources)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "fcb648906e6b792a"
            ]
        ],
        "info": "Update `msg.payload` in the resources and, for `grouped_light` events,\nmerged metadata cached in flow context."
    },
    {
        "id": "1bc6cee6558ccaf4",
        "type": "switch",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 930,
        "y": 360,
        "wires": [
            [
                "d29c26656d2e74ae"
            ],
            [
                "339ebff143d5b535"
            ],
            [
                "36dd0d5dc31ca8b4"
            ]
        ]
    },
    {
        "id": "36dd0d5dc31ca8b4",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "delete",
        "func": "const resources = flow.get('resources')\nconst type = resources[msg.payload.type] || {}\n\ndelete type[msg.payload.id]\nresources[msg.payload.type] = type\nflow.set('resources', resources)\n\nif (msg.payload.type == 'grouped_light') {\n\n    const oldMerged = flow.get('merged')\n    const newMerged = []\n\n    for (let entry of oldMerged) {\n\n        if (msg.payload.id != entry.grouped_light.id) {\n\n            newMerged.push(entry)\n\n        }\n    }\n\n    flow.set('merged', newMerged)\n\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 400,
        "wires": [
            [
                "fcb648906e6b792a"
            ]
        ],
        "info": "Delete `msg.payload` from the resources and, for `grouped_light` events,\nmerged metadata cached in flow context."
    },
    {
        "id": "3fe9b64e4c386d21",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "061d94914ef0f0c0",
        "name": "format metadata",
        "func": "const merged = flow.get('merged') || []\nconst resources = flow.get('resources') || {}\nconst model = []\n\nfor (let entry of merged) {\n\n    const grouped_light = entry.grouped_light\n    const group = entry.group\n    const scenes = entry.scenes\n    const label = (group.metadata ? group.metadata.name : 'All Lights')\n\n    model.push({\n        label: label,\n        id: grouped_light.id,\n        state: resources.grouped_light[grouped_light.id].on.on,\n        scenes: scenes.map((scene) => {\n            return {\n                id: scene.id,\n                name: scene.metadata.name\n            }\n        }).sort((a, b) => {\n\n            return a.name.localeCompare(b.name)\n\n        })\n    })\n}\n\nmsg.payload = model.sort((a, b) => {\n\n    return a.label.localeCompare(b.label)\n\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "d9ae737367ebed62"
            ]
        ],
        "info": "Extract the cached state of all `grouped_light` resources into a data\nstructure suitable for use by dynamically created dashboard controls."
    },
    {
        "id": "d9ae737367ebed62",
        "type": "template",
        "z": "d61db14468b910ab",
        "g": "061d94914ef0f0c0",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<div>\n    <div ng-repeat=\"model in msg.payload\" style=\"text-align:center\">\n        <div ng-if=\"$index > 0\">\n            <hr>\n        </div>\n        <md-switch style=\"margin-top:10px;margin-left:10px\" ng-value=\"model.state\" ng-model=\"model.state\"\n            ng-change=\"send({ topic: 'resource/grouped_light/' + model.id, payload: { on: { on:model.state } }, method: 'PUT' })\">\n            {{model.label}}\n        </md-switch>\n        <md-button style=\"display:inline-block;margin:1px\" ng-repeat=\"scene in model.scenes\"\n            ng-click=\"send({topic: 'resource/scene/' + scene.id, payload: {recall:{action:'dynamic_palette'}}, method: 'PUT'})\">\n            {{scene.name}}\n        </md-button>\n    </div>\n</div>",
        "output": "str",
        "x": 900,
        "y": 160,
        "wires": [
            []
        ],
        "info": "Provide the HTML template for dynamically created dashboard controls.\nThis uses the Node-RED dashboard's built-in support for AngularJS.\nThe intent is that the output of this function will be sent to a\n`ui_template` node for inclusion on the dashboard."
    },
    {
        "id": "eeb425059507ba39",
        "type": "switch",
        "z": "d61db14468b910ab",
        "g": "061d94914ef0f0c0",
        "name": "grouped_light",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "grouped_light",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 160,
        "wires": [
            [
                "b698fabef55c0f4c"
            ]
        ],
        "info": "Block unless this is a `grouped_light` event."
    },
    {
        "id": "5e8b87d6d8f0fed7",
        "type": "comment",
        "z": "d61db14468b910ab",
        "g": "ad76998e48254ce7",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "<https://developers.meethue.com/develop/hue-api-v2/>",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "afd10513e80a6c06",
        "type": "link out",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "initialize",
        "mode": "link",
        "links": [
            "980418c680804201"
        ],
        "x": 635,
        "y": 360,
        "wires": []
    },
    {
        "id": "a3bfbe7bec9a2dda",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "061d94914ef0f0c0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "event",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "'resource/grouped_light/' & payload.id",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 200,
        "wires": [
            [
                "eeb425059507ba39",
                "c9d3ee76b8c11967"
            ]
        ],
        "info": "Set `msg.topic` to the URI for the partiular `grouped_light` resource."
    },
    {
        "id": "b698fabef55c0f4c",
        "type": "rbe",
        "z": "d61db14468b910ab",
        "g": "061d94914ef0f0c0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "3fe9b64e4c386d21"
            ]
        ],
        "info": "Block for each topic, i.e. `grouped_light` resource, unless\n`msg.payload` changes."
    },
    {
        "id": "980418c680804201",
        "type": "link in",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "update",
        "links": [
            "1da7ab591b98f32c",
            "afd10513e80a6c06"
        ],
        "x": 835,
        "y": 360,
        "wires": [
            [
                "1bc6cee6558ccaf4"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "1da7ab591b98f32c",
        "type": "link out",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "events",
        "mode": "link",
        "links": [
            "980418c680804201"
        ],
        "x": 1175,
        "y": 500,
        "wires": []
    },
    {
        "id": "d29c26656d2e74ae",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "add",
        "func": "const resources = flow.get('resources')\nconst type = resources[msg.payload.type] || {}\nconst resource = type[msg.payload.id] || {}\n\nfunction findScenes(group) {\n\n    const scenes = []\n\n    for (let id in resources.scene) {\n\n        const scene = resources.scene[id]\n\n        if (scene.group.rid == group.id) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes\n\n}\n\nfunction findGroup(grouped_light) {\n\n    const groups = resources[grouped_light.owner.rtype]\n\n    for (let id in groups) {\n\n        const group = groups[id]\n\n        if (id == grouped_light.owner.rid) {\n\n            return {\n                grouped_light: grouped_light,\n                group: group,\n                scenes: findScenes(group)\n            }\n        }\n    }\n\n    throw 'no group found for grouped_light ' + grouped_light.id\n\n}\n\nif (resource.type == 'grouped_light') {\n\n    const merged = flow.get('merged')\n\n    merged.push(findGroup(resource))\n    flow.set('merged', merged)\n\n}\n\nfor (let key in msg.payload) {\n\n    resource[key] = msg.payload[key]\n\n}\n\nmsg.payload = resource\ntype[msg.payload.id] = resource\nresources[msg.payload.type] = type\nflow.set('resources',resources)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "fcb648906e6b792a"
            ]
        ],
        "info": "Add `msg.payload` to the resources and, for `grouped_light` events,\nmerged metadata cached in flow context."
    },
    {
        "id": "fa870f94fa1ea10b",
        "type": "change",
        "z": "dd3a1235085c7ed7",
        "name": "url and headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\"hue-application-key\": $env('KEY')}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'https://' & $env('ADDRESS') & '/clip/v2/' & topic",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "3709e3d94bfad967"
            ]
        ],
        "info": "Set `msg.url` and `msg.headers` based on the values i `msg.topic` and\nthe environment variables named `ADDRESS` and `KEY`."
    },
    {
        "id": "3709e3d94bfad967",
        "type": "delay",
        "z": "dd3a1235085c7ed7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 160,
        "wires": [
            [
                "20ac42d7649c260a"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the Hue bridge to 1 per\nsecond."
    },
    {
        "id": "20ac42d7649c260a",
        "type": "http request",
        "z": "dd3a1235085c7ed7",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "96738d9e92f617dc",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "c029fcaa62306eb2"
            ]
        ],
        "info": "Send a message to the Hue bridge using TLS but with certificate\nvalidation disabled due to defects in the Hue Bridge API."
    },
    {
        "id": "c029fcaa62306eb2",
        "type": "function",
        "z": "dd3a1235085c7ed7",
        "name": "validate response",
        "func": "let fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode < 200) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode >= 300) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (!msg.payload.data) {\n\n        fill = 'yellow'\n        return msg\n\n    }\n\n    if (!msg.payload.errors) {\n\n        fill = 'yellow'\n        return msg\n\n    }\n\n    /*\n    hue bridge api defect: meaningless warning messages\n                           are often included in errors\n                           array so there is no actual\n                           way to determine if a command\n                           was successful\n    \n    if (msg.payload.errors.length > 0) {\n    \n        fill = 'yellow'\n        return msg\n    \n    }\n    */\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n\n    }\n\n    return null\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 200,
        "wires": [
            []
        ],
        "outputLabels": [
            "response"
        ],
        "info": "Block unless the output from the `http request` node indicates an\nerror."
    },
    {
        "id": "7f6c4efded50ed6b",
        "type": "status",
        "z": "dd3a1235085c7ed7",
        "name": "validate response",
        "scope": [
            "c029fcaa62306eb2"
        ],
        "x": 520,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "aef7dcdbe4ac6a64",
        "type": "comment",
        "z": "dd3a1235085c7ed7",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 60,
        "wires": []
    },
    {
        "id": "e4c0d45173cb5dad",
        "type": "function",
        "z": "9a9103e8b9a05415",
        "name": "state",
        "func": "const TOPIC = env.get('TOPIC')\nconst STATE = '$parent.' + env.get('STATE')\nconst STORE = env.get('STORE')\n\nmsg.topic = TOPIC\nflow.set(STATE, msg.payload, STORE)\n\nnode.status({\n    text: msg.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "const TOPIC = env.get('TOPIC')\nconst STATE = '$parent.' + env.get('STATE')\nconst STORE = env.get('STORE')\nconst DEFAULT = env.get('DEFAULT')\n\nlet state = flow.get(STATE, STORE)\n\nif (state === undefined) {\n\n    state = DEFAULT\n    flow.set(STATE, state, STORE)\n\n}\n\nnode.status({\n    text: state,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nnode.send({ topic: TOPIC, payload: state })",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 60,
        "wires": [
            []
        ],
        "info": "Set `msg.payload` to the value of `flow.bedtime` using the context\nstore named `file` or to the number 22 (denoting 10PM) if\n`flow.bedtime` is undefined."
    },
    {
        "id": "82ef6a5436d70449",
        "type": "status",
        "z": "9a9103e8b9a05415",
        "name": "state",
        "scope": [
            "e4c0d45173cb5dad"
        ],
        "x": 150,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "32e4dd9341d63405",
        "type": "inject",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 01 * * *",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "8e8260bf6d0fb1d1"
            ]
        ],
        "info": "Send the current timestamp every morning at 1AM"
    },
    {
        "id": "83852d4482fadfc7",
        "type": "function",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "sun",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst date = new Date(msg.payload.time)\n\n// work around bug in suncalc\nconst times = suncalc.getTimes(\n    new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        1,\n        1,\n        0,\n        0),\n    LATITUDE,\n    LONGITUDE)\n\nmsg.payload.sunrise = times.sunrise.getTime()\nmsg.payload.sunset = times.sunset.getTime()\n\nnode.status({\n    text: times.sunrise.toLocaleDateString(),\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "9dc6f3432564c1e2"
            ]
        ],
        "inputLabels": [
            "timestamp"
        ],
        "outputLabels": [
            "sunrise"
        ],
        "info": "Use [suncalc](https://www.npmjs.com/package/suncalc) to determine the\ntimestamps for sunrise and sunset.\n\n# Input\n\n- `msg.payload.time` contains a timestamp\n\n# Output\n\n- `msg.payload.sunrise` is the timestamp for sunrise reported by\n  _suncalc_\n- `msg.payload.sunset` is the timestamp for sunset reported by\n  _suncalc_\n\n# Details\n\nThis function requires permission to load the _suncalc_ package and\nthat environment variables named `LATITUDE` and `LONGITUDE` specify the\ngeographical coordinates to use when calling `suncalc.getTimes()`."
    },
    {
        "id": "9dc6f3432564c1e2",
        "type": "function",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "bedtime",
        "func": "const MILLIS_PER_SECOND = 1000\nconst MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\nconst MILLIS_PER_HALF_HOUR = 30 * MILLIS_PER_MINUTE\nconst MILLIS_PER_HOUR = 2 * MILLIS_PER_HALF_HOUR\n\nconst bedtime = flow.get('bedtime', 'file') || 22\nconst date = new Date(msg.payload.time)\nconst time = new Date(date.getFullYear(), date.getMonth(), date.getDate(), bedtime, 0, 0, 0).getTime()\nconst offset = MILLIS_PER_HALF_HOUR - Math.floor(Math.random() * MILLIS_PER_HOUR)\n\nmsg.payload.bedtime = time + offset\n\nnode.status({\n    text: new Date(msg.payload.bedtime).toLocaleTimeString(),\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 200,
        "wires": [
            [
                "47d3d2e7f832edc0"
            ]
        ],
        "inputLabels": [
            "timestamp"
        ],
        "outputLabels": [
            "bedtime"
        ],
        "info": "# Input\n\n`msg.payload.time` contains a timestamp\n\n# Output\n\n`msg.payload.bedtime` set to a randomly generated timestamp\n\n# Details\n\nThe timestamp in `msg.payload.bedtime` is the result of adding a\nrandomly generated offset of plus or minus 30 minutes to the hour\nspecified by the `bedtime` flow context variable on the same day as that\nspecified by `msg.payload.time`. This requires a filesystem-backed\ncontext store named `file` and assumes that the `bedtime` context\nvariable will have been set by a dashboard control. It uses a default\nvalue of 22 (10PM) if `bedtime` has not yet been set."
    },
    {
        "id": "47d3d2e7f832edc0",
        "type": "function",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "theme",
        "func": "const date = new Date(msg.payload.time)\nconst month = date.getMonth() + 1\nconst day = date.getDate()\n\nif ((month == 7) && (day <= 4)) {\n\n    msg.payload.theme = 'tribal'\n\n} else if (month == 10) {\n\n    msg.payload.theme = 'spooky'\n\n} else if (month == 12) {\n\n    msg.payload.theme = 'jolly'\n\n\n} else {\n\n    msg.payload.theme = 'standard'\n\n}\n\nnode.status({\n    text: msg.payload.theme,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 200,
        "wires": [
            [
                "c50b52aee3f36be8"
            ]
        ],
        "inputLabels": [
            "timestamp"
        ],
        "outputLabels": [
            "theme"
        ],
        "info": "# Input\n\n`msg.payload.time` contains a timestamp\n\n# Output\n\n`msg.payload.theme` set to one of the following strings:\n\n| Payload    | Description         |\n|------------|---------------------|\n| `tribal`   | July 1 - 4          |\n| `spooky`   | Any day in October  |\n| `jolly`    | Any day in December |\n| `standard` | Any other day       |\n\n# Details\n\nThe date which determines `msg.payload.theme` is that specified by the\ntimestamp in `msg.payload.time`."
    },
    {
        "id": "829d6487fc430502",
        "type": "link in",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "send daily",
        "links": [
            "e52486dc4d837c03",
            "3a210f7e37be9ff5",
            "e15932987c8aeb5e",
            "c5b9a97f9cc97bd1"
        ],
        "x": 145,
        "y": 220,
        "wires": [
            [
                "8e8260bf6d0fb1d1"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "03ac34a13709be39",
        "type": "inject",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 160,
        "wires": [
            [
                "54c207974d22c913"
            ]
        ],
        "info": "Send the current timestamp every minute."
    },
    {
        "id": "c50b52aee3f36be8",
        "type": "rbe",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 200,
        "wires": [
            [
                "54c207974d22c913"
            ]
        ],
        "info": "Block for each topic unless the payload changes."
    },
    {
        "id": "02d93ffb776df2c5",
        "type": "comment",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "assumes that a filesystem-backed context store exists named 'file'",
        "info": "",
        "x": 270,
        "y": 320,
        "wires": []
    },
    {
        "id": "ecfbd237278bdee4",
        "type": "ui_dropdown",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "Bedtime Dropdown",
        "label": "Bedtime",
        "tooltip": "",
        "place": "Select time",
        "group": "d45acf67bdd65c8f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "9PM",
                "value": 21,
                "type": "num"
            },
            {
                "label": "10PM",
                "value": 22,
                "type": "num"
            },
            {
                "label": "11PM",
                "value": 23,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 370,
        "y": 380,
        "wires": [
            [
                "3a210f7e37be9ff5"
            ]
        ],
        "info": "Dashboard dropdown allowing users to select a value to\nuse when calculating each day's bedtime."
    },
    {
        "id": "48fca1b6724de951",
        "type": "inject",
        "z": "24510f25743eef8c",
        "g": "398a971f596a3c77",
        "name": "at start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "1f1835bd1f7a046b"
            ]
        ],
        "info": "Send the current timestamp when the flow starts."
    },
    {
        "id": "8802b0ac9b530f7c",
        "type": "link in",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "update bedtime dashboard",
        "links": [
            "3a210f7e37be9ff5",
            "5102d6facd1ff9a2"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "974cc61995ad786c"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "3a210f7e37be9ff5",
        "type": "link out",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "bedtime dashboard",
        "mode": "link",
        "links": [
            "829d6487fc430502",
            "8802b0ac9b530f7c"
        ],
        "x": 495,
        "y": 380,
        "wires": []
    },
    {
        "id": "8e8260bf6d0fb1d1",
        "type": "change",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "{\"time\":$millis()}",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"time\":$millis()}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "daily",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 200,
        "wires": [
            [
                "83852d4482fadfc7"
            ]
        ],
        "info": "Set `msg.topic` to `daily`.\n\nSet `msg.payload` to `{\"time\":timestamp}` where _timestamp_ is the\ncurrent time as reported by the `$millis()` JSONata function."
    },
    {
        "id": "1f1835bd1f7a046b",
        "type": "ui_button",
        "z": "24510f25743eef8c",
        "g": "398a971f596a3c77",
        "name": "",
        "group": "d45acf67bdd65c8f",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "refresh",
        "topicType": "str",
        "x": 1140,
        "y": 320,
        "wires": [
            [
                "d3e8ba34d44f67aa"
            ]
        ],
        "info": "Trigger the dynamic creation of dashboard controls by querying the\nHue and PowerView API's at start up and each time the _Refresh_\nbutton is pressed."
    },
    {
        "id": "d3e8ba34d44f67aa",
        "type": "link out",
        "z": "24510f25743eef8c",
        "g": "398a971f596a3c77",
        "name": "refresh",
        "mode": "link",
        "links": [
            "8d7e72df780c1561",
            "915b3721df3bd41d",
            "9b899812a51421bf",
            "d857f6ba793e2430",
            "3f8329fdc5c54932"
        ],
        "x": 1235,
        "y": 320,
        "wires": []
    },
    {
        "id": "54c207974d22c913",
        "type": "join",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 910,
        "y": 180,
        "wires": [
            [
                "c45a75a4ea70bf3a"
            ]
        ],
        "info": "Wait for the first two messages to arrive. Send a combined payload for\nboth messages and again each time a new input value arrives."
    },
    {
        "id": "c45a75a4ea70bf3a",
        "type": "function",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "time",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst now = msg.payload.now\nconst daily = msg.payload.daily\nconst lighting = flow.get('lighting', 'file') || false\nconst shades = flow.get('shades', 'file') || false\nconst position = suncalc.getPosition(new Date(now), LATITUDE, LONGITUDE)\n\nmsg.topic = 'trigger'\nmsg.payload = {\n    lighting: lighting,\n    shades: shades,\n    theme: daily.theme\n}\n\nif ((now < daily.sunrise) || (now >= daily.bedtime)) {\n\n    msg.payload.time = 'night'\n\n} else if (now > daily.sunset) {\n\n    msg.payload.time = 'evening'\n\n} else if (position.azimuth > 0) {\n\n    if (position.altitude < 0.8) {\n\n        msg.payload.time = 'afternoon'\n\n    } else {\n\n        msg.payload.time = 'midday'\n\n    }\n\n} else {\n\n    if (position.altitude > 0.8) {\n\n        msg.payload.time = 'midday'\n\n    } else {\n\n        msg.payload.time = 'morning'\n\n    }\n}\n\nnode.status({\n    text: msg.payload.time,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "a3864a0d07101185"
            ]
        ],
        "outputLabels": [
            "time"
        ],
        "info": "Use [suncalc](https://www.npmjs.com/package/suncalc) to send a message\ncontaining a string denoting the current time of day.\n\n# Input\n\n- `msg.payload.now` contains the current timestamp\n- `msg.payload.daily` contains on object with `sunrise`, `sunset`,\n  `bedtime` and `theme` properties, as described below.\n\n# Outputs\n\n- `msg.topic` is `time`\n- `msg.payload` is an object with the following properties:\n\n  | Property               | Description                                   |\n  |------------------------|-----------------------------------------------|\n  | `msg.payload.lighting` | Value of the `lighting` flow context variable |\n  | `msg.payload.shades`   | Value of the `shades` flow context variable   |\n  | `msg.payload.theme`    | Passed through from the input                 |\n  | `msg.payload.time`     | One of the `time` strings described below     |\n\n# Details\n\nThis function requires permission to load the _suncalc_ package and\nthat environment variables named `LATITUDE` and `LONGITUDE` specify the\ngeographical coordinates to use when calling `suncalc.getPosition()`.\n\nIt uses the values of `msg.payload.now`, `msg.payload.daily.sunrise`,\n`msg.payload.daily.sunset` and `msg.payload.daily.bedtime` in the\ninput to set `msg.payload.time` to one of the following values in\nin the output:\n\n| `msg.payload.time` | Description                                                                                              |\n|--------------------|----------------------------------------------------------------------------------------------------------|\n| `morning`          | Starts at sunrise; ends when the sun is coming from the east and risen above a particular alitude        |\n| `midday`           | Starts when the sun has reached a particular altitude; ends when the sun has dropped below that altitude |\n| `afternoon`        | Starts when the sun is coming from the west and is below a particular altitude                           |\n| `evening`          | Starts at sunset; ends at bedtime                                                                        |\n| `night`            | Starts at bedtime; ends at sunrise the next day                                                          |"
    },
    {
        "id": "6a14f93e5d6efc13",
        "type": "link out",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "trigger",
        "mode": "link",
        "links": [
            "8083b56440c292c8",
            "a9a05d5f14d5310e",
            "64fa5f1cef66ef07"
        ],
        "x": 1235,
        "y": 180,
        "wires": []
    },
    {
        "id": "617c23c03011acd7",
        "type": "link in",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "update shades dashboard",
        "links": [
            "aeb4f335b3eb97b3",
            "e15932987c8aeb5e",
            "2426a08e2a2b03ac"
        ],
        "x": 55,
        "y": 440,
        "wires": [
            [
                "6ac690b97c6f499a"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "e147ba939c07a9a6",
        "type": "ui_switch",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "Enable Shades Switch",
        "label": "Enable Shades",
        "tooltip": "",
        "group": "d45acf67bdd65c8f",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "shades",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 420,
        "y": 440,
        "wires": [
            [
                "e15932987c8aeb5e"
            ]
        ],
        "info": "Dashboard switch allowing users to enable or disable window shades\nautomation."
    },
    {
        "id": "e15932987c8aeb5e",
        "type": "link out",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "shades",
        "mode": "link",
        "links": [
            "617c23c03011acd7",
            "829d6487fc430502"
        ],
        "x": 555,
        "y": 440,
        "wires": []
    },
    {
        "id": "b681bcc695abf3d1",
        "type": "link in",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "update lighting dashboard",
        "links": [
            "1ca93b0df7e6648c",
            "c5b9a97f9cc97bd1",
            "f1e8d4076621b4b4"
        ],
        "x": 65,
        "y": 500,
        "wires": [
            [
                "e6217093fd1deefe"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "895d1c6f5d4cf269",
        "type": "ui_switch",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "Enable Lighting Switch",
        "label": "Enable Lighting",
        "tooltip": "",
        "group": "d45acf67bdd65c8f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "lighting",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 420,
        "y": 500,
        "wires": [
            [
                "c5b9a97f9cc97bd1"
            ]
        ],
        "info": "Dashboard switch allowing users to enable or disable lighting\nautomation."
    },
    {
        "id": "c5b9a97f9cc97bd1",
        "type": "link out",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "lighting",
        "mode": "link",
        "links": [
            "829d6487fc430502",
            "b681bcc695abf3d1"
        ],
        "x": 555,
        "y": 500,
        "wires": []
    },
    {
        "id": "a3864a0d07101185",
        "type": "rbe",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "6a14f93e5d6efc13"
            ]
        ]
    },
    {
        "id": "6397de314a021b18",
        "type": "comment",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "assumes that ${LATITUDE} and ${LONGITUDE} are defined",
        "info": "",
        "x": 260,
        "y": 140,
        "wires": []
    },
    {
        "id": "26656249d7cbd1bd",
        "type": "comment",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "assumes that function nodes are permitted to load the suncalc package",
        "info": "",
        "x": 290,
        "y": 100,
        "wires": []
    },
    {
        "id": "7696fdb01e9be86c",
        "type": "comment",
        "z": "24510f25743eef8c",
        "g": "ff5e6c57350b517d",
        "name": "assumes that a filesystem-backed context store exists named 'file'",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "974cc61995ad786c",
        "type": "subflow:9a9103e8b9a05415",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "Bedtime State",
        "env": [
            {
                "name": "TOPIC",
                "value": "bedtime",
                "type": "str"
            },
            {
                "name": "STATE",
                "value": "bedtime",
                "type": "str"
            },
            {
                "name": "DEFAULT",
                "value": "22",
                "type": "num"
            }
        ],
        "x": 180,
        "y": 380,
        "wires": [
            [
                "ecfbd237278bdee4"
            ]
        ]
    },
    {
        "id": "6ac690b97c6f499a",
        "type": "subflow:9a9103e8b9a05415",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "Enable Shades State",
        "env": [
            {
                "name": "TOPIC",
                "value": "shades",
                "type": "str"
            },
            {
                "name": "STATE",
                "value": "shades",
                "type": "str"
            },
            {
                "name": "DEFAULT",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 200,
        "y": 440,
        "wires": [
            [
                "e147ba939c07a9a6"
            ]
        ]
    },
    {
        "id": "e6217093fd1deefe",
        "type": "subflow:9a9103e8b9a05415",
        "z": "24510f25743eef8c",
        "g": "2da3e0020db1582c",
        "name": "Enable Lighting State",
        "env": [
            {
                "name": "TOPIC",
                "value": "lighting",
                "type": "str"
            },
            {
                "name": "STATE",
                "value": "lighting",
                "type": "str"
            },
            {
                "name": "DEFAULT",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 200,
        "y": 500,
        "wires": [
            [
                "895d1c6f5d4cf269"
            ]
        ]
    },
    {
        "id": "8083b56440c292c8",
        "type": "link in",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "trigger lighting",
        "links": [
            "6a14f93e5d6efc13"
        ],
        "x": 135,
        "y": 260,
        "wires": [
            [
                "21d5dda80821a109"
            ]
        ]
    },
    {
        "id": "21d5dda80821a109",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "payload.lighting",
        "property": "payload.lighting",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 260,
        "wires": [
            [
                "aae17e5a30471de5"
            ]
        ],
        "info": "Block unless lighting automation is enabled by a user."
    },
    {
        "id": "aae17e5a30471de5",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "payload.time",
        "property": "payload.time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 430,
        "y": 260,
        "wires": [
            [
                "8bd183126cc5beaf"
            ],
            [
                "7ed122d84c5e7167"
            ],
            [
                "31328f7909c93485"
            ]
        ],
        "info": "Trigger lighting automation for the specified `time`."
    },
    {
        "id": "f590050ce69df70f",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "payload.theme",
        "property": "payload.theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tribal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spooky",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jolly",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 720,
        "y": 320,
        "wires": [
            [
                "6b81bc8a01c525d8"
            ],
            [
                "0de1a81dd7644afc"
            ],
            [
                "776dedfbba2c68ec"
            ],
            [
                "b314af61e3fe5e68"
            ]
        ],
        "info": "Trigger evening lighting automation for the specified `theme`."
    },
    {
        "id": "6b81bc8a01c525d8",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard tribal",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/c4681d32-3368-43cd-9cf1-436132521068",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 260,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Tribal_ scene."
    },
    {
        "id": "0de1a81dd7644afc",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard spooky",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/70a0a8a6-b4b7-4b24-a9cf-0ecea0f359cc",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 300,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Spooky_ scene."
    },
    {
        "id": "776dedfbba2c68ec",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard jolly",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/12571f23-7714-4b47-8e75-a3040389b788",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 340,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Jolly_ scene."
    },
    {
        "id": "b314af61e3fe5e68",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/9b6935e2-f8ed-4f91-83a2-2bff1850da99",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 380,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Sunset_ scene."
    },
    {
        "id": "5720dd9348b987ef",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main bathroom nightlight",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 440,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Bathroom_'s _Nightlight_ scene."
    },
    {
        "id": "c2ebf6c0d74ad0e4",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/6eff0801-01e2-4803-9840-e31c06cee079",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 200,
        "wires": [
            [
                "e69068dc88fed591"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Floor_ zone's _Sunset_ scene."
    },
    {
        "id": "4e1d20e601e89e22",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor nightlight",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 480,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Floor_ zone's _Nightlight_ scene."
    },
    {
        "id": "c92600f6307981f9",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor off",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/9c1c7975-2f47-4552-bac8-c19b643cd678",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 100,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Main Floor_ zone."
    },
    {
        "id": "c015dc9dbd457ad9",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main bathroom off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/aea74e74-d544-4d08-ad71-3b6665045256",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 140,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Main Bathroom_."
    },
    {
        "id": "e69068dc88fed591",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 970,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ece9e398ddf1a6a0",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1030,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "fa502f5378dbe770",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 970,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "28d0a7dae21e1fcf",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1210,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "a9a05d5f14d5310e",
        "type": "link in",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "trigger shades",
        "links": [
            "6a14f93e5d6efc13"
        ],
        "x": 155,
        "y": 680,
        "wires": [
            [
                "31e39e81f78fa235"
            ]
        ]
    },
    {
        "id": "31e39e81f78fa235",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "payload.shades",
        "property": "payload.shades",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 680,
        "wires": [
            [
                "37bac7a6b658ade4"
            ]
        ],
        "info": "Block unless shades automation is enabled by a user."
    },
    {
        "id": "37bac7a6b658ade4",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "payload.time",
        "property": "payload.time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "midday",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "afternoon",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 450,
        "y": 680,
        "wires": [
            [
                "6a9ac472018c38ea"
            ],
            [
                "c8c9c1f0d8b62902"
            ],
            [
                "9e961b1409432775"
            ],
            [
                "db4f7c2c93cd8f30"
            ]
        ],
        "info": "Trigger window shades automation for the specified `time`."
    },
    {
        "id": "ec730ac674a50f58",
        "type": "link out",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "activate morning shades scene",
        "mode": "link",
        "links": [
            "8810232073bb1f9d",
            "689bb9bf9977b2c7"
        ],
        "x": 855,
        "y": 680,
        "wires": []
    },
    {
        "id": "6a9ac472018c38ea",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "Morning Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "56393",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 620,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Morning Shades_."
    },
    {
        "id": "c8c9c1f0d8b62902",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "Open All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7307",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Open All Shades_."
    },
    {
        "id": "9e961b1409432775",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "Afternoon Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "42686",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Afternoon Shades_."
    },
    {
        "id": "db4f7c2c93cd8f30",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "Close All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "15208",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 740,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Close All Shades_."
    },
    {
        "id": "9fff86ab30bd6e09",
        "type": "comment",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "cd74e5b3da0290a6",
        "type": "comment",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "https://motorisation.hde.nl/hd/powerview/general-guides/API/",
        "info": "",
        "x": 320,
        "y": 620,
        "wires": []
    },
    {
        "id": "59515344b6be644c",
        "type": "link in",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "links": [],
        "x": 155,
        "y": 480,
        "wires": [
            [
                "d16bfe986e4d4a68"
            ]
        ]
    },
    {
        "id": "d16bfe986e4d4a68",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 480,
        "wires": [
            [
                "945e6e160c72332c"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Yard_ \"room\"."
    },
    {
        "id": "945e6e160c72332c",
        "type": "link out",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "mode": "return",
        "links": [],
        "x": 355,
        "y": 480,
        "wires": []
    },
    {
        "id": "e913f94a740c212f",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "59515344b6be644c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 740,
        "y": 60,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ]
    },
    {
        "id": "91fe88dbcdcfd5fc",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "59515344b6be644c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 800,
        "y": 520,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ]
    },
    {
        "id": "70e42b6637f4c865",
        "type": "delay",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "413305fe8cf8bc16"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the PowerView hub to 1 per\nsecond."
    },
    {
        "id": "413305fe8cf8bc16",
        "type": "http request",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "3b9aea255e25c86d",
                "450c11f088a3f9ee"
            ]
        ],
        "info": "Send `msg.url` as a `GET` request to the PowerView hub."
    },
    {
        "id": "3b9aea255e25c86d",
        "type": "function",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "check status code",
        "func": "let fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n\n    }\n\n    return null\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            [
                "b528e18246309ead"
            ]
        ],
        "outputLabels": [
            "success"
        ],
        "info": "Block unless the response indicates an error occurred."
    },
    {
        "id": "b528e18246309ead",
        "type": "subflow:4a8af92611acc27a",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "x": 750,
        "y": 200,
        "wires": [],
        "info": "Display error messages on the dashboard and in the debug pane."
    },
    {
        "id": "450c11f088a3f9ee",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "powerview response",
        "mode": "return",
        "links": [],
        "x": 515,
        "y": 160,
        "wires": []
    },
    {
        "id": "a250d71416af8250",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "send to powerview",
        "links": [],
        "x": 135,
        "y": 180,
        "wires": [
            [
                "70e42b6637f4c865"
            ]
        ]
    },
    {
        "id": "02eb116aa3a7efad",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/scenes/'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 360,
        "wires": [
            [
                "a2ce2f10f0cbc3b4"
            ]
        ],
        "info": "Set `msg.url` to request the list of scenes from the PowerView hub."
    },
    {
        "id": "a2ce2f10f0cbc3b4",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 430,
        "y": 360,
        "wires": [
            [
                "4597056c8e33d1d2"
            ]
        ]
    },
    {
        "id": "4597056c8e33d1d2",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sceneData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 360,
        "wires": [
            [
                "a4b2cb7314b93cec"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.sceneData`."
    },
    {
        "id": "a4b2cb7314b93cec",
        "type": "split",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 360,
        "wires": [
            [
                "e89d138990a2c571"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "e89d138990a2c571",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"sceneName\":$base64decode(payload.name),\"sceneId\":payload.id,\"roomId\":payload.roomId}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 360,
        "wires": [
            [
                "09ed6328f31946db"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "09ed6328f31946db",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "ca455aa5752d94d8"
            ]
        ],
        "info": "Join split messages into an array."
    },
    {
        "id": "a4115f1a663ecf84",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/rooms/'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 420,
        "wires": [
            [
                "b3fa2dd0b396e5ba"
            ]
        ],
        "info": "Set `msg.url` to request the list of room from the PowerView hub."
    },
    {
        "id": "b3fa2dd0b396e5ba",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 430,
        "y": 420,
        "wires": [
            [
                "7379bd9759e06a98"
            ]
        ]
    },
    {
        "id": "7379bd9759e06a98",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.roomData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 420,
        "wires": [
            [
                "fa994326c2180556"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.roomData`."
    },
    {
        "id": "fa994326c2180556",
        "type": "split",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "97d89691a9505bb9"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "97d89691a9505bb9",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"roomName\":$base64decode(payload.name),\"roomId\":payload.id}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 420,
        "wires": [
            [
                "23ce9cde77523965"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "23ce9cde77523965",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "b3b32f662f388893"
            ]
        ],
        "info": "Join split messages into an array."
    },
    {
        "id": "ca455aa5752d94d8",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scenes",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 360,
        "wires": [
            [
                "78a3fbe808d63c4c"
            ]
        ],
        "info": "Set `msg.topic` to `scenes`."
    },
    {
        "id": "78a3fbe808d63c4c",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "get rooms",
        "mode": "link",
        "links": [
            "b6e07b7b99531b02"
        ],
        "x": 1315,
        "y": 360,
        "wires": []
    },
    {
        "id": "8d7e72df780c1561",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "refresh powerview rooms",
        "links": [
            "2cbe03b901af4142",
            "d3e8ba34d44f67aa"
        ],
        "x": 135,
        "y": 420,
        "wires": [
            [
                "a4115f1a663ecf84"
            ]
        ]
    },
    {
        "id": "9950e52333199d8f",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "powerview metadata",
        "mode": "link",
        "links": [
            "b6e07b7b99531b02"
        ],
        "x": 1315,
        "y": 420,
        "wires": []
    },
    {
        "id": "b6e07b7b99531b02",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "powerview metadata",
        "links": [
            "9950e52333199d8f",
            "78a3fbe808d63c4c"
        ],
        "x": 135,
        "y": 480,
        "wires": [
            [
                "75f0adce74746386"
            ]
        ]
    },
    {
        "id": "b3b32f662f388893",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rooms",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 420,
        "wires": [
            [
                "9950e52333199d8f"
            ]
        ],
        "info": "Set `msg.topic` to `rooms`."
    },
    {
        "id": "7fb1bd1acb1ca5f7",
        "type": "function",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "for dashboard",
        "func": "msg.dashboard = []\n\nfunction findScenes(roomId) {\n\n    const scenes = []\n\n    for (const scene of msg.payload.scenes) {\n\n        if (scene.roomId == roomId) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n        return a.sceneName.localeCompare(b.sceneName)\n    })\n}\n\nfor (const room of msg.payload.rooms) {\n\n    const scenes = findScenes(room.roomId)\n\n    if (scenes.length > 0) {\n\n        const roomScenes = []\n\n        for (const scene of scenes) {\n\n            roomScenes.push({\n                sceneName: scene.sceneName,\n                sceneId: scene.sceneId\n            })\n        }\n\n        msg.dashboard.push({\n            roomName: room.roomName,\n            roomScenes: roomScenes\n        })\n    }\n}\n\nmsg.dashboard = msg.dashboard.sort((a, b) => {\n    return a.roomName.localeCompare(b.roomName)\n})\n\ncontext.set('metadata', msg.payload)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 480,
        "wires": [
            [
                "0a9432f7e85182e1"
            ]
        ],
        "info": "Format `rooms` and `scenes` metadata into a combined data structure\nsuitable for use with a `template` node to dynamically create dashboard\ncontrols."
    },
    {
        "id": "0a9432f7e85182e1",
        "type": "ui_template",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "group": "bad6261ac75df85d",
        "name": "Shade Controls",
        "order": 2,
        "width": "6",
        "height": "10",
        "format": "<div>\n    <div ng-repeat=\"room in msg.dashboard\" style=\"text-align:center\">\n        <hr ng-if=\"$index > 0\">\n        <p style=\"font-style:italic\">{{room.roomName}}</p>\n        <md-button ng-repeat=\"scene in room.roomScenes\" ng-click=\"send({topic:scene.sceneName,payload:scene.sceneId})\">\n            {{scene.sceneName}}\n        </md-button>\n    </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 480,
        "wires": [
            [
                "6f2a76cdcf373136"
            ]
        ],
        "info": "Display dynamically created controls on the dashboard."
    },
    {
        "id": "6f2a76cdcf373136",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "activate powerview scene",
        "mode": "link",
        "links": [
            "689bb9bf9977b2c7"
        ],
        "x": 675,
        "y": 480,
        "wires": []
    },
    {
        "id": "9b899812a51421bf",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "refresh powerview scenes",
        "links": [
            "2cbe03b901af4142",
            "d3e8ba34d44f67aa"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "02eb116aa3a7efad"
            ]
        ]
    },
    {
        "id": "75f0adce74746386",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 230,
        "y": 480,
        "wires": [
            [
                "7fb1bd1acb1ca5f7"
            ]
        ],
        "info": "Join messages containing `rooms` and `scenes` metadata."
    },
    {
        "id": "ddda84706da2c026",
        "type": "comment",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 300,
        "y": 300,
        "wires": []
    },
    {
        "id": "b6ce3321e4119a91",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/scenes?sceneId=' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 620,
        "wires": [
            [
                "26124b0246ef158d"
            ]
        ],
        "info": "Set `msg.url` to the URL with query string to activate the scene\nspecified by `msg.payload` using the IP address specified by the\nenvironment variable named `POWERVIEW_ADDRESS`."
    },
    {
        "id": "689bb9bf9977b2c7",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "activate powerview scene",
        "links": [
            "81d6c43098a91e64",
            "6f2a76cdcf373136",
            "ec730ac674a50f58",
            "4517f2c78c9498d7",
            "3d7ec93adc3b5b60",
            "bbbb4e53c2082d73"
        ],
        "x": 145,
        "y": 620,
        "wires": [
            [
                "b6ce3321e4119a91"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "26124b0246ef158d",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 430,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "e90c8c66623d3a7b",
        "type": "comment",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 300,
        "y": 580,
        "wires": []
    },
    {
        "id": "74e55c13e48dd047",
        "type": "comment",
        "z": "dcb190a34f9985d0",
        "g": "da437f2ac1efc073",
        "name": "https://motorisation.hde.nl/hd/powerview/general-guides/API/",
        "info": "",
        "x": 340,
        "y": 60,
        "wires": []
    },
    {
        "id": "10c74bd3ce62390f",
        "type": "link in",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "send basement hue command",
        "links": [],
        "x": 555,
        "y": 520,
        "wires": [
            [
                "85c6aa31ab17c911"
            ]
        ]
    },
    {
        "id": "85c6aa31ab17c911",
        "type": "subflow:dd3a1235085c7ed7",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "Send Basement Hue Command",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            }
        ],
        "x": 730,
        "y": 520,
        "wires": [
            [
                "40f45c398a50b05e"
            ],
            [
                "ef72c1743493465e"
            ]
        ],
        "info": "Send rate-limited messages to the _Basement_ Hue bridge."
    },
    {
        "id": "ef72c1743493465e",
        "type": "subflow:4a8af92611acc27a",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "",
        "x": 930,
        "y": 540,
        "wires": [],
        "info": "Display error messages on the dashboard and in the debug pane."
    },
    {
        "id": "214548005f7e99ab",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "assumes ${BASEMENT_HUE_ADDRESS} and ${BASEMENT_HUE_KEY} are defined",
        "info": "",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "40f45c398a50b05e",
        "type": "link out",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "basement hue response",
        "mode": "return",
        "links": [],
        "x": 895,
        "y": 500,
        "wires": []
    },
    {
        "id": "3f8329fdc5c54932",
        "type": "link in",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "refresh basement hue controls",
        "links": [
            "52e5f31145044b3d",
            "e819d6033c29b3a7",
            "2cbe03b901af4142",
            "d3e8ba34d44f67aa"
        ],
        "x": 555,
        "y": 600,
        "wires": [
            [
                "3600df219088f5a6"
            ]
        ]
    },
    {
        "id": "3600df219088f5a6",
        "type": "subflow:d61db14468b910ab",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "Basement Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "TARGET",
                "type": "env"
            },
            {
                "name": "BRIDGE",
                "value": "BRIDGE",
                "type": "env"
            }
        ],
        "x": 680,
        "y": 600,
        "wires": [
            [
                "e53ba9a7af486095"
            ],
            [],
            [],
            []
        ],
        "info": "Subscribe to server-sent events from the _Basement_ Hue bridge."
    },
    {
        "id": "e53ba9a7af486095",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "group": "ab9e7529ab02c320",
        "name": "Basement Hue Controls",
        "order": 2,
        "width": "6",
        "height": "16",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 600,
        "wires": [
            [
                "ab59aff7c27c6728"
            ]
        ],
        "info": "Display dynamically created dashboard controls for the _Basement_\nHue bridge."
    },
    {
        "id": "ab59aff7c27c6728",
        "type": "link call",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "",
        "links": [
            "10c74bd3ce62390f"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1150,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "299a8ff9654c4b2a",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "${ADDRESS}, ${KEY}, ${BRIDGE} and ${TARGET} are set by this group",
        "info": "",
        "x": 800,
        "y": 460,
        "wires": []
    },
    {
        "id": "0236f877cea9aa1b",
        "type": "status",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "basement hue status",
        "scope": [
            "3600df219088f5a6"
        ],
        "x": 630,
        "y": 680,
        "wires": [
            [
                "174b7dc47587b326"
            ]
        ],
        "info": "Monitor `EventSource.readyState` for the _Basement_ Hue bridge."
    },
    {
        "id": "b26df763264faaa4",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "c1cff1a3486c905d",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 60,
        "wires": []
    },
    {
        "id": "1180af1e760ed933",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "c1cff1a3486c905d",
        "name": "https://github.com/parasaurolophus/create-hue-application-key",
        "info": "",
        "x": 260,
        "y": 100,
        "wires": []
    },
    {
        "id": "f87cd6036de631b7",
        "type": "link in",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "send ground floor hue command",
        "links": [
            "b377dfca55193e3b",
            "5453ecd10d2275d7",
            "5539f5e5fa8f4bb2"
        ],
        "x": 555,
        "y": 160,
        "wires": [
            [
                "0226968bb49f22c5"
            ]
        ]
    },
    {
        "id": "0226968bb49f22c5",
        "type": "subflow:dd3a1235085c7ed7",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "Send Ground Floor Hue Command",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            }
        ],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "acac97da53ff2812"
            ],
            [
                "4ebca8a3aa5763e5"
            ]
        ],
        "info": "Send rate-limited messages to the _Ground Floor_ Hue bridge."
    },
    {
        "id": "4ebca8a3aa5763e5",
        "type": "subflow:4a8af92611acc27a",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "",
        "x": 950,
        "y": 180,
        "wires": [],
        "info": "Display error messages on the dashboard and in the debug pane."
    },
    {
        "id": "466fb66350e127f2",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "assumes ${GROUND_FLOOR_HUE_ADDRESS} and ${GROUND_FLOOR_HUE_KEY} are defined",
        "info": "",
        "x": 880,
        "y": 60,
        "wires": []
    },
    {
        "id": "acac97da53ff2812",
        "type": "link out",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "ground floor hue response",
        "mode": "return",
        "links": [],
        "x": 915,
        "y": 140,
        "wires": []
    },
    {
        "id": "460867bbae94da5a",
        "type": "subflow:d61db14468b910ab",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "Ground Floor Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "TARGET",
                "type": "env"
            },
            {
                "name": "BRIDGE",
                "value": "BRIDGE",
                "type": "env"
            }
        ],
        "x": 690,
        "y": 240,
        "wires": [
            [
                "f4e7f3f6609ec608"
            ],
            [],
            [],
            []
        ],
        "info": "Subscribe to server-sent events from the _Ground Floor_ Hue bridge."
    },
    {
        "id": "915b3721df3bd41d",
        "type": "link in",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "refresh ground floor hue controls",
        "links": [
            "52e5f31145044b3d",
            "e819d6033c29b3a7",
            "2cbe03b901af4142",
            "d3e8ba34d44f67aa"
        ],
        "x": 555,
        "y": 240,
        "wires": [
            [
                "460867bbae94da5a"
            ]
        ]
    },
    {
        "id": "f4e7f3f6609ec608",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "group": "21f11f110d626f5a",
        "name": "Ground Floor Hue Controls",
        "order": 2,
        "width": "6",
        "height": "26",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 240,
        "wires": [
            [
                "13a8932676232537"
            ]
        ],
        "info": "Display dynamically created dashboard controls for the _Ground Floor_\nHue bridge."
    },
    {
        "id": "13a8932676232537",
        "type": "link call",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1190,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e178773d828de62d",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "${ADDRESS}, ${KEY}, ${BRIDGE} and ${TARGET} are set by this group",
        "info": "",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "33da30d97725e077",
        "type": "status",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "ground floor hue status",
        "scope": [
            "460867bbae94da5a"
        ],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "0696c3dfdfb89df9"
            ]
        ],
        "info": "Monitor `EventSource.readyState` for the _Ground Floor_ Hue bridge."
    },
    {
        "id": "0696c3dfdfb89df9",
        "type": "subflow:a0b7d0294edc5956",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "Ground Floor Status",
        "env": [
            {
                "name": "CLASS",
                "value": "BRIDGE",
                "type": "env"
            }
        ],
        "x": 860,
        "y": 320,
        "wires": [
            [
                "6b013bba424e77d0"
            ]
        ]
    },
    {
        "id": "174b7dc47587b326",
        "type": "subflow:a0b7d0294edc5956",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "Basement Status",
        "env": [
            {
                "name": "CLASS",
                "value": "BRIDGE",
                "type": "env"
            }
        ],
        "x": 830,
        "y": 680,
        "wires": [
            [
                "46486cd695774a6c"
            ]
        ]
    },
    {
        "id": "6b013bba424e77d0",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "group": "21f11f110d626f5a",
        "name": "Ground Floor Hue readyState",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .ground-floor {\n        margin: 0;\n        position: relative;\n        height: 100%;\n    }\n\n    .ground-floor-centered {\n        margin: 0;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .ground-floor-grey {\n        color: grey;\n    }\n\n    .ground-floor-white {\n        color: white;\n    }\n\n    .ground-floor-yellow {\n        color: yellow;\n    }\n\n    .ground-floor-green {\n        color: green;\n    }\n\n    .ground-floor-red {\n        color: red;\n    }\n</style>\n<div class=\"ground-floor-centered\" ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "ground-floor",
        "x": 1110,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "46486cd695774a6c",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "group": "ab9e7529ab02c320",
        "name": "Basement Hue readyState",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .basement {\n        margin: 0;\n        position: relative;\n        height: 100%;\n    }\n\n    .basement-centered {\n        margin: 0;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .basement-grey {\n        color: grey;\n    }\n\n    .basement-white {\n        color: white;\n    }\n\n    .basement-yellow {\n        color: yellow;\n    }\n\n    .basement-green {\n        color: green;\n    }\n\n    .basement-red {\n        color: red;\n    }\n</style>\n<div class=\"basement-centered\" ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "basement-hue",
        "x": 1060,
        "y": 680,
        "wires": [
            []
        ]
    }
]