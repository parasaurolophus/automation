[
    {
        "id": "0b58b958ed2dda42",
        "type": "tab",
        "label": "Timer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "448b73182a92925c",
        "type": "tab",
        "label": "Shades",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d5996bce439cae5a",
        "type": "tab",
        "label": "Lighting",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dcb190a34f9985d0",
        "type": "tab",
        "label": "PowerView",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0fd18332ac97df78",
        "type": "tab",
        "label": "Hue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c8462520f38b3511",
        "type": "tab",
        "label": "Monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a8af92611acc27a",
        "type": "subflow",
        "name": "Notify",
        "info": "Display a message as a \"toast\" on the\ndashboard and in the debug console.",
        "category": "monitor",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "d2492fc09315bfc0"
                    },
                    {
                        "id": "30e1991ea828ba4f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_toast.png",
        "status": {
            "x": 200,
            "y": 220,
            "wires": [
                {
                    "id": "5280e126498476bc",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b903e4fc563d501c",
        "type": "subflow",
        "name": "Hue API V2",
        "info": "",
        "category": "hue",
        "in": [
            {
                "x": 40,
                "y": 220,
                "wires": [
                    {
                        "id": "07d61ea24d59a251"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 440,
                "wires": [
                    {
                        "id": "a60ba77764dccdcf",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1160,
                "y": 520,
                "wires": [
                    {
                        "id": "b750046e7372198f",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1370,
                "y": 800,
                "wires": [
                    {
                        "id": "1b1610a871da8230",
                        "port": 0
                    }
                ]
            },
            {
                "x": 970,
                "y": 240,
                "wires": [
                    {
                        "id": "a1a4ef6fbcea1cd4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "KEY",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TARGET",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TOPIC",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-api-v2",
            "type": "hue-api-v2",
            "version": "4.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Interoperate with the Hue Bridge API V2",
            "keywords": "node-red,philips-hue,hue,hue-api,hue-api-v2",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "inputLabels": [
            "request"
        ],
        "outputLabels": [
            "controls",
            "metadata",
            "readyState",
            "notify"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 1320,
            "y": 880,
            "wires": [
                {
                    "id": "049567b797139205",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "eaaca1e226cc9251",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "send message to powerview hub",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "70e42b6637f4c865",
            "413305fe8cf8bc16",
            "3b9aea255e25c86d",
            "b528e18246309ead",
            "450c11f088a3f9ee",
            "a250d71416af8250"
        ],
        "x": 14,
        "y": 119,
        "w": 732,
        "h": 122,
        "info": "Send API command messages to a _PowerView_ hub at a rate of no more than\none per second."
    },
    {
        "id": "74348749d23b9082",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "dynamically create powerview controls on dashboard",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "02eb116aa3a7efad",
            "a2ce2f10f0cbc3b4",
            "4597056c8e33d1d2",
            "a4b2cb7314b93cec",
            "e89d138990a2c571",
            "09ed6328f31946db",
            "a4115f1a663ecf84",
            "b3fa2dd0b396e5ba",
            "7379bd9759e06a98",
            "fa994326c2180556",
            "97d89691a9505bb9",
            "23ce9cde77523965",
            "ca455aa5752d94d8",
            "78a3fbe808d63c4c",
            "9950e52333199d8f",
            "b3b32f662f388893",
            "b6e07b7b99531b02",
            "7fb1bd1acb1ca5f7",
            "75f0adce74746386",
            "57c39b659f421513",
            "0a9432f7e85182e1",
            "6f2a76cdcf373136",
            "d6a039d2e23d1366"
        ],
        "x": 14,
        "y": 259,
        "w": 1302,
        "h": 222,
        "info": "Dynamically create dashboard buttons corresponding to each scene\ndiscovered by querying a _PowerView_ hub."
    },
    {
        "id": "2d9ad017d6aeb18f",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "activate a powerview scene",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "b6ce3321e4119a91",
            "689bb9bf9977b2c7",
            "26124b0246ef158d"
        ],
        "x": 864,
        "y": 499,
        "w": 442,
        "h": 82,
        "info": "Set `msg.url` to the command that will activate the _PowerView_ scene\nwhose id is in `msg.payload`."
    },
    {
        "id": "1858ee0bbe9b4418",
        "type": "group",
        "z": "0b58b958ed2dda42",
        "name": "send daily events",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "b8e996d829493cf7",
            "aea41299ec309be7",
            "2172861d6eca2d1c",
            "ec4c72ab0b8b53ad",
            "cbcdf85a73052db5",
            "b42f1fba69cb70e0",
            "bf9f3e514e81d58c",
            "46ac71815281ccea",
            "da376bc386711c2d",
            "d738d0a322502a3a",
            "5054d0d69cd5a5e4",
            "77413c808573776a"
        ],
        "x": 14,
        "y": 219,
        "w": 1112,
        "h": 222,
        "info": "Send daily events:\n\n1. Once at start up\n2. Each time a user changes the value of the _Bedtime_ dashboard\n   control\n3. Every morning at 1:01AM\n\nThe events sent periodically by this group of nodes are:\n\n| `msg.topic`        | `msg.payload`                                                                                             | Description                                                                           |\n|--------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|\n| `settings/bedtime` | Value selected by a user using the _Bedtime_ control on the dashboard                                     | Approximate hour at which \"night mode\" should begin each day                          |\n| `daily/theme`      | The _theme_string for the current day                                                                     | See the information for the `function` node named `theme` for more details            |\n| `daily/sunrise`    | Timestamp at which the sun rises on the current day                                                       | See the information for the `function` node named `sunrise | sunset` for more details |\n| `daily/sunset`     | Timestamp at which the sun sets on the current day                                                        | See the information for the `function` node named `sunrise | sunset` for more details |\n| `daily/bedtime`    | A timestamp that varies slightly each day, based on the value of the most recent `settings/bedtime` event | See the information for the `function` node named `bedtime` for more details          |\n\n**Note:** All three of the `function` nodes, `theme`, `sunrise | sunset`\nand `bedtime`, are downstream of a `join` node even though only one\nof them (`bedtime`) directly depends on both inputs to the `join`. This\nis deliberate. Blocking the `theme` and `sunrise | sunset` functions\nuntil after at least one message has been received from a `mqtt in`\nnode ensures that they will not attempt to send messages before the\nconnection to the MQTT broker is ready. This assumes that all of the\n`mqtt in` and `mqtt out` nodes on this flow use the same broker\nconfiguration node.\n\nThe alternative would be to add a `status` node for the relevant\n`mqtt out` node and another `join` node to synchronize the `function`\nnodes with the connection state."
    },
    {
        "id": "1afeb43be3175917",
        "type": "group",
        "z": "0b58b958ed2dda42",
        "name": "send timer events",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "ce36e830ccb196af",
            "449c4612546c24a3",
            "795ddbf1ece0c9e6",
            "dde26fd5b0242b48",
            "91c56df5c885cf9f",
            "f5730fdb6bc0272f",
            "f901e2f89786bb1d"
        ],
        "x": 14,
        "y": 459,
        "w": 852,
        "h": 122,
        "info": "Send timer events over the course of each day:\n\n1. Once at start up\n2. At the start of each time of day as calculated by the `function` node\n   named `time`\n\nEach such message will have `msg.topic` set to `timer/time` and\n`msg.payload` set to one of the _time_ values:\n\n- `morning`\n- `midday`\n- `afternoon`\n- `evening`\n- `night`\n\nAgain, see the documentation for the `function` node named `time` for\nmore details."
    },
    {
        "id": "49f5aae09949b530",
        "type": "group",
        "z": "448b73182a92925c",
        "name": "receive window shades automation trigger events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "6054e4c8909b1152",
            "0ce3260947c3b773",
            "a6a4c9d2bb5540de",
            "50a5c28c7b06fabb",
            "3516ab97db295170",
            "651f47ab9c54c78e",
            "7254471530e47178",
            "84cd408d4a624e7f",
            "6b49f741caa67480",
            "3b33f830cc5690c4"
        ],
        "x": 14,
        "y": 19,
        "w": 1232,
        "h": 202,
        "info": "Route `automation/shades` event messages to invoke the appropriate\ndevice control API's."
    },
    {
        "id": "60e4d1c056ed3a0c",
        "type": "group",
        "z": "d5996bce439cae5a",
        "name": "trigger lighting automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "aae17e5a30471de5",
            "f590050ce69df70f",
            "0de1a81dd7644afc",
            "b314af61e3fe5e68",
            "5720dd9348b987ef",
            "4e1d20e601e89e22",
            "31328f7909c93485",
            "c92600f6307981f9",
            "8bd183126cc5beaf",
            "c015dc9dbd457ad9",
            "ece9e398ddf1a6a0",
            "fa502f5378dbe770",
            "aac7c5f7cc187719",
            "c9f14c10a3f85819",
            "dbf7469ff826ceef",
            "d77cd97682b0dc4c",
            "f3dae9cbb357e602",
            "505db1cfe24f5a3f",
            "af058b923838aea5",
            "56997e0fe2cc9b78",
            "cb22b59dd606881c",
            "a3e04e2691a74b7b",
            "5bd3acfbd97c4075",
            "a1ea5d860b770102",
            "bc1635e58a89e806",
            "b9d34e86991d2a0a",
            "7a1a8616fdc104f8",
            "6ed92d7ef2bcdc93",
            "60c223923608ce92",
            "c10df4bb31334a2f",
            "317468d0e9b56a72",
            "6c9be030a00c5cc6"
        ],
        "x": 14,
        "y": 259,
        "w": 1322,
        "h": 522,
        "info": "Route `automation/lighting` event messages to invoke the appropriate\ndevice control API's."
    },
    {
        "id": "16d1b9110bd0cbdb",
        "type": "group",
        "z": "d5996bce439cae5a",
        "name": "receive lighting automation trigger events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "6d7717ad9302c631",
            "58a85ec462c8eb88",
            "b67904d50c471a28",
            "b78ca3870996057b",
            "db918aec73c389bf",
            "368d496f6a22fc01",
            "19f469fbc6eaf880",
            "f7a9a404781d1816",
            "1775708d2776c3ea",
            "3d98b531b731e62a",
            "1af45c5f40ba0c7c"
        ],
        "x": 14,
        "y": 19,
        "w": 1292,
        "h": 222,
        "info": "Send `automation/shades` event when:\n\n- A new `timer/time` event is received, and\n- Window shade automation is enabled by users"
    },
    {
        "id": "5e4f33ee9bb4435b",
        "type": "group",
        "z": "448b73182a92925c",
        "name": "trigger shades automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "37bac7a6b658ade4",
            "ec730ac674a50f58",
            "6a9ac472018c38ea",
            "c8c9c1f0d8b62902",
            "9e961b1409432775",
            "db4f7c2c93cd8f30",
            "146590f90eed7fb8"
        ],
        "x": 14,
        "y": 239,
        "w": 662,
        "h": 202
    },
    {
        "id": "6ecb0bb949a8eb3c",
        "type": "group",
        "z": "c8462520f38b3511",
        "name": "monitoring",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "e43b73cd179f533b",
            "00bf383888ead194",
            "676e915f8e7e9976",
            "c5d6d36f82db1d24",
            "9fb64e1fa768d0f4",
            "6851cc1432825961",
            "e6278d2b5aa35be9",
            "989d93b8d36e3a56",
            "536797e1cb5f96d0",
            "fcf7ea8484bfd2f5",
            "a57b81f945d0fb3d",
            "b6e6d0082beb9ebf",
            "73438303be7570c5",
            "f26c53d9509ae1ba",
            "a8a37b6657ae9b87",
            "0c6deab9ba8e9c76",
            "615fd5392d28bc06",
            "6f64c58ea6ad6451",
            "9b5aacab09deae1b"
        ],
        "x": 34,
        "y": 19,
        "w": 552,
        "h": 442
    },
    {
        "id": "ef1aec0932a36fef",
        "type": "group",
        "z": "c8462520f38b3511",
        "name": "subroutines",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "311dbacf21c1572a",
            "fa2640070c9835ea",
            "2caf379d39861ca9",
            "0107e9ff9e181e3a",
            "6008b45a2249b829",
            "5533c95ccce5d675",
            "3050964cea12a980"
        ],
        "x": 34,
        "y": 479,
        "w": 422,
        "h": 142
    },
    {
        "id": "414ede3ad60aa4f3",
        "type": "group",
        "z": "0b58b958ed2dda42",
        "name": "(re-) generate dynamically created controls at start and each time the Refresh Controls button is pressed",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "ec72f5d7972d5730",
            "20ea1d5e7618a150",
            "bceded3979bc03fa",
            "118231644044af03",
            "94511d26864a6541"
        ],
        "x": 14,
        "y": 119,
        "w": 1112,
        "h": 82
    },
    {
        "id": "70dad43254c6a458",
        "type": "group",
        "z": "b903e4fc563d501c",
        "name": "send message to hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "437ca2e5667c0391",
            "3b556984858fe751",
            "ccb8f8c4fd3333af",
            "a1a4ef6fbcea1cd4",
            "2dd6e02f993c8f04",
            "07d61ea24d59a251"
        ],
        "x": 74,
        "y": 159,
        "w": 822,
        "h": 122
    },
    {
        "id": "8669233b567d0ffd",
        "type": "group",
        "z": "0fd18332ac97df78",
        "name": "ground floor hue",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "168247b3760f4731",
            "92ec777b2c9dab97",
            "931a6bd2a9326bc9",
            "ad2e21f102e390a2",
            "312ab67152201b30",
            "a6c65b71fb515b1e",
            "02f4c8bc756ccb0c",
            "b1ae2dab45864652",
            "fbd24d6194c16d28",
            "a0725018bbe3447d"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "send to ground floor hue",
                "type": "str"
            },
            {
                "name": "TOPIC",
                "value": "hue/ground-floor",
                "type": "str"
            }
        ],
        "x": 14,
        "y": 119,
        "w": 1092,
        "h": 242
    },
    {
        "id": "eec9d001159e45dc",
        "type": "group",
        "z": "b903e4fc563d501c",
        "name": "subscribe to events sent by the hue bridge, forward them to the dashboard and mqtt",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "7e0cf896d463421a",
            "4ab229c77e4ce0fe",
            "5e36497f30cb3265",
            "5e338d73bb5c33fb",
            "54503bb14ba41e23",
            "964ed66cfe05da8b",
            "f7841898977deb1b",
            "a60ba77764dccdcf",
            "b750046e7372198f",
            "5c2019dc6d6e400b",
            "153449edfaf38a67",
            "bbf1e13fabc2641b",
            "7e48f675042d8b93",
            "5ed6402bdc19dd70"
        ],
        "x": 74,
        "y": 399,
        "w": 1012,
        "h": 302
    },
    {
        "id": "2828b8557c781733",
        "type": "group",
        "z": "b903e4fc563d501c",
        "name": "EventSource readyState",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "2fe7c19fa52da3b7",
            "a18432dc72ef7481",
            "88fdf97c8453fefa",
            "f1c617ee84221e5f",
            "ca9146b1992e5f35",
            "789bb9be09a90181",
            "922a1e8c5440e399",
            "85a47c35d4b95b8e",
            "049567b797139205",
            "e0c09fd7a883718c",
            "1b1610a871da8230",
            "094b3e2d8dd632e0"
        ],
        "x": 74,
        "y": 719,
        "w": 1212,
        "h": 242
    },
    {
        "id": "4cb1a57dd2d304af",
        "type": "group",
        "z": "0fd18332ac97df78",
        "name": "basement hue",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "1fa12506e964418e",
            "a85248aa620b8480",
            "aede967dabee6adc",
            "25d4e7cf8ec7c009",
            "8dd90b562d6eb844",
            "3c8bdad58be0a70d",
            "603def2442931ab8",
            "9e964876efae258d",
            "529575f54707e7b9",
            "0c55fa3270a1a251"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "send to basement hue",
                "type": "str"
            },
            {
                "name": "TOPIC",
                "value": "hue/basement",
                "type": "str"
            }
        ],
        "x": 14,
        "y": 379,
        "w": 1072,
        "h": 242
    },
    {
        "id": "878c5819aeaae260",
        "type": "group",
        "z": "b903e4fc563d501c",
        "name": "subscribe to hue commands sent as mqtt messages",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "878b32d9e6225a1c",
            "f9023663e78ba591",
            "7ba75af758c2013d",
            "9c4ced2e27936fea",
            "16d6f0ca8acf69c4",
            "786ac487aac960f8"
        ],
        "x": 74,
        "y": 979,
        "w": 1252,
        "h": 82
    },
    {
        "id": "3735144075aa1528",
        "type": "group",
        "z": "b903e4fc563d501c",
        "name": "fetch resources from bridge after controls/refresh has closed the eventsource",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "c5acb45c9a544145",
            "5a1b87c5d08fa5d4",
            "12f058cdadbb39ce",
            "80bbf467c351320f",
            "d3e5044fe363855b",
            "055c9f50d9b56cfe"
        ],
        "x": 74,
        "y": 299,
        "w": 862,
        "h": 82
    },
    {
        "id": "31328f7909c93485",
        "type": "junction",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "x": 440,
        "y": 700,
        "wires": [
            [
                "4e1d20e601e89e22",
                "5720dd9348b987ef",
                "a1ea5d860b770102"
            ]
        ]
    },
    {
        "id": "8bd183126cc5beaf",
        "type": "junction",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "x": 440,
        "y": 340,
        "wires": [
            [
                "c92600f6307981f9",
                "c015dc9dbd457ad9",
                "5bd3acfbd97c4075"
            ]
        ]
    },
    {
        "id": "d77cd97682b0dc4c",
        "type": "junction",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "x": 760,
        "y": 400,
        "wires": [
            [
                "c10df4bb31334a2f",
                "317468d0e9b56a72"
            ]
        ]
    },
    {
        "id": "f3dae9cbb357e602",
        "type": "junction",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "x": 760,
        "y": 480,
        "wires": [
            [
                "0de1a81dd7644afc",
                "6ed92d7ef2bcdc93"
            ]
        ]
    },
    {
        "id": "505db1cfe24f5a3f",
        "type": "junction",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "x": 780,
        "y": 560,
        "wires": [
            [
                "aac7c5f7cc187719",
                "c9f14c10a3f85819"
            ]
        ]
    },
    {
        "id": "af058b923838aea5",
        "type": "junction",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "x": 760,
        "y": 640,
        "wires": [
            [
                "b314af61e3fe5e68",
                "60c223923608ce92"
            ]
        ]
    },
    {
        "id": "77413c808573776a",
        "type": "junction",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "x": 580,
        "y": 320,
        "wires": [
            [
                "ec4c72ab0b8b53ad",
                "cbcdf85a73052db5",
                "b42f1fba69cb70e0"
            ]
        ]
    },
    {
        "id": "85a47c35d4b95b8e",
        "type": "junction",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "x": 960,
        "y": 840,
        "wires": [
            [
                "049567b797139205",
                "e0c09fd7a883718c"
            ]
        ]
    },
    {
        "id": "cebfc098dc83e835",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7a427ced50896e29",
        "type": "ui_tab",
        "name": "Controls",
        "icon": "fa-dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a06ff030ec526ee1",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Automation",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f1c37b89696920be",
        "type": "ui_tab",
        "name": "Metadata",
        "icon": "fa-info",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bad6261ac75df85d",
        "type": "ui_group",
        "name": "Window Shades",
        "tab": "7a427ced50896e29",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "9c75181f2c63c679",
        "type": "ui_group",
        "name": "Shades",
        "tab": "f1c37b89696920be",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ec2b1aad4d84307c",
        "type": "ui_group",
        "name": "Settings",
        "tab": "7a427ced50896e29",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "62fb9b437a9f6bcf",
        "type": "ui_group",
        "name": "Monitor",
        "tab": "7a427ced50896e29",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a466343d83180c88",
        "type": "tls-config",
        "z": "b903e4fc563d501c",
        "name": "ignore certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "6865fdd160367b37",
        "type": "ui_group",
        "name": "Ground Floor",
        "tab": "7a427ced50896e29",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "572765d576e80a9f",
        "type": "ui_group",
        "name": "Ground Floor",
        "tab": "f1c37b89696920be",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2b9d72b934dccd62",
        "type": "ui_group",
        "name": "Basement",
        "tab": "7a427ced50896e29",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "b92e09ec548c4465",
        "type": "ui_group",
        "name": "Basement",
        "tab": "f1c37b89696920be",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "448d1e2ff0ff4a74",
        "type": "ui_toast",
        "z": "4a8af92611acc27a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 450,
        "y": 60,
        "wires": [
            []
        ],
        "info": "Display the HTML snippet as a \"toast\" on the dashboard."
    },
    {
        "id": "30e1991ea828ba4f",
        "type": "debug",
        "z": "4a8af92611acc27a",
        "name": "notification",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 190,
        "y": 140,
        "wires": [],
        "info": "Add the message to the debug pane."
    },
    {
        "id": "0985cf211a9510a2",
        "type": "template",
        "z": "4a8af92611acc27a",
        "name": "<pre>",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div>\n    <pre>{{payload}}</pre>\n</div>",
        "output": "str",
        "x": 310,
        "y": 60,
        "wires": [
            [
                "448d1e2ff0ff4a74"
            ]
        ],
        "info": "Wrap `msg.payload` in HTML."
    },
    {
        "id": "d2492fc09315bfc0",
        "type": "function",
        "z": "4a8af92611acc27a",
        "name": "stringify",
        "func": "msg.payload = JSON.stringify(msg, undefined, ' ')\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            [
                "0985cf211a9510a2"
            ]
        ],
        "info": "Pretty-print `msg.payload`."
    },
    {
        "id": "5280e126498476bc",
        "type": "status",
        "z": "4a8af92611acc27a",
        "name": "count",
        "scope": [
            "30e1991ea828ba4f"
        ],
        "x": 90,
        "y": 220,
        "wires": [
            []
        ],
        "info": "Send the `debug` node's status as this subflow's status."
    },
    {
        "id": "437ca2e5667c0391",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "70dad43254c6a458",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'https://' & $env('ADDRESS') & '/clip/v2/' & topic",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\t   \"hue-application-key\": $env('KEY')\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "ccb8f8c4fd3333af"
            ]
        ]
    },
    {
        "id": "3b556984858fe751",
        "type": "link out",
        "z": "b903e4fc563d501c",
        "g": "70dad43254c6a458",
        "name": "response",
        "mode": "return",
        "links": [],
        "x": 855,
        "y": 200,
        "wires": []
    },
    {
        "id": "ccb8f8c4fd3333af",
        "type": "http request",
        "z": "b903e4fc563d501c",
        "g": "70dad43254c6a458",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "a466343d83180c88",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 220,
        "wires": [
            [
                "a1a4ef6fbcea1cd4",
                "2dd6e02f993c8f04"
            ]
        ]
    },
    {
        "id": "a1a4ef6fbcea1cd4",
        "type": "function",
        "z": "b903e4fc563d501c",
        "g": "70dad43254c6a458",
        "name": "validate",
        "func": "if (!Number.isInteger(msg.statusCode)) {\n\n    return msg\n\n}\n\nif ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n    return msg\n\n}\n\nif (!Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\n\n    return msg\n\n}\n\n// should check msg.errors but that is untenable due to defects in the Hue Bridge API\n\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2dd6e02f993c8f04",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "70dad43254c6a458",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 200,
        "wires": [
            [
                "3b556984858fe751"
            ]
        ]
    },
    {
        "id": "07d61ea24d59a251",
        "type": "delay",
        "z": "b903e4fc563d501c",
        "g": "70dad43254c6a458",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 220,
        "wires": [
            [
                "437ca2e5667c0391"
            ]
        ]
    },
    {
        "id": "7e0cf896d463421a",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"url\":\"https://\" & $env('ADDRESS') & \"/eventstream/clip/v2\",\t   \"initDict\":{\t       \"withCredentials\": false,\t       \"https\": { \"rejectUnauthorized\":false },\t       \"headers\": { \"hue-application-key\": $env('KEY') }\t   }\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 620,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "4ab229c77e4ce0fe",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "${TOPIC}/onopen",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 600,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "5e36497f30cb3265",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "${TOPIC}/onerror",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "5e338d73bb5c33fb",
        "type": "function",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "persist data",
        "func": "const TOPIC = env.get('TOPIC') || 'hue'\nconst resources = flow.get('resources')\nconst data = JSON.parse(msg.payload.data)\n\nconst messages = []\n\nfor (let datum of data) {\n\n    for (let value of datum.data) {\n\n        const category = resources[value.type] || {}\n        let resource = category[value.id] || {}\n\n        switch (datum.type) {\n\n            case 'add':\n            case 'update':\n\n                for (let property in value) {\n\n                    resource[property] = value[property]\n                }\n\n                break\n\n            case 'delete':\n\n                delete category[value.id]\n                break\n\n            default:\n\n                node.warn(JSON.stringify(datum, undefined, 1))\n                break\n\n        }\n\n        category[value.id] = resource\n        resources[value.type] = category\n\n        const message = RED.util.cloneMessage(msg)\n\n        message.payload = resource\n        message.topic = TOPIC + '/resource/' + value.type + '/' + value.id\n        messages.push(message)\n\n    }\n}\n\nflow.set('resources', resources)\n\nmsg.payload = resources\n\nreturn [\n    msg,\n    messages\n]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 540,
        "wires": [
            [
                "f7841898977deb1b"
            ],
            [
                "964ed66cfe05da8b"
            ]
        ],
        "outputLabels": [
            "resources",
            "mqtt"
        ]
    },
    {
        "id": "54503bb14ba41e23",
        "type": "link in",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "ready",
        "links": [
            "055c9f50d9b56cfe"
        ],
        "x": 245,
        "y": 620,
        "wires": [
            [
                "7e0cf896d463421a"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "964ed66cfe05da8b",
        "type": "rbe",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 600,
        "wires": [
            [
                "bbf1e13fabc2641b"
            ]
        ]
    },
    {
        "id": "f7841898977deb1b",
        "type": "function",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "model",
        "func": "const model = []\n\nfunction findOwner(grouped_light) {\n\n    const groups = msg.payload[grouped_light.owner.rtype]\n\n    if (Object.prototype.hasOwnProperty.call(groups, grouped_light.owner.rid)) {\n\n        return groups[grouped_light.owner.rid]\n\n    }\n\n    throw 'no container found for grouped_light ' + grouped_light.id\n\n}\n\nfunction findScenes(owner) {\n\n    const scenes = []\n\n    for (let sceneId in msg.payload.scene) {\n\n        const scene = msg.payload.scene[sceneId]\n\n        if (scene.group.rid == owner.id) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n        return a.metadata.name.localeCompare(b.metadata.name)\n    })\n\n}\n\nfor (let grouped_light_id in msg.payload.grouped_light) {\n\n    const grouped_light = msg.payload.grouped_light[grouped_light_id]\n    const owner = findOwner(grouped_light)\n    const scenes = findScenes(owner)\n\n    model.push({\n        grouped_light: grouped_light,\n        owner: owner,\n        scenes: scenes,\n        name: (owner.metadata ? owner.metadata.name : 'All Lights')\n    })\n\n}\n\nmsg.payload = model.sort((a, b) => {\n    return a.name.localeCompare(b.name)\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            [
                "a60ba77764dccdcf",
                "b750046e7372198f"
            ]
        ]
    },
    {
        "id": "a60ba77764dccdcf",
        "type": "template",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "controls",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<div style=\"text-align: center;\">\n    <div ng-repeat=\"model in msg.payload\">\n        <hr>\n        <md-switch style=\"margin-left: 1em;\" ng-value=\"model.grouped_light.on.on\" ng-model=\"model.grouped_light.on.on\"\n            ng-change=\"send({ topic: 'resource/grouped_light/' + model.grouped_light.id, payload: { on: { on:model.grouped_light.on.on } }, method: 'PUT' })\">\n            {{model.name}}\n        </md-switch>\n        <md-button style=\"display: inline-block; margin: 1px\" ng-repeat=\"scene in model.scenes\"\n            ng-click=\"send({topic: 'resource/scene/' + scene.id, payload: {recall:{action:'dynamic_palette'}}, method: 'PUT'})\">\n            {{scene.metadata.name}}\n        </md-button>\n    </div>\n</div>",
        "output": "str",
        "x": 1000,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "b750046e7372198f",
        "type": "template",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "metadata",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<div>\n    <div ng-repeat=\"model in msg.payload\">\n        <hr ng-if=\"$index > 0\">\n        <dl>\n            <dt>{{model.name}}</dt>\n            <dd>\n                {{model.grouped_light.id}}\n                <dl ng-repeat=\"scene in model.scenes\">\n                    <dt>{{scene.metadata.name}}</dt>\n                    <dd>{{scene.id}}</dd>\n                </dl>\n            </dd>\n        </dl>\n    </div>\n</div>",
        "output": "str",
        "x": 1000,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "5c2019dc6d6e400b",
        "type": "link in",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "resources",
        "links": [
            "055c9f50d9b56cfe"
        ],
        "x": 525,
        "y": 500,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "055c9f50d9b56cfe",
        "type": "link out",
        "z": "b903e4fc563d501c",
        "g": "3735144075aa1528",
        "name": "event",
        "mode": "link",
        "links": [
            "5c2019dc6d6e400b",
            "54503bb14ba41e23"
        ],
        "x": 895,
        "y": 340,
        "wires": []
    },
    {
        "id": "d3e5044fe363855b",
        "type": "function",
        "z": "b903e4fc563d501c",
        "g": "3735144075aa1528",
        "name": "format event",
        "func": "const updates = [{ type: 'update', data: msg.payload }]\nconst event = { type: 'message', data: JSON.stringify(updates) }\n\nmsg.payload = event\nmsg.topic = 'message'\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            [
                "055c9f50d9b56cfe"
            ]
        ],
        "outputLabels": [
            "ready",
            ""
        ]
    },
    {
        "id": "80bbf467c351320f",
        "type": "link call",
        "z": "b903e4fc563d501c",
        "g": "3735144075aa1528",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "d3e5044fe363855b"
            ]
        ]
    },
    {
        "id": "12f058cdadbb39ce",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "3735144075aa1528",
        "name": "request",
        "rules": [
            {
                "t": "set",
                "p": "resources",
                "pt": "flow",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 340,
        "wires": [
            [
                "80bbf467c351320f"
            ]
        ]
    },
    {
        "id": "2fe7c19fa52da3b7",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "$number(status.text)",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(status.text)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 840,
        "wires": [
            [
                "a18432dc72ef7481"
            ]
        ]
    },
    {
        "id": "a18432dc72ef7481",
        "type": "switch",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 570,
        "y": 840,
        "wires": [
            [
                "88fdf97c8453fefa"
            ],
            [
                "f1c617ee84221e5f"
            ],
            [
                "ca9146b1992e5f35"
            ],
            [
                "789bb9be09a90181"
            ],
            [
                "922a1e8c5440e399"
            ]
        ],
        "info": "Select the string representation of `EventSource.readyState` based on\nits numeric value."
    },
    {
        "id": "88fdf97c8453fefa",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "Unitialized",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Unitialized",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle-o\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "blue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 760,
        "wires": [
            [
                "85a47c35d4b95b8e"
            ]
        ]
    },
    {
        "id": "f1c617ee84221e5f",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "Connecting",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Connecting",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle-o-notch fa-spin fa-fw\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 800,
        "wires": [
            [
                "85a47c35d4b95b8e"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value 0, (_connecting_)."
    },
    {
        "id": "ca9146b1992e5f35",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "Connected",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Connected",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 840,
        "wires": [
            [
                "85a47c35d4b95b8e"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value 1, (_connected_)."
    },
    {
        "id": "789bb9be09a90181",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "Failed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Failed",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle-o\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 880,
        "wires": [
            [
                "85a47c35d4b95b8e"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value 2, (_failed_)."
    },
    {
        "id": "922a1e8c5440e399",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "Invalid",
        "rules": [
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-ban\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 920,
        "wires": [
            [
                "85a47c35d4b95b8e"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to any\nunsupported value of `EventSource.readyState`."
    },
    {
        "id": "049567b797139205",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"text\":payload,\t   \"shape\":status.shape,\t   \"fill\":color\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 880,
        "wires": [
            []
        ],
        "info": "Convert the string representation of the `EventSource.readyState` back\ninto this subflow's status."
    },
    {
        "id": "e0c09fd7a883718c",
        "type": "template",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "html",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div style=\"margin: 0; position: relative; width: 100%; height: 100%;\">\n    <div style=\"margin: 0; position: absolute; top: 50%; transform: translateY(-50%); width: 100%;\">\n        <table style=\"width: 100%;\">\n            <tr>\n                <td style=\"width: 15%; padding: 0 0 0 1em; color: {{color}}\">{{{icon}}}</td>\n                <td>{{payload}}</td>\n            </tr>\n        </table>\n    </div>\n</div>",
        "output": "str",
        "x": 1050,
        "y": 800,
        "wires": [
            [
                "1b1610a871da8230"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value -1, (_unitialized_)."
    },
    {
        "id": "1b1610a871da8230",
        "type": "delay",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 800,
        "wires": [
            []
        ],
        "info": "Limit the rate at which state-change messages are sent, as an aid in\ndebugging."
    },
    {
        "id": "153449edfaf38a67",
        "type": "EventSource",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "",
        "x": 470,
        "y": 600,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ],
            [
                "4ab229c77e4ce0fe"
            ],
            [
                "5e36497f30cb3265"
            ]
        ]
    },
    {
        "id": "094b3e2d8dd632e0",
        "type": "status",
        "z": "b903e4fc563d501c",
        "g": "2828b8557c781733",
        "name": "status: Event Source",
        "scope": [
            "153449edfaf38a67"
        ],
        "x": 190,
        "y": 840,
        "wires": [
            [
                "2fe7c19fa52da3b7"
            ]
        ]
    },
    {
        "id": "bbf1e13fabc2641b",
        "type": "mqtt out",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 970,
        "y": 600,
        "wires": []
    },
    {
        "id": "7e48f675042d8b93",
        "type": "mqtt in",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 580,
        "wires": [
            [
                "5ed6402bdc19dd70"
            ]
        ]
    },
    {
        "id": "f9023663e78ba591",
        "type": "status",
        "z": "b903e4fc563d501c",
        "g": "878c5819aeaae260",
        "name": "status: mqtt in",
        "scope": [
            "9c4ced2e27936fea"
        ],
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "878b32d9e6225a1c"
            ]
        ]
    },
    {
        "id": "878b32d9e6225a1c",
        "type": "switch",
        "z": "b903e4fc563d501c",
        "g": "878c5819aeaae260",
        "name": "node-red:common.status.connected",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red:common.status.connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "7ba75af758c2013d"
            ]
        ]
    },
    {
        "id": "7ba75af758c2013d",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "878c5819aeaae260",
        "name": "subscribe",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "subscribe",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "[\t   {\t       \"topic\": 'put/' & $env('TOPIC') & '/resource/+/+',\t       \"qos\": 2\t   }\t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "9c4ced2e27936fea"
            ]
        ]
    },
    {
        "id": "9c4ced2e27936fea",
        "type": "mqtt in",
        "z": "b903e4fc563d501c",
        "g": "878c5819aeaae260",
        "name": "put/${TOPIC}/resource/+/+",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 810,
        "y": 1020,
        "wires": [
            [
                "16d6f0ca8acf69c4"
            ]
        ]
    },
    {
        "id": "16d6f0ca8acf69c4",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "878c5819aeaae260",
        "name": "set command properties",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$substringAfter(topic, 'put/' & $env('TOPIC') & '/')\t",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1020,
        "wires": [
            [
                "786ac487aac960f8"
            ]
        ]
    },
    {
        "id": "786ac487aac960f8",
        "type": "link call",
        "z": "b903e4fc563d501c",
        "g": "878c5819aeaae260",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 1240,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "429c5d451e73036e",
        "type": "comment",
        "z": "b903e4fc563d501c",
        "name": "https://github.com/parasaurolophus/create-hue-application-key",
        "info": "",
        "x": 320,
        "y": 80,
        "wires": []
    },
    {
        "id": "4618e940bf9ae3a5",
        "type": "comment",
        "z": "b903e4fc563d501c",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "5ed6402bdc19dd70",
        "type": "change",
        "z": "b903e4fc563d501c",
        "g": "eec9d001159e45dc",
        "name": "close",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 580,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "c5acb45c9a544145",
        "type": "complete",
        "z": "b903e4fc563d501c",
        "g": "3735144075aa1528",
        "name": "eventsource closed",
        "scope": [
            "5ed6402bdc19dd70"
        ],
        "uncaught": false,
        "x": 190,
        "y": 340,
        "wires": [
            [
                "5a1b87c5d08fa5d4"
            ]
        ]
    },
    {
        "id": "5a1b87c5d08fa5d4",
        "type": "delay",
        "z": "b903e4fc563d501c",
        "g": "3735144075aa1528",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 340,
        "wires": [
            [
                "12f058cdadbb39ce"
            ]
        ]
    },
    {
        "id": "5a5dcfc92a3d649f",
        "type": "comment",
        "z": "b903e4fc563d501c",
        "name": "https://www.npmjs.com/package/@parasaurolophus/node-red-eventsource",
        "info": "",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "b8e996d829493cf7",
        "type": "mqtt in",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "topic": "settings/bedtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 360,
        "wires": [
            [
                "da376bc386711c2d",
                "d738d0a322502a3a"
            ]
        ],
        "info": "Subscribe to `settings/bedtime` messages from the MQTT broker. See the\ndocumentation for the _Bedtime_ dashboard control for more information."
    },
    {
        "id": "aea41299ec309be7",
        "type": "inject",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 01 * * *",
        "once": true,
        "onceDelay": "0.1",
        "topic": "daily",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "da376bc386711c2d"
            ]
        ],
        "info": "Send the current timestamp:\n\n1. At start up\n2. Each morning at 1:01AM"
    },
    {
        "id": "2172861d6eca2d1c",
        "type": "join",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 320,
        "wires": [
            [
                "77413c808573776a"
            ]
        ],
        "info": "Synchronize receipt of `daily/timestamp` and `settings/bedtime`\nmessages."
    },
    {
        "id": "ec4c72ab0b8b53ad",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "theme",
        "func": "const date = new Date(msg.payload.daily)\nconst month = date.getMonth() + 1\nconst day = date.getDate()\n\nif ((month == 7) && (day <= 4)) {\n\n    msg.payload = 'tribal'\n\n} else if (month == 10) {\n\n    msg.payload = 'spooky'\n\n} else if (month == 12) {\n\n    msg.payload = 'jolly'\n\n} else {\n\n    msg.payload = 'standard'\n\n}\n\nnode.status({\n    text: msg.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'daily/theme'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "theme"
        ],
        "info": "Set `msg.payload` to one of the _theme_ values, described below, and\n`msg.topic` to `daily/theme`.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/theme`\n- `msg.payload` set to one of the following strings, based on the\n  the timestamp from the input:\n\n| `msg.payload` | Description         |\n|---------------|---------------------|\n| `tribal`      | July 1 - 4          |\n| `spooky`      | Any day in October  |\n| `jolly`       | Any day in December |\n| `standard`    | Any other day       |"
    },
    {
        "id": "cbcdf85a73052db5",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "sunrise | sunset",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst sunrise = RED.util.cloneMessage(msg)\nconst sunset = RED.util.cloneMessage(msg)\nconst date = new Date(msg.payload.daily)\n\nconst times = suncalc.getTimes(\n    // work around bug in suncalc\n    new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        1,\n        1\n    ),\n    LATITUDE,\n    LONGITUDE\n)\n\nsunrise.payload = times.sunrise.getTime()\nsunrise.topic = 'daily/sunrise'\nsunset.payload = times.sunset.getTime()\nsunset.topic = 'daily/sunset'\n\nconst status =\n    new Date(sunrise.payload).toLocaleTimeString() +\n    ' | ' +\n    new Date(sunset.payload).toLocaleTimeString()\n\nnode.status({\n    text: status,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [sunrise, sunset]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 740,
        "y": 320,
        "wires": [
            [
                "46ac71815281ccea"
            ],
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "sunrise",
            "sunset"
        ],
        "info": "Use the [suncalc](https://www.npmjs.com/package/suncalc) package to\nobtain the times at which the sun rises and sets on a given day.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n_Note also that this assumes:_\n\n_- `function` nodes are allowed to dynamically load the_ suncalc\n   _package_\n\n_- `${LATITUDE}` and `${LONGITUDE}` environment variables contain the\n  georgraphical coordinates to pass to `suncalc.getTimes()`_\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n1. sunrise\n   - `msg.payload` is the timestamp for sunrise as reported by _suncalc_\n   - `msg.topic` is `daily/sunrise`\n2. sunset\n   - `msg.payload` is the timestamp for sunset as reported by _suncalc_\n   - `msg.topic` is `daily/sunset`\n"
    },
    {
        "id": "b42f1fba69cb70e0",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "bedtime",
        "func": "const MILLIS_PER_SECOND = 1000\nconst MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\nconst MILLIS_PER_HALF_HOUR = 30 * MILLIS_PER_MINUTE\nconst MILLIS_PER_HOUR = 2 * MILLIS_PER_HALF_HOUR\n\nconst date = new Date(msg.payload.daily)\nconst offset = MILLIS_PER_HALF_HOUR - Math.floor(Math.random() * MILLIS_PER_HOUR)\nconst time = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    msg.payload['settings/bedtime']\n).getTime()\n\nmsg.payload = time + offset\n\nnode.status({\n    text: new Date(msg.payload).toLocaleTimeString(),\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'daily/bedtime'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "outputLabels": [
            "bedtime"
        ],
        "info": "Calculate a slightly randomized timestamp based on the values of\n`msg.payload.daily` and `msg.payload.settings/bedtime` as described\nbelow.\n\n# Input\n \n - timestamp for the current day in `msg.payload.daily`\n - value from the `Bedtime` dashboard control in\n   `msg.payload.settings/bedtime`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/bedtime`\n- `msg.payload` set to a timestamp as described below\n\n# Details\n\nThis `function` node receives input from a `join` node that combines the\ntimestamp for a given day with a value selected by use of a dropdown\ncontrol on the dashboard. It calculates a random offset of plus or minus\n30 minutes, adds that to the hour specified by the received value in\n`msg.payload.settings/bedtime` and calculates the timestamp for that\nhour on the day specified by the value received in `msg.payload.daily`,\nplacing it in `msg.payload` in the output message.\n"
    },
    {
        "id": "bf9f3e514e81d58c",
        "type": "mqtt out",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "daily/+",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 1050,
        "y": 320,
        "wires": [],
        "info": "Broadcast daily event messages using MQTT based on the values of their\n`msg.payload` and `msg.topic` properties."
    },
    {
        "id": "46ac71815281ccea",
        "type": "rbe",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 930,
        "y": 320,
        "wires": [
            [
                "bf9f3e514e81d58c"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "da376bc386711c2d",
        "type": "rbe",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "2172861d6eca2d1c"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "ce36e830ccb196af",
        "type": "mqtt out",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 780,
        "y": 520,
        "wires": [],
        "info": "Send the output of the `function` node named `time` as a `timer/time`\nevent using MQTT."
    },
    {
        "id": "449c4612546c24a3",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "time",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst now = msg.payload.now\nconst sunrise = msg.payload['daily/sunrise']\nconst sunset = msg.payload['daily/sunset']\nconst bedtime = msg.payload['daily/bedtime']\nconst position = suncalc.getPosition(new Date(now), LATITUDE, LONGITUDE)\n\nif ((now < sunrise) || (now >= bedtime)) {\n\n    msg.payload = 'night'\n\n} else if (now > sunset) {\n\n    msg.payload = 'evening'\n\n} else if (position.altitude > 0.8) {\n\n    msg.payload = 'midday'\n\n} else if (position.azimuth > 0) {\n\n    msg.payload = 'afternoon'\n\n} else {\n\n    msg.payload = 'morning'\n\n}\n\nnode.status({\n    text: msg.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'timer/time'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 530,
        "y": 520,
        "wires": [
            [
                "f901e2f89786bb1d"
            ]
        ],
        "info": "Use the [suncalc](https://www.npmjs.com/package/suncalc) package to\ncalculate a _time_ value, described below, based on the position of\nthe sun.\n\n_Note that this assumes:_\n\n_- `function` nodes are allowed to dynamically load the_ suncalc\n   _package_\n\n_- `${LATITUDE}` and `${LONGITUDE}` environment variables contain the\n  georgraphical coordinates to pass to `suncalc.getPosition()`_\n\n# Input\n\n- timestamp for current minute in `msg.payload.now`\n- timestamp for sunrise in `msg.payload.daily/sunrise`\n- timestamp for sunset in `msg.payload.daily/sunset`\n- timestamp for bedtime in `msg.payload.daily/bedtime`\n- all other `msg` properties are ignored\n\n_See the documentation for the `function` node named `bedtime` for\ninformation on how `msg.payload.daily/bedtime` is calculated._\n\n# Output\n\n- `msg.topic` is `timer/time`\n- `msg.payload` is one of the following strings:\n\n| `msg.payload` | Description                                                                                                                                                             |\n|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `morning`     | Sunrise to the time at which either the sun is high enough so as not to shine directly into any windows or the sun is no longer shining on the eastern side of the home |\n| `midday`      | Time during which the sun is high enough so as not to shine directly into any windows                                                                                   |\n| `afternoon`   | Time at which the sun is shining on the western side of the home and low enough to shine directly into windows                                                          |\n| `evening`     | Sunset to bedtime                                                                                                                                                       |\n| `night`       | Bedtime to sunrise of the next day                                                                                                                                      |\n\n# Details\n\nThe \"time at which the is high enough so as not to shine directly into\nany windows\" is determined empirically for a home based on its location,\nelevation, orientation, size of awnings or roof overhang and so on.\nBased on that value and the values of `${LATITUDE}` and `${LONGITUDE}`,\nthe sun may not reach such a height on any given day. No messages with\n`msg.payload` set to `midday` will be sent on such occasions.\n\nSimilarly, this function assumes that sunrise and sunset will occur\non the same day and that both will always precede bedtime. These\nassumptions might be violated at certain times of year for extreme\nvalues of `${LATITUDE}`."
    },
    {
        "id": "795ddbf1ece0c9e6",
        "type": "join",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 410,
        "y": 520,
        "wires": [
            [
                "449c4612546c24a3"
            ]
        ],
        "info": "Synchronize the daily events with the ones sent every minute."
    },
    {
        "id": "dde26fd5b0242b48",
        "type": "rbe",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 290,
        "y": 520,
        "wires": [
            [
                "795ddbf1ece0c9e6"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "91c56df5c885cf9f",
        "type": "mqtt in",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "topic": "daily/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "dde26fd5b0242b48"
            ]
        ],
        "info": "Subscribe to all of the daily event messages sent via MQTT."
    },
    {
        "id": "f5730fdb6bc0272f",
        "type": "inject",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "dde26fd5b0242b48"
            ]
        ],
        "info": "Send a message:\n\n1. At start up\n2. Every 60 seconds thereafter\n\nEach such message will have `msg.payload` set to the timestamp for the\nmoment it was sent and `msg.topic` set to `now`."
    },
    {
        "id": "f901e2f89786bb1d",
        "type": "rbe",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 650,
        "y": 520,
        "wires": [
            [
                "ce36e830ccb196af"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, without regard to\n`msg.topic`."
    },
    {
        "id": "42dab2bfc218b7c3",
        "type": "comment",
        "z": "0b58b958ed2dda42",
        "name": "https://www.npmjs.com/package/suncalc",
        "info": "",
        "x": 200,
        "y": 40,
        "wires": []
    },
    {
        "id": "935f5813b09efe70",
        "type": "comment",
        "z": "0b58b958ed2dda42",
        "name": "assumes ${LATITUDE} and ${LONGITUDE} are set",
        "info": "",
        "x": 230,
        "y": 80,
        "wires": []
    },
    {
        "id": "d738d0a322502a3a",
        "type": "ui_dropdown",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "Bedtime Setting",
        "label": "Bedtime",
        "tooltip": "",
        "place": "Select option",
        "group": "ec2b1aad4d84307c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "9PM",
                "value": 21,
                "type": "num"
            },
            {
                "label": "10PM",
                "value": "22",
                "type": "str"
            },
            {
                "label": "11PM",
                "value": "23",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "settings/bedtime",
        "topicType": "str",
        "className": "",
        "x": 360,
        "y": 400,
        "wires": [
            [
                "5054d0d69cd5a5e4"
            ]
        ],
        "info": "Allow a user to select 9PM, 10PM or 11PM as the base time for the value\nof the `daily/bedtime` event each day. See the documentation of the\n`function` node named `bedtime` for more information on how this\nsetting is used to calculate a random value for `daily/bedtime`."
    },
    {
        "id": "5054d0d69cd5a5e4",
        "type": "mqtt out",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "topic": "settings/bedtime",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 540,
        "y": 400,
        "wires": [],
        "info": "Send user interaction as an event message using MQTT."
    },
    {
        "id": "ec72f5d7972d5730",
        "type": "status",
        "z": "0b58b958ed2dda42",
        "g": "414ede3ad60aa4f3",
        "name": "status: controls/refresh",
        "scope": [
            "94511d26864a6541"
        ],
        "x": 140,
        "y": 160,
        "wires": [
            [
                "20ea1d5e7618a150"
            ]
        ],
        "info": "Subscribe to status messages from the `mqtt out` node downstream."
    },
    {
        "id": "20ea1d5e7618a150",
        "type": "switch",
        "z": "0b58b958ed2dda42",
        "g": "414ede3ad60aa4f3",
        "name": "node-red:common.status.connected",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red:common.status.connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "bceded3979bc03fa"
            ]
        ],
        "info": "Block unless `msg.status.text` indicates that the `mqtt out` node is\nconnected to the broker."
    },
    {
        "id": "bceded3979bc03fa",
        "type": "change",
        "z": "0b58b958ed2dda42",
        "g": "414ede3ad60aa4f3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "118231644044af03"
            ]
        ],
        "info": "Set `msg.payload` to the current timestamp so that the `ui_button` will\nbe triggered."
    },
    {
        "id": "118231644044af03",
        "type": "ui_button",
        "z": "0b58b958ed2dda42",
        "g": "414ede3ad60aa4f3",
        "name": "",
        "group": "ec2b1aad4d84307c",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "label": "Refresh Controls",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "controls/refresh",
        "topicType": "str",
        "x": 830,
        "y": 160,
        "wires": [
            [
                "94511d26864a6541"
            ]
        ],
        "info": "Send a message with `msg.topic` set to `controls/refresh` and\n`msg.payload` set to the current timestamp each time this button is\ntriggered."
    },
    {
        "id": "94511d26864a6541",
        "type": "mqtt out",
        "z": "0b58b958ed2dda42",
        "g": "414ede3ad60aa4f3",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 1020,
        "y": 160,
        "wires": [],
        "info": "Broadcast a `controls/refresh` message using MQTT."
    },
    {
        "id": "37bac7a6b658ade4",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "5e4f33ee9bb4435b",
        "name": "time",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "midday",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "afternoon",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "6a9ac472018c38ea"
            ],
            [
                "c8c9c1f0d8b62902"
            ],
            [
                "9e961b1409432775"
            ],
            [
                "db4f7c2c93cd8f30"
            ]
        ],
        "info": "Trigger window shades automation for the `time` specified by the value\nof `msg.payload`."
    },
    {
        "id": "ec730ac674a50f58",
        "type": "link out",
        "z": "448b73182a92925c",
        "g": "5e4f33ee9bb4435b",
        "name": "activate shades scene",
        "mode": "link",
        "links": [
            "689bb9bf9977b2c7"
        ],
        "x": 635,
        "y": 340,
        "wires": []
    },
    {
        "id": "6a9ac472018c38ea",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "5e4f33ee9bb4435b",
        "name": "Morning Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "56393",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 280,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Morning Shades_."
    },
    {
        "id": "c8c9c1f0d8b62902",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "5e4f33ee9bb4435b",
        "name": "Open All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7307",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 320,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Open All Shades_."
    },
    {
        "id": "9e961b1409432775",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "5e4f33ee9bb4435b",
        "name": "Afternoon Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "42686",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Afternoon Shades_."
    },
    {
        "id": "db4f7c2c93cd8f30",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "5e4f33ee9bb4435b",
        "name": "Close All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "15208",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 400,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Close All Shades_."
    },
    {
        "id": "3516ab97db295170",
        "type": "rbe",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "50a5c28c7b06fabb"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "50a5c28c7b06fabb",
        "type": "join",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "a6a4c9d2bb5540de"
            ]
        ],
        "info": "Synchronize received `settings/shades` and `timer/time` messages."
    },
    {
        "id": "a6a4c9d2bb5540de",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "settings/shades",
        "property": "payload.settings/shades",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "0ce3260947c3b773"
            ]
        ],
        "info": "Block unless shades automation is enabled by a user."
    },
    {
        "id": "0ce3260947c3b773",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.timer/time",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 140,
        "wires": [
            [
                "6054e4c8909b1152"
            ]
        ],
        "info": "Move `msg.payload.timer/time` to `msg.payload`."
    },
    {
        "id": "651f47ab9c54c78e",
        "type": "mqtt in",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "topic": "settings/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 100,
        "wires": [
            [
                "3516ab97db295170",
                "6b49f741caa67480"
            ]
        ],
        "info": "Subscribe to `settings/shades` messages using MQTT."
    },
    {
        "id": "7254471530e47178",
        "type": "mqtt in",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "3516ab97db295170"
            ]
        ],
        "info": "Subscribe to `timer/time` messages using MQTT."
    },
    {
        "id": "6054e4c8909b1152",
        "type": "rbe",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 970,
        "y": 140,
        "wires": [
            [
                "84cd408d4a624e7f"
            ]
        ]
    },
    {
        "id": "84cd408d4a624e7f",
        "type": "mqtt out",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "topic": "automation/shades",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "146590f90eed7fb8",
        "type": "mqtt in",
        "z": "448b73182a92925c",
        "g": "5e4f33ee9bb4435b",
        "name": "",
        "topic": "automation/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 340,
        "wires": [
            [
                "37bac7a6b658ade4"
            ]
        ]
    },
    {
        "id": "6b49f741caa67480",
        "type": "ui_switch",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "label": "Enable Shades",
        "tooltip": "",
        "group": "ec2b1aad4d84307c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "settings/shades",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "3b33f830cc5690c4"
            ]
        ],
        "info": "Dashboard control to enable or disable window shades automation."
    },
    {
        "id": "3b33f830cc5690c4",
        "type": "mqtt out",
        "z": "448b73182a92925c",
        "g": "49f5aae09949b530",
        "name": "",
        "topic": "settings/shades",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 500,
        "y": 60,
        "wires": [],
        "info": "Send user interaction as an event message using MQTT."
    },
    {
        "id": "aae17e5a30471de5",
        "type": "switch",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "timer/time",
        "property": "payload.timer/time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "8bd183126cc5beaf"
            ],
            [
                "f590050ce69df70f"
            ],
            [
                "31328f7909c93485"
            ]
        ],
        "info": "Trigger window shades automation for the `time` specified by the value\nof `msg.payload.timer/time`."
    },
    {
        "id": "f590050ce69df70f",
        "type": "switch",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "daily/theme",
        "property": "payload.daily/theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tribal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spooky",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jolly",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 550,
        "y": 520,
        "wires": [
            [
                "d77cd97682b0dc4c"
            ],
            [
                "f3dae9cbb357e602"
            ],
            [
                "505db1cfe24f5a3f"
            ],
            [
                "af058b923838aea5"
            ]
        ],
        "info": "Trigger evening lighting automation for the specified _theme_."
    },
    {
        "id": "0de1a81dd7644afc",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "yard spooky",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/70a0a8a6-b4b7-4b24-a9cf-0ecea0f359cc",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 500,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Spooky_ scene."
    },
    {
        "id": "b314af61e3fe5e68",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "yard sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/9b6935e2-f8ed-4f91-83a2-2bff1850da99",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 660,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Sunset_ scene."
    },
    {
        "id": "5720dd9348b987ef",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main bathroom nightlight",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 660,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Bathroom_'s _Nightlight_ scene."
    },
    {
        "id": "4e1d20e601e89e22",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor nightlight",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 700,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Floor_ zone's _Nightlight_ scene."
    },
    {
        "id": "c92600f6307981f9",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor off",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/9c1c7975-2f47-4552-bac8-c19b643cd678",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 340,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Main Floor_ zone."
    },
    {
        "id": "c015dc9dbd457ad9",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main bathroom off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/aea74e74-d544-4d08-ad71-3b6665045256",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 380,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Main Bathroom_."
    },
    {
        "id": "ece9e398ddf1a6a0",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "92ec777b2c9dab97"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "fa502f5378dbe770",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "92ec777b2c9dab97"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "aac7c5f7cc187719",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor jolly",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/3ac45cbb-21c0-4c2f-8037-c40345537ce2",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 580,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Floor_ zone's _Sunset_ scene."
    },
    {
        "id": "c9f14c10a3f85819",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "yard jolly",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/12571f23-7714-4b47-8e75-a3040389b788",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 540,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Jolly_ scene."
    },
    {
        "id": "dbf7469ff826ceef",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "92ec777b2c9dab97"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1170,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "56997e0fe2cc9b78",
        "type": "link in",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "links": [],
        "x": 1095,
        "y": 700,
        "wires": [
            [
                "cb22b59dd606881c"
            ]
        ]
    },
    {
        "id": "cb22b59dd606881c",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 700,
        "wires": [
            [
                "a3e04e2691a74b7b"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Yard_ \"room\"."
    },
    {
        "id": "a3e04e2691a74b7b",
        "type": "link out",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "mode": "return",
        "links": [],
        "x": 1295,
        "y": 700,
        "wires": []
    },
    {
        "id": "5bd3acfbd97c4075",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "56997e0fe2cc9b78"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 300,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ]
    },
    {
        "id": "a1ea5d860b770102",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "56997e0fe2cc9b78"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 640,
        "y": 740,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ]
    },
    {
        "id": "bc1635e58a89e806",
        "type": "link in",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor sunset",
        "links": [],
        "x": 1035,
        "y": 740,
        "wires": [
            [
                "b9d34e86991d2a0a"
            ]
        ]
    },
    {
        "id": "b9d34e86991d2a0a",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/6eff0801-01e2-4803-9840-e31c06cee079",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 740,
        "wires": [
            [
                "7a1a8616fdc104f8"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Floor_ zone's _Sunset_ scene."
    },
    {
        "id": "7a1a8616fdc104f8",
        "type": "link out",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor sunset",
        "mode": "return",
        "links": [],
        "x": 1295,
        "y": 740,
        "wires": []
    },
    {
        "id": "6ed92d7ef2bcdc93",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "bc1635e58a89e806"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ]
    },
    {
        "id": "60c223923608ce92",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "bc1635e58a89e806"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 620,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ]
    },
    {
        "id": "c10df4bb31334a2f",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "yard tribal",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/c4681d32-3368-43cd-9cf1-436132521068",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 380,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Tribal_ scene."
    },
    {
        "id": "317468d0e9b56a72",
        "type": "link call",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "bc1635e58a89e806"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 420,
        "wires": [
            [
                "dbf7469ff826ceef"
            ]
        ]
    },
    {
        "id": "6d7717ad9302c631",
        "type": "mqtt in",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "b78ca3870996057b"
            ]
        ],
        "info": "Subscribe to `timer/time` messages using MQTT."
    },
    {
        "id": "58a85ec462c8eb88",
        "type": "mqtt in",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "topic": "settings/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "b78ca3870996057b",
                "3d98b531b731e62a"
            ]
        ],
        "info": "Subscribe to `settings/lighting` messages using MQTT."
    },
    {
        "id": "b67904d50c471a28",
        "type": "mqtt in",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "topic": "daily/theme",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 140,
        "wires": [
            [
                "b78ca3870996057b"
            ]
        ],
        "info": "Subscribe to `daily./theme` messages using MQTT."
    },
    {
        "id": "b78ca3870996057b",
        "type": "rbe",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 310,
        "y": 140,
        "wires": [
            [
                "db918aec73c389bf"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "db918aec73c389bf",
        "type": "join",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 430,
        "y": 140,
        "wires": [
            [
                "368d496f6a22fc01"
            ]
        ],
        "info": "Synchronize `settings/lighting`, `daily/theme` and `timer/time` messages\nreceived using MQTT."
    },
    {
        "id": "368d496f6a22fc01",
        "type": "switch",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "settings/lighting",
        "property": "payload.settings/lighting",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 140,
        "wires": [
            [
                "19f469fbc6eaf880"
            ]
        ],
        "info": "Block unless lighting automation is enabled by a user."
    },
    {
        "id": "19f469fbc6eaf880",
        "type": "change",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload.settings/lighting",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 140,
        "wires": [
            [
                "f7a9a404781d1816"
            ]
        ],
        "info": "Delet the `settings/lighting` property from `msg.payload`."
    },
    {
        "id": "f7a9a404781d1816",
        "type": "rbe",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "1775708d2776c3ea"
            ]
        ]
    },
    {
        "id": "1775708d2776c3ea",
        "type": "mqtt out",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "topic": "automation/lighting",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "6c9be030a00c5cc6",
        "type": "mqtt in",
        "z": "d5996bce439cae5a",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "topic": "automation/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 520,
        "wires": [
            [
                "aae17e5a30471de5"
            ]
        ]
    },
    {
        "id": "3d98b531b731e62a",
        "type": "ui_switch",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "label": "Enable Lighting",
        "tooltip": "",
        "group": "ec2b1aad4d84307c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "settings/lighting",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 340,
        "y": 60,
        "wires": [
            [
                "1af45c5f40ba0c7c"
            ]
        ],
        "info": "Dashboard control to enable or disable lighting automation."
    },
    {
        "id": "1af45c5f40ba0c7c",
        "type": "mqtt out",
        "z": "d5996bce439cae5a",
        "g": "16d1b9110bd0cbdb",
        "name": "",
        "topic": "settings/lighting",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cebfc098dc83e835",
        "x": 520,
        "y": 60,
        "wires": [],
        "info": "Send user interaction as an event message using MQTT."
    },
    {
        "id": "70e42b6637f4c865",
        "type": "delay",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "413305fe8cf8bc16"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the PowerView hub to 1 per\nsecond."
    },
    {
        "id": "413305fe8cf8bc16",
        "type": "http request",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "3b9aea255e25c86d",
                "450c11f088a3f9ee"
            ]
        ],
        "info": "Send `msg.url` as a `GET` request to the PowerView hub."
    },
    {
        "id": "3b9aea255e25c86d",
        "type": "function",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "check status code",
        "func": "let fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n\n    }\n\n    return null\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "b528e18246309ead"
            ]
        ],
        "outputLabels": [
            "success"
        ],
        "info": "Block unless the response indicates an error occurred."
    },
    {
        "id": "b528e18246309ead",
        "type": "subflow:4a8af92611acc27a",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "x": 670,
        "y": 200,
        "wires": [],
        "info": "Display error messages on the dashboard and in the debug pane."
    },
    {
        "id": "450c11f088a3f9ee",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "powerview response",
        "mode": "return",
        "links": [],
        "x": 435,
        "y": 160,
        "wires": []
    },
    {
        "id": "a250d71416af8250",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "send to powerview",
        "links": [],
        "x": 55,
        "y": 180,
        "wires": [
            [
                "70e42b6637f4c865"
            ]
        ]
    },
    {
        "id": "02eb116aa3a7efad",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/scenes/'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 300,
        "wires": [
            [
                "a2ce2f10f0cbc3b4"
            ]
        ],
        "info": "Set `msg.url` to request the list of scenes from the PowerView hub."
    },
    {
        "id": "a2ce2f10f0cbc3b4",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 300,
        "wires": [
            [
                "4597056c8e33d1d2"
            ]
        ]
    },
    {
        "id": "4597056c8e33d1d2",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "sceneData",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sceneData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "a4b2cb7314b93cec"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.sceneData`."
    },
    {
        "id": "a4b2cb7314b93cec",
        "type": "split",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 300,
        "wires": [
            [
                "e89d138990a2c571"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "e89d138990a2c571",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "scene",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"sceneName\":$base64decode(payload.name),\"sceneId\":payload.id,\"roomId\":payload.roomId}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 300,
        "wires": [
            [
                "09ed6328f31946db"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "09ed6328f31946db",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1030,
        "y": 300,
        "wires": [
            [
                "ca455aa5752d94d8"
            ]
        ],
        "info": "Join previously split messages back into an array."
    },
    {
        "id": "a4115f1a663ecf84",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/rooms/'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "b3fa2dd0b396e5ba"
            ]
        ],
        "info": "Set `msg.url` to request the list of room from the PowerView hub."
    },
    {
        "id": "b3fa2dd0b396e5ba",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "7379bd9759e06a98"
            ]
        ]
    },
    {
        "id": "7379bd9759e06a98",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "roomData",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.roomData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 340,
        "wires": [
            [
                "fa994326c2180556"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.roomData`."
    },
    {
        "id": "fa994326c2180556",
        "type": "split",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "97d89691a9505bb9"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "97d89691a9505bb9",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "room",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"roomName\":$base64decode(payload.name),\"roomId\":payload.id}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 340,
        "wires": [
            [
                "23ce9cde77523965"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "23ce9cde77523965",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "b3b32f662f388893"
            ]
        ],
        "info": "Join previously split messages back into an array."
    },
    {
        "id": "ca455aa5752d94d8",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scenes",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "78a3fbe808d63c4c"
            ]
        ],
        "info": "Set `msg.topic` to `scenes`."
    },
    {
        "id": "78a3fbe808d63c4c",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "get rooms",
        "mode": "link",
        "links": [
            "b6e07b7b99531b02"
        ],
        "x": 1275,
        "y": 300,
        "wires": []
    },
    {
        "id": "9950e52333199d8f",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "powerview metadata",
        "mode": "link",
        "links": [
            "b6e07b7b99531b02"
        ],
        "x": 1275,
        "y": 340,
        "wires": []
    },
    {
        "id": "b6e07b7b99531b02",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "powerview metadata",
        "links": [
            "9950e52333199d8f",
            "78a3fbe808d63c4c"
        ],
        "x": 75,
        "y": 420,
        "wires": [
            [
                "75f0adce74746386"
            ]
        ]
    },
    {
        "id": "b3b32f662f388893",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rooms",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 340,
        "wires": [
            [
                "9950e52333199d8f"
            ]
        ],
        "info": "Set `msg.topic` to `rooms`."
    },
    {
        "id": "7fb1bd1acb1ca5f7",
        "type": "function",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "for dashboard",
        "func": "msg.dashboard = []\n\nfunction findScenes(roomId) {\n\n    const scenes = []\n\n    for (const scene of msg.payload.scenes) {\n\n        if (scene.roomId == roomId) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n        return a.sceneName.localeCompare(b.sceneName)\n    })\n}\n\nfor (const room of msg.payload.rooms) {\n\n    const scenes = findScenes(room.roomId)\n\n    if (scenes.length > 0) {\n\n        const roomScenes = []\n\n        for (const scene of scenes) {\n\n            roomScenes.push({\n                sceneName: scene.sceneName,\n                sceneId: scene.sceneId\n            })\n        }\n\n        msg.dashboard.push({\n            roomName: room.roomName,\n            roomId: room.roomId,\n            roomScenes: roomScenes\n        })\n    }\n}\n\nmsg.dashboard = msg.dashboard.sort((a, b) => {\n    return a.roomName.localeCompare(b.roomName)\n})\n\ncontext.set('metadata', msg.payload)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "0a9432f7e85182e1",
                "d6a039d2e23d1366"
            ]
        ],
        "info": "Format `rooms` and `scenes` metadata into a combined data structure\nsuitable for use with a `template` node to dynamically create dashboard\ncontrols."
    },
    {
        "id": "75f0adce74746386",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "7fb1bd1acb1ca5f7"
            ]
        ],
        "info": "Join messages containing `rooms` and `scenes` metadata."
    },
    {
        "id": "b6ce3321e4119a91",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/scenes?sceneId=' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "26124b0246ef158d"
            ]
        ],
        "info": "Set `msg.url` to the URL with query string to activate the scene\nspecified by `msg.payload` using the IP address specified by the\nenvironment variable named `POWERVIEW_ADDRESS`."
    },
    {
        "id": "689bb9bf9977b2c7",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "activate powerview scene",
        "links": [
            "81d6c43098a91e64",
            "6f2a76cdcf373136",
            "ec730ac674a50f58",
            "4517f2c78c9498d7",
            "3d7ec93adc3b5b60",
            "bbbb4e53c2082d73"
        ],
        "x": 905,
        "y": 540,
        "wires": [
            [
                "b6ce3321e4119a91"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "26124b0246ef158d",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1190,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "57c39b659f421513",
        "type": "mqtt in",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 320,
        "wires": [
            [
                "02eb116aa3a7efad",
                "a4115f1a663ecf84"
            ]
        ],
        "info": "Subscribe to `controls/refresh` messages using MQTT."
    },
    {
        "id": "9b22e1e38e67938b",
        "type": "comment",
        "z": "dcb190a34f9985d0",
        "name": "https://motorisation.hde.nl/hd/powerview/general-guides/API/",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "e685110a1eb864fd",
        "type": "comment",
        "z": "dcb190a34f9985d0",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": []
    },
    {
        "id": "0a9432f7e85182e1",
        "type": "ui_template",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "group": "bad6261ac75df85d",
        "name": "Shade Controls",
        "order": 2,
        "width": "6",
        "height": "9",
        "format": "<div style=\"text-align: center;\">\n    <div ng-repeat=\"room in msg.dashboard\">\n        <hr ng-if=\"$index > 0\">\n        <p style=\"font-style:italic\">{{room.roomName}}</p>\n        <md-button style=\"margin: 1px;\" ng-repeat=\"scene in room.roomScenes\"\n            ng-click=\"send({topic:scene.sceneName,payload:scene.sceneId})\">\n            {{scene.sceneName}}\n        </md-button>\n    </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 400,
        "wires": [
            [
                "6f2a76cdcf373136"
            ]
        ],
        "info": "Display dynamically created controls on the dashboard."
    },
    {
        "id": "6f2a76cdcf373136",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "activate powerview scene",
        "mode": "link",
        "links": [
            "689bb9bf9977b2c7"
        ],
        "x": 615,
        "y": 400,
        "wires": []
    },
    {
        "id": "d6a039d2e23d1366",
        "type": "ui_template",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "group": "9c75181f2c63c679",
        "name": "Shades Metadata",
        "order": 2,
        "width": "6",
        "height": "12",
        "format": "<div>\n    <div ng-repeat=\"room in msg.dashboard\">\n        <hr ng-if=\"$index > 0\">\n        <p style=\"font-style: italic;\">{{room.roomName}}</p>\n        <p>{{room.roomId}}</p>\n        <ul>\n            <li ng-repeat=\"scene in room.roomScenes\">\n                <span style=\"font-style: italic;\">{{scene.sceneName}}</span>\n                <br>\n                {{scene.sceneId}}\n            </li>\n        </ul>\n    </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 510,
        "y": 440,
        "wires": [
            []
        ],
        "info": "Display dynamically created controls on the dashboard."
    },
    {
        "id": "168247b3760f4731",
        "type": "subflow:b903e4fc563d501c",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "TARGET",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "TOPIC",
                "type": "env"
            }
        ],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "931a6bd2a9326bc9"
            ],
            [
                "ad2e21f102e390a2"
            ],
            [
                "312ab67152201b30"
            ],
            [
                "b1ae2dab45864652"
            ]
        ]
    },
    {
        "id": "92ec777b2c9dab97",
        "type": "link in",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "name": "send to ground floor hue",
        "links": [],
        "x": 295,
        "y": 260,
        "wires": [
            [
                "168247b3760f4731"
            ]
        ]
    },
    {
        "id": "931a6bd2a9326bc9",
        "type": "ui_template",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "group": "6865fdd160367b37",
        "name": "Ground Floor Hue Controls",
        "order": 2,
        "width": "6",
        "height": "30",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 200,
        "wires": [
            [
                "a0725018bbe3447d"
            ]
        ]
    },
    {
        "id": "ad2e21f102e390a2",
        "type": "ui_template",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "group": "572765d576e80a9f",
        "name": "Ground Floor Hue Metadata",
        "order": 1,
        "width": "6",
        "height": "85",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "312ab67152201b30",
        "type": "ui_template",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "group": "6865fdd160367b37",
        "name": "Ground Floor Hue readyState",
        "order": 1,
        "width": "6",
        "height": "1",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 650,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "1fa12506e964418e",
        "type": "subflow:b903e4fc563d501c",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "TARGET",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "TOPIC",
                "type": "env"
            }
        ],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "aede967dabee6adc"
            ],
            [
                "25d4e7cf8ec7c009"
            ],
            [
                "8dd90b562d6eb844"
            ],
            [
                "9e964876efae258d"
            ]
        ]
    },
    {
        "id": "a85248aa620b8480",
        "type": "link in",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "name": "send to basement hue",
        "links": [],
        "x": 295,
        "y": 520,
        "wires": [
            [
                "1fa12506e964418e"
            ]
        ]
    },
    {
        "id": "aede967dabee6adc",
        "type": "ui_template",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "group": "2b9d72b934dccd62",
        "name": "Basement Hue Controls",
        "order": 2,
        "width": "6",
        "height": "20",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 460,
        "wires": [
            [
                "529575f54707e7b9"
            ]
        ]
    },
    {
        "id": "25d4e7cf8ec7c009",
        "type": "ui_template",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "group": "b92e09ec548c4465",
        "name": "Basement Hue Metadata",
        "order": 1,
        "width": "6",
        "height": "47",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8dd90b562d6eb844",
        "type": "ui_template",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "group": "2b9d72b934dccd62",
        "name": "Basement Hue readyState",
        "order": 1,
        "width": "6",
        "height": "1",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "0a00d4bcdcfab828",
        "type": "comment",
        "z": "0fd18332ac97df78",
        "name": "https://github.com/parasaurolophus/create-hue-application-key",
        "info": "",
        "x": 260,
        "y": 80,
        "wires": []
    },
    {
        "id": "caacce91266c1b21",
        "type": "comment",
        "z": "0fd18332ac97df78",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "a6c65b71fb515b1e",
        "type": "comment",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "name": "assumes ${GROUND_FLOOR_HUE_ADDRESS} and ${GROUND_FLOOR_HUE_KEY} are defined",
        "info": "",
        "x": 380,
        "y": 160,
        "wires": []
    },
    {
        "id": "02f4c8bc756ccb0c",
        "type": "comment",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "name": "send to ground floor hue ->",
        "info": "",
        "x": 150,
        "y": 260,
        "wires": []
    },
    {
        "id": "3c8bdad58be0a70d",
        "type": "comment",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "name": "send to basement hue ->",
        "info": "",
        "x": 150,
        "y": 520,
        "wires": []
    },
    {
        "id": "603def2442931ab8",
        "type": "comment",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "name": "assumes ${BASEMENT_HUE_ADDRESS} and ${BASEMENT_HUE_KEY} are defined",
        "info": "",
        "x": 340,
        "y": 420,
        "wires": []
    },
    {
        "id": "b1ae2dab45864652",
        "type": "subflow:4a8af92611acc27a",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "name": "",
        "x": 570,
        "y": 320,
        "wires": []
    },
    {
        "id": "9e964876efae258d",
        "type": "subflow:4a8af92611acc27a",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "name": "",
        "x": 570,
        "y": 580,
        "wires": []
    },
    {
        "id": "fbd24d6194c16d28",
        "type": "link call",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 1020,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a0725018bbe3447d",
        "type": "change",
        "z": "0fd18332ac97df78",
        "g": "8669233b567d0ffd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 200,
        "wires": [
            [
                "fbd24d6194c16d28"
            ]
        ]
    },
    {
        "id": "529575f54707e7b9",
        "type": "change",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 460,
        "wires": [
            [
                "0c55fa3270a1a251"
            ]
        ]
    },
    {
        "id": "0c55fa3270a1a251",
        "type": "link call",
        "z": "0fd18332ac97df78",
        "g": "4cb1a57dd2d304af",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 1000,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e43b73cd179f533b",
        "type": "mqtt in",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "topic": "daily/theme",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 60,
        "wires": [
            [
                "6851cc1432825961"
            ]
        ]
    },
    {
        "id": "00bf383888ead194",
        "type": "mqtt in",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "topic": "daily/sunrise",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a57b81f945d0fb3d"
            ]
        ]
    },
    {
        "id": "676e915f8e7e9976",
        "type": "mqtt in",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "topic": "daily/sunset",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "b6e6d0082beb9ebf"
            ]
        ]
    },
    {
        "id": "c5d6d36f82db1d24",
        "type": "mqtt in",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "topic": "daily/bedtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "73438303be7570c5"
            ]
        ]
    },
    {
        "id": "9fb64e1fa768d0f4",
        "type": "mqtt in",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "fcf7ea8484bfd2f5"
            ]
        ]
    },
    {
        "id": "6851cc1432825961",
        "type": "ui_text",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "group": "62fb9b437a9f6bcf",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Theme",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "e6278d2b5aa35be9",
        "type": "ui_text",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "group": "62fb9b437a9f6bcf",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sunrise",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 440,
        "y": 120,
        "wires": []
    },
    {
        "id": "989d93b8d36e3a56",
        "type": "ui_text",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "group": "62fb9b437a9f6bcf",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sunset",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 440,
        "y": 180,
        "wires": []
    },
    {
        "id": "536797e1cb5f96d0",
        "type": "ui_text",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "group": "62fb9b437a9f6bcf",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Bedtime",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 440,
        "y": 240,
        "wires": []
    },
    {
        "id": "fcf7ea8484bfd2f5",
        "type": "ui_text",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "group": "62fb9b437a9f6bcf",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 250,
        "y": 300,
        "wires": []
    },
    {
        "id": "a57b81f945d0fb3d",
        "type": "link call",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "links": [
            "fa2640070c9835ea"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "e6278d2b5aa35be9"
            ]
        ]
    },
    {
        "id": "b6e6d0082beb9ebf",
        "type": "link call",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "links": [
            "fa2640070c9835ea"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "989d93b8d36e3a56"
            ]
        ]
    },
    {
        "id": "73438303be7570c5",
        "type": "link call",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "links": [
            "fa2640070c9835ea"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 240,
        "wires": [
            [
                "536797e1cb5f96d0"
            ]
        ]
    },
    {
        "id": "f26c53d9509ae1ba",
        "type": "mqtt in",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "topic": "automation/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 360,
        "wires": [
            [
                "0c6deab9ba8e9c76"
            ]
        ]
    },
    {
        "id": "a8a37b6657ae9b87",
        "type": "mqtt in",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "topic": "automation/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cebfc098dc83e835",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 420,
        "wires": [
            [
                "6f64c58ea6ad6451"
            ]
        ]
    },
    {
        "id": "0c6deab9ba8e9c76",
        "type": "link call",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "links": [
            "0107e9ff9e181e3a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "615fd5392d28bc06"
            ]
        ]
    },
    {
        "id": "615fd5392d28bc06",
        "type": "ui_template",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "group": "62fb9b437a9f6bcf",
        "name": "Trigger Shades",
        "order": 6,
        "width": "6",
        "height": "3",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "6f64c58ea6ad6451",
        "type": "link call",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "name": "",
        "links": [
            "0107e9ff9e181e3a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "9b5aacab09deae1b"
            ]
        ]
    },
    {
        "id": "9b5aacab09deae1b",
        "type": "ui_template",
        "z": "c8462520f38b3511",
        "g": "6ecb0bb949a8eb3c",
        "group": "62fb9b437a9f6bcf",
        "name": "Trigger Lighting",
        "order": 7,
        "width": "6",
        "height": "3",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "311dbacf21c1572a",
        "type": "function",
        "z": "c8462520f38b3511",
        "g": "ef1aec0932a36fef",
        "name": "locale string",
        "func": "msg.payload = new Date(msg.payload).toLocaleString()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 520,
        "wires": [
            [
                "2caf379d39861ca9"
            ]
        ],
        "info": "Replace the timestamp in `msg.payload` with its localized string\nrepresentation."
    },
    {
        "id": "fa2640070c9835ea",
        "type": "link in",
        "z": "c8462520f38b3511",
        "g": "ef1aec0932a36fef",
        "name": "locale string",
        "links": [],
        "x": 195,
        "y": 520,
        "wires": [
            [
                "311dbacf21c1572a"
            ]
        ]
    },
    {
        "id": "2caf379d39861ca9",
        "type": "link out",
        "z": "c8462520f38b3511",
        "g": "ef1aec0932a36fef",
        "name": "locale string",
        "mode": "return",
        "links": [],
        "x": 415,
        "y": 520,
        "wires": []
    },
    {
        "id": "0107e9ff9e181e3a",
        "type": "link in",
        "z": "c8462520f38b3511",
        "g": "ef1aec0932a36fef",
        "name": "stringify",
        "links": [],
        "x": 75,
        "y": 580,
        "wires": [
            [
                "5533c95ccce5d675"
            ]
        ]
    },
    {
        "id": "6008b45a2249b829",
        "type": "link out",
        "z": "c8462520f38b3511",
        "g": "ef1aec0932a36fef",
        "name": "stringify",
        "mode": "return",
        "links": [],
        "x": 415,
        "y": 580,
        "wires": []
    },
    {
        "id": "5533c95ccce5d675",
        "type": "function",
        "z": "c8462520f38b3511",
        "g": "ef1aec0932a36fef",
        "name": "stringify",
        "func": "msg.now = new Date().toLocaleString()\nmsg.payload = JSON.stringify(msg.payload, undefined, 1)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 580,
        "wires": [
            [
                "3050964cea12a980"
            ]
        ]
    },
    {
        "id": "3050964cea12a980",
        "type": "template",
        "z": "c8462520f38b3511",
        "g": "ef1aec0932a36fef",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div>\n    <hr>\n    <p style=\"text-align: center;font-style: italic;\">{{now}}</p>\n    <p style=\"text-align: center; font-weight: bold;\">{{topic}}</p>\n    <pre>{{{payload}}}</pre>\n</div>",
        "output": "str",
        "x": 320,
        "y": 580,
        "wires": [
            [
                "6008b45a2249b829"
            ]
        ]
    }
]