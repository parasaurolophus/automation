[
    {
        "id": "d37f5cd9edab358d",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b58b958ed2dda42",
        "type": "tab",
        "label": "Timer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bfdb5183ea783e85",
        "type": "tab",
        "label": "Automation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d17c63f280964e0b",
        "type": "tab",
        "label": "PowerView",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2191f395ad362596",
        "type": "tab",
        "label": "Hue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "85ed27d795e6e866",
        "type": "subflow",
        "name": "Hue API V2",
        "info": "",
        "category": "hue",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "18c77db84320513b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1210,
                "y": 140,
                "wires": [
                    {
                        "id": "a1a4ef6fbcea1cd4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "KEY",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TOPIC",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TITLE",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-api-v2",
            "type": "hue-api-v2",
            "version": "5.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Encapsulate logic to interoperate with a Philips Hue Bridge and present a FlexDash dashboard for it",
            "keywords": "node-red,hue,hue-api,hue-api-v2,flexdash",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "inputLabels": [
            "command"
        ],
        "outputLabels": [
            "error"
        ],
        "icon": "font-awesome/fa-lightbulb-o",
        "status": {
            "x": 920,
            "y": 680,
            "wires": [
                {
                    "id": "a0e4a9a77c23f9ce",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "699fdca4e881f8ec",
        "type": "subflow",
        "name": "Get PowerView Metadata",
        "info": "",
        "category": "powerview",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "02eb116aa3a7efad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 100,
                "wires": [
                    {
                        "id": "ca455aa5752d94d8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "URI",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TARGET",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "DATA",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TOPIC",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-get-powerview-metadata",
            "type": "get-powerview-metadata",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Get metadata for rooms or scenes from a PowerView hub",
            "keywords": "node-red,hunter-douglas,powerview",
            "license": "MIT"
        },
        "color": "#C7E9C0",
        "outputLabels": [
            "metadata"
        ],
        "icon": "font-awesome/fa-align-justify"
    },
    {
        "id": "450f4de3c4f73b40",
        "type": "subflow",
        "name": "Hue Automation",
        "info": "Send a series of commands to the\n[Hue Bridge API V2](https://developers.meethue.com/develop/hue-api-v2/).\nThe commands are created from the value of the `${COMMANDS}` subflow\nconfiguration variable.\n\nIn particular, each element of `${COMMANDS}` must contain `topic`,\n`payload`, `method` and `target` members. For example, if an instance\nof this subflow is configured with `${COMMANDS}` set to:\n\n```\n[\n    {\n        \"topic\": \"resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971\",\n        \"payload\": {\n            \"on\": {\n                \"on\": false\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    },\n    {\n        \"topic\": \"resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    },\n    {\n        \"topic\": \"resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    }\n]\n```\n\nthat instance will send messages to turn off the Hue `grouped_light`\nresource whose id is `bad8480b-b404-42d1-a9e7-a4a69f400971` and\nactivate the scenes whose id's are `5d507fb6-89f6-459a-b327-0fffd0c6dc48`\nand `48c39b9f-1599-4a5c-b7f6-bad6cad4029a`. It does so by invoking a\n`link call` node with `msg.target` set to `\"send to ground floor hue\"`.\n\n**Note:** This subflow is theoretically unnecessary since one could,\nin principle, define any desired lighting state as an individual scene\nbelonging to a particular room or zone using the Hue mobile app. In that\ncase, each instance of this subflow would correspond to a single command\nto activate a particular such scene. This subflow exists, in part, as a\nwork-around for well-known limitations in the Hue bridge in regards to\nthe number of devices per room or zone. In addition, this subflow\nallows for setting the state of combinations of lighting devices without\ncluttering up the view presented to users of the Hue app with lots of\nzones and scenes which would exist solely for the purposes of these\nNode-RED flows but which would rarely, if ever, make sense to activate\nmanually. Finally, it also provides a bit of future-proofing for\nchanges in the Hue API since Philips sometimes exposes new features in\nthe bridge API before they can be accessed directly in the mobile app.",
        "category": "hue",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "3aead3d3f53c86d6"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "COMMANDS",
                "type": "json",
                "value": "[]",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-lighting",
            "type": "hue-lighting",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Send messages controlling a particular combination of Hue lighting groups and scenes",
            "keywords": "node-red,philips-hue,hue,hue-api,hue-api-v2",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-cogs",
        "status": {
            "x": 720,
            "y": 100,
            "wires": [
                {
                    "id": "1fed66fe72fa7562",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2556ad75d549c17f",
        "type": "group",
        "z": "2191f395ad362596",
        "name": "monitor and control ground floor hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "afe43437400cbd95",
            "e492a91b947bc715",
            "a6c65b71fb515b1e",
            "ab92ee0148a0fed7"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "hue/ground-floor",
                "type": "str"
            },
            {
                "name": "TITLE",
                "value": "Ground Floor Lighting",
                "type": "str"
            }
        ],
        "x": 34,
        "y": 79
    },
    {
        "id": "8002cb7f995536e6",
        "type": "group",
        "z": "2191f395ad362596",
        "name": "monitor and control basement hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "d3686879543e1951",
            "a4bd3631d548f809",
            "603def2442931ab8",
            "b0e90a9025c2015c"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "hue/basement",
                "type": "str"
            },
            {
                "name": "TITLE",
                "value": "Basement Lighting",
                "type": "str"
            }
        ],
        "x": 34,
        "y": 219
    },
    {
        "id": "c2e3e9d2c97df2d0",
        "type": "group",
        "z": "bfdb5183ea783e85",
        "name": "lighting automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "650af68abc81e272",
            "788002ed81a9f5eb",
            "ab22f57d983c0a67",
            "36a9058ec89dc970",
            "4f71fe46ad187ae6",
            "48e8d9fce3eab7a3",
            "aae17e5a30471de5",
            "870608ff910feb60",
            "0e592700939a92aa",
            "353cfc8157d414e1",
            "1cb0a0826e19ac25",
            "8b2870e325e61ea1",
            "541a0eff9f0235b7",
            "4c3ffaa9eed2fd35",
            "80c3792cf898b831",
            "71fc2fa7674de915"
        ],
        "x": 14,
        "y": 299
    },
    {
        "id": "8326ae1a15518f8f",
        "type": "group",
        "z": "bfdb5183ea783e85",
        "name": "window shade automation",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "6a9ac472018c38ea",
            "37bac7a6b658ade4",
            "f517b9c953846565",
            "ec26adec2aa94c40",
            "c8c9c1f0d8b62902",
            "9e961b1409432775",
            "db4f7c2c93cd8f30",
            "0dd52d2dccf3d476",
            "6184212dd8e32e40",
            "0862949d83e8b2e4",
            "f16f4fda7c0b0f7a",
            "7fd58ccd357887b3",
            "bae913eb3593854f"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "1afeb43be3175917",
        "type": "group",
        "z": "0b58b958ed2dda42",
        "name": "send timer events",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "ce36e830ccb196af",
            "449c4612546c24a3",
            "795ddbf1ece0c9e6",
            "dde26fd5b0242b48",
            "91c56df5c885cf9f",
            "f5730fdb6bc0272f",
            "f901e2f89786bb1d"
        ],
        "x": 14,
        "y": 339,
        "info": "Send timer events over the course of each day:\n\n1. Once at start up\n2. At the start of each time of day as calculated by the `function` node\n   named `time`\n\nEach such message will have `msg.topic` set to `timer/time` and\n`msg.payload` set to one of the _time_ values:\n\n- `morning`\n- `midday`\n- `afternoon`\n- `evening`\n- `night`\n\nAgain, see the documentation for the `function` node named `time` for\nmore details."
    },
    {
        "id": "1858ee0bbe9b4418",
        "type": "group",
        "z": "0b58b958ed2dda42",
        "name": "send daily events",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "b8e996d829493cf7",
            "aea41299ec309be7",
            "2172861d6eca2d1c",
            "ec4c72ab0b8b53ad",
            "cbcdf85a73052db5",
            "b42f1fba69cb70e0",
            "bf9f3e514e81d58c",
            "46ac71815281ccea"
        ],
        "x": 14,
        "y": 119,
        "info": "Send daily events:\n\n1. Once at start up\n2. Each time a user changes the value of the _Bedtime_ dashboard\n   control\n3. Every morning at 1:01AM\n\nThe events sent periodically by this group of nodes are:\n\n| `msg.topic`        | `msg.payload`                                                                                             | Description                                                                           |\n|--------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|\n| `settings/bedtime` | Value selected by a user using the _Bedtime_ control on the dashboard                                     | Approximate hour at which \"night mode\" should begin each day                          |\n| `daily/theme`      | The _theme_string for the current day                                                                     | See the information for the `function` node named `theme` for more details            |\n| `daily/sunrise`    | Timestamp at which the sun rises on the current day                                                       | See the information for the `function` node named `sunrise | sunset` for more details |\n| `daily/sunset`     | Timestamp at which the sun sets on the current day                                                        | See the information for the `function` node named `sunrise | sunset` for more details |\n| `daily/bedtime`    | A timestamp that varies slightly each day, based on the value of the most recent `settings/bedtime` event | See the information for the `function` node named `bedtime` for more details          |\n\n**Note:** All three of the `function` nodes, `theme`, `sunrise | sunset`\nand `bedtime`, are downstream of a `join` node even though only one\nof them (`bedtime`) directly depends on both inputs to the `join`. This\nis deliberate. Blocking the `theme` and `sunrise | sunset` functions\nuntil after at least one message has been received from a `mqtt in`\nnode ensures that they will not attempt to send messages before the\nconnection to the MQTT broker is ready. This assumes that all of the\n`mqtt in` and `mqtt out` nodes on this flow use the same broker\nconfiguration node.\n\nThe alternative would be to add a `status` node for the relevant\n`mqtt out` node and another `join` node to synchronize the `function`\nnodes with the connection state."
    },
    {
        "id": "943477037c4d5918",
        "type": "group",
        "z": "d37f5cd9edab358d",
        "name": "monitoring",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "dedc6f621fe92832",
            "5c5154d5bead461b",
            "fa34b76e712ef007",
            "9130997453dbb01b",
            "9dbd2d38d6ceec1c",
            "6293131f50765462",
            "18d43f9fefe9624c",
            "0b56b8c38bfb3aba",
            "8b5f3d43ab04f15f",
            "f143492f43470c78",
            "1570464315ea7815",
            "8c71c829aa0ec0ed",
            "e88e19eda77e6f5b",
            "a7cf1643a9332de2",
            "3bf82acf8b05bc31",
            "1af506ce07ba6b16"
        ],
        "x": 854,
        "y": 19,
        "w": 512,
        "h": 382
    },
    {
        "id": "ee96bb221d02295e",
        "type": "group",
        "z": "d37f5cd9edab358d",
        "name": "settings",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "c4918657ee3c8205",
            "e40f297f548886a6",
            "b998fb7500b44508",
            "eb9677a3b953f055",
            "8d5cd4e2b6741532",
            "6c53863e9ee9d907",
            "7924b2b1ee902373",
            "a3aea892e9c6ef6f",
            "8c8a22c79a66a856"
        ],
        "x": 14,
        "y": 159,
        "w": 632,
        "h": 202
    },
    {
        "id": "cb32c24aeeeec965",
        "type": "group",
        "z": "d37f5cd9edab358d",
        "name": "refresh controls at start",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "239d297ededcfbde",
            "69fd3ee579dc148a",
            "7ec1cebca066ee16",
            "93c938e0879f3d82",
            "c34c16cc16eab87c"
        ],
        "x": 14,
        "y": 19,
        "w": 812,
        "h": 122
    },
    {
        "id": "f61f788a11efec04",
        "type": "group",
        "z": "d17c63f280964e0b",
        "name": "powerview dashboard controls",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "07a492e2d29b5dd3",
            "57c39b659f421513",
            "eb7123132bce19c7",
            "02eec7feccc1567d",
            "de8273a5bd63e29f",
            "273346c13d4b93a6",
            "20fcd070f0572dc0",
            "e85b0e2a6e90da31",
            "0e632e274bbeb040",
            "6da2a4ce93760596"
        ],
        "x": 14,
        "y": 359,
        "w": 1252,
        "h": 122
    },
    {
        "id": "9cf0457b813ca743",
        "type": "group",
        "z": "d17c63f280964e0b",
        "name": "activate the powerview scene whose id is specified by msg.payload",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "aed6009fd524f819",
            "34eaa776ddc24669",
            "2bf099ec37e84bbc",
            "9b5a655543db6ec5"
        ],
        "x": 14,
        "y": 259,
        "w": 852,
        "h": 82,
        "info": "Dynamically create dashboard buttons corresponding to each scene\ndiscovered by querying a _PowerView_ hub."
    },
    {
        "id": "cb106476337f4d38",
        "type": "group",
        "z": "d17c63f280964e0b",
        "name": "send commands to the powerview hub specified by ${POWERVIEW_ADDRESS} at a rate of no more than 1 per second",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "a250d71416af8250",
            "70e42b6637f4c865",
            "413305fe8cf8bc16",
            "3b9aea255e25c86d",
            "450c11f088a3f9ee",
            "4bf13bba7e95e190"
        ],
        "x": 14,
        "y": 119,
        "w": 872,
        "h": 122
    },
    {
        "id": "2434336f78a2f3e2",
        "type": "group",
        "z": "d37f5cd9edab358d",
        "name": "error reporting",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "8346de5b8a4aac74",
            "749b3deee816e422",
            "efa17be91723abcb",
            "5b9edd728b40deb6"
        ],
        "x": 794,
        "y": 419,
        "w": 572,
        "h": 82
    },
    {
        "id": "0fb8e43c903b3506",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "send messages at a rate of no more than 1 per second to the Hue Bridge at ${ADDRESS} using ${KEY} as the client application key",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "07d61ea24d59a251",
            "7a4ba2d58e8e1f70",
            "437ca2e5667c0391",
            "ccb8f8c4fd3333af",
            "a1a4ef6fbcea1cd4",
            "2dd6e02f993c8f04",
            "3b556984858fe751",
            "3635f7d1709b0fa7",
            "1a1956aaf2b915c7",
            "18c77db84320513b"
        ],
        "x": 74,
        "y": 19,
        "w": 1072,
        "h": 162
    },
    {
        "id": "96971e50c13ead01",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "subscribe to server-sent events from the Hue Bridge at ${ADDRESS} using ${KEY} as the client application key",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "label": true,
            "color": "#ffffff",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "5a1b87c5d08fa5d4",
            "12f058cdadbb39ce",
            "80bbf467c351320f",
            "d3e5044fe363855b",
            "5e338d73bb5c33fb",
            "153449edfaf38a67",
            "964ed66cfe05da8b",
            "7e0cf896d463421a",
            "5ed6402bdc19dd70",
            "4ab229c77e4ce0fe",
            "5e36497f30cb3265",
            "bbf1e13fabc2641b",
            "6ce6327771b66664",
            "7e48f675042d8b93",
            "f564e0e7691828da",
            "368e25b0f6f27139",
            "3221def52c06d766",
            "3c4dc36276340285"
        ],
        "x": 74,
        "y": 199,
        "w": 1252,
        "h": 242
    },
    {
        "id": "63b8c849bdb4c8f3",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "dynamically create dashboard controls",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "f7841898977deb1b",
            "14183f3dd2381282",
            "47c110cf31929730",
            "0632d0568ac3c7f7",
            "ababe72bf0305c42",
            "558b67d0475e7440",
            "909bdb017a8b4918"
        ],
        "x": 74,
        "y": 459,
        "w": 812,
        "h": 122
    },
    {
        "id": "b550cd7d040d0256",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "display eventsource readystate on dashboard",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "02be9eee8ee84874",
            "f7f6f7ad28d5faba",
            "971b60c46976e238",
            "a0e4a9a77c23f9ce",
            "6a4e95234f50527b"
        ],
        "x": 74,
        "y": 599,
        "w": 812,
        "h": 107
    },
    {
        "id": "4d34d7515d2d5eb7",
        "type": "group",
        "z": "2191f395ad362596",
        "name": "use mdns to discover hue bridges on the lan",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "05224ffb74b3f646",
            "3fd817749715b4c8",
            "0ac450bd2cb71c4b",
            "dde39b996d199227",
            "951c2a51ed6be94c"
        ],
        "x": 34,
        "y": 359
    },
    {
        "id": "aa4b11da55ec8165",
        "type": "group",
        "z": "2191f395ad362596",
        "name": "display discovered hue bridges on the dashboard",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "9a4d24d3dd15f6f3",
            "db20507d47d41df9",
            "58f9b91f469c2298",
            "a16f51b7e78155b0",
            "388512dfed2f201e",
            "e5f2d38d9320e4d2"
        ],
        "x": 34,
        "y": 499
    },
    {
        "id": "23bf1f9635c44cc8",
        "type": "group",
        "z": "2191f395ad362596",
        "name": " initiate the client application key creation process on the hue bridge specified by msg.payload",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "4edaa94ac96845e1",
            "0ed14c935a7933e8",
            "32957b8846e57f76",
            "ef28c8779729e38a",
            "47127182921210f4",
            "f74128d99635d540",
            "19340c4a132003af",
            "3dbe561bfaf5bbf1"
        ],
        "x": 34,
        "y": 599
    },
    {
        "id": "18c77db84320513b",
        "type": "junction",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "07d61ea24d59a251"
            ]
        ]
    },
    {
        "id": "a0e4a9a77c23f9ce",
        "type": "junction",
        "z": "85ed27d795e6e866",
        "g": "b550cd7d040d0256",
        "x": 300,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "d43897d45226a6e5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f8cd52f55a498825",
        "type": "flexdash dashboard",
        "port": "80",
        "ioOpts": "{}",
        "path": "/automation",
        "redServer": true,
        "saveConfig": true,
        "allOrigins": true,
        "devServer": false,
        "devInstall": false,
        "name": "Automation",
        "fd_children": ",8ab715e0738f32fd,7d769240720a89f6,19915a155c29859c"
    },
    {
        "id": "8ab715e0738f32fd",
        "type": "flexdash tab",
        "name": "controls tab",
        "icon": "mdi-toggle-switch-outline",
        "title": "Controls",
        "fd_children": ",3f52c6a91a658ce1",
        "fd": "f8cd52f55a498825"
    },
    {
        "id": "3f52c6a91a658ce1",
        "type": "flexdash container",
        "name": "controls grid",
        "kind": "StdGrid",
        "fd_children": ",5b9dbfb36097f407,b1e7a12608de7a06,afe43437400cbd95,d3686879543e1951",
        "title": "",
        "tab": "8ab715e0738f32fd",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": "1",
        "rows": "1"
    },
    {
        "id": "5b9dbfb36097f407",
        "type": "flexdash container",
        "name": "settings panel",
        "kind": "Panel",
        "fd_children": ",c4918657ee3c8205,6c53863e9ee9d907,a3aea892e9c6ef6f,c34c16cc16eab87c",
        "title": "",
        "tab": "",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "3f52c6a91a658ce1",
        "solid": false,
        "cols": "3",
        "rows": "2"
    },
    {
        "id": "fa8112538a948337",
        "type": "flexdash container",
        "z": "85ed27d795e6e866",
        "name": "hue api v2 panel",
        "kind": "SubflowPanel",
        "fd_children": ",6a4e95234f50527b,14183f3dd2381282,909bdb017a8b4918",
        "title": "",
        "tab": "8ab715e0738f32fd",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": "3",
        "rows": "20"
    },
    {
        "id": "b1e7a12608de7a06",
        "type": "flexdash container",
        "name": "powerview panel",
        "kind": "Panel",
        "fd_children": ",20fcd070f0572dc0,6da2a4ce93760596",
        "title": "",
        "tab": "8ab715e0738f32fd",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "3f52c6a91a658ce1",
        "solid": false,
        "cols": "3",
        "rows": "20"
    },
    {
        "id": "efe428ce929d2eb3",
        "type": "flexdash container",
        "name": "monitoring panel",
        "kind": "Panel",
        "fd_children": ",8b5f3d43ab04f15f,f143492f43470c78,8c71c829aa0ec0ed,e88e19eda77e6f5b,1570464315ea7815,7fd58ccd357887b3,80c3792cf898b831",
        "title": "",
        "tab": "8ab715e0738f32fd",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "88f0313d1af37520",
        "solid": false,
        "cols": "3",
        "rows": "6"
    },
    {
        "id": "d25331d49825beb1",
        "type": "flexdash container",
        "name": "error panel",
        "kind": "Panel",
        "fd_children": ",efa17be91723abcb",
        "title": "",
        "tab": "8ab715e0738f32fd",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "88f0313d1af37520",
        "solid": false,
        "cols": "3",
        "rows": "9"
    },
    {
        "id": "7d769240720a89f6",
        "type": "flexdash tab",
        "name": "admin tab",
        "icon": "mdi-shield-crown-outline",
        "title": "Administration",
        "fd_children": ",e76c9e3d275d234f",
        "fd": "f8cd52f55a498825"
    },
    {
        "id": "e76c9e3d275d234f",
        "type": "flexdash container",
        "name": "admin grid",
        "kind": "StdGrid",
        "fd_children": ",0206e4e57203648e",
        "title": "",
        "tab": "7d769240720a89f6",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": "1",
        "rows": "1"
    },
    {
        "id": "06c952f588cb12f4",
        "type": "tls-config",
        "z": "2191f395ad362596",
        "name": "ignore certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "0206e4e57203648e",
        "type": "flexdash container",
        "name": "hue admin panel",
        "kind": "Panel",
        "fd_children": ",9a4d24d3dd15f6f3,ef28c8779729e38a",
        "title": "",
        "tab": "7d769240720a89f6",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "e76c9e3d275d234f",
        "solid": false,
        "cols": "5",
        "rows": "6"
    },
    {
        "id": "19915a155c29859c",
        "type": "flexdash tab",
        "name": "monitoring tab",
        "icon": "mdi-gauge",
        "title": "Monitoring",
        "fd_children": ",88f0313d1af37520",
        "fd": "f8cd52f55a498825"
    },
    {
        "id": "88f0313d1af37520",
        "type": "flexdash container",
        "name": "monitoring grid",
        "kind": "StdGrid",
        "fd_children": ",efe428ce929d2eb3,d25331d49825beb1",
        "title": "",
        "tab": "19915a155c29859c",
        "min_cols": "1",
        "max_cols": "20",
        "unicast": "ignore",
        "parent": "e76c9e3d275d234f",
        "solid": false,
        "cols": "1",
        "rows": "1"
    },
    {
        "id": "2eda1fccfc631e2d",
        "type": "tls-config",
        "z": "85ed27d795e6e866",
        "name": "ignore server certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "07d61ea24d59a251",
        "type": "delay",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 120,
        "wires": [
            [
                "437ca2e5667c0391"
            ]
        ]
    },
    {
        "id": "7a4ba2d58e8e1f70",
        "type": "link in",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "send to bridge",
        "links": [],
        "x": 170,
        "y": 140,
        "wires": [
            [
                "07d61ea24d59a251"
            ]
        ],
        "l": true
    },
    {
        "id": "437ca2e5667c0391",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'https://' & $env('ADDRESS') & '/clip/v2/' & topic",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\t   \"hue-application-key\": $env('KEY')\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 120,
        "wires": [
            [
                "ccb8f8c4fd3333af"
            ]
        ]
    },
    {
        "id": "ccb8f8c4fd3333af",
        "type": "http request",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "2eda1fccfc631e2d",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 120,
        "wires": [
            [
                "a1a4ef6fbcea1cd4",
                "2dd6e02f993c8f04"
            ]
        ]
    },
    {
        "id": "a1a4ef6fbcea1cd4",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "validate",
        "func": "if (!Number.isInteger(msg.statusCode)) {\n\n    return msg\n\n}\n\nif (msg.statusCode != 200) {\n\n    return msg\n\n}\n\nif (!Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\n\n    return msg\n\n}\n\nif (msg.payload.errors.length > 0) {\n\n    return msg\n\n}\n\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2dd6e02f993c8f04",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "3b556984858fe751"
            ]
        ]
    },
    {
        "id": "3b556984858fe751",
        "type": "link out",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "response",
        "mode": "return",
        "links": [],
        "x": 1060,
        "y": 100,
        "wires": [],
        "l": true
    },
    {
        "id": "5a1b87c5d08fa5d4",
        "type": "delay",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 240,
        "wires": [
            [
                "12f058cdadbb39ce"
            ]
        ]
    },
    {
        "id": "12f058cdadbb39ce",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "request",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 240,
        "wires": [
            [
                "80bbf467c351320f"
            ]
        ]
    },
    {
        "id": "80bbf467c351320f",
        "type": "link call",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "links": [
            "7a4ba2d58e8e1f70"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 240,
        "wires": [
            [
                "d3e5044fe363855b"
            ]
        ]
    },
    {
        "id": "d3e5044fe363855b",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "format event",
        "func": "// clear out cached resources\nflow.set('resources', {})\n\nconst updates = [{ type: 'update', data: msg.payload }]\nconst event = { type: 'message', data: JSON.stringify(updates) }\n\nmsg.payload = event\nmsg.topic = 'message'\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 240,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ]
        ],
        "outputLabels": [
            "ready"
        ]
    },
    {
        "id": "5e338d73bb5c33fb",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "persist data",
        "func": "const TOPIC = env.get('TOPIC') || 'hue'\nconst resources = flow.get('resources')\nconst data = JSON.parse(msg.payload.data)\n\nconst messages = []\n\nfor (let datum of data) {\n\n    for (let value of datum.data) {\n\n        const message = RED.util.cloneMessage(msg)\n        const category = resources[value.type] || {}\n        let resource = category[value.id] || {}\n\n        switch (datum.type) {\n\n            case 'add':\n            case 'update':\n\n                for (let property in value) {\n\n                    resource[property] = value[property]\n                }\n\n                category[value.id] = message.payload = resource\n                break\n\n            case 'delete':\n\n                delete category[value.id]\n                message.payload = ''\n                break\n\n            default:\n\n                node.warn(JSON.stringify(datum, undefined, 1))\n                break\n\n        }\n\n        resources[value.type] = category\n        message.topic = TOPIC + '/resource/' + value.type + '/' + value.id\n        message.retain = true\n        messages.push(message)\n\n    }\n}\n\nflow.set('resources', resources)\nmsg.payload = resources\nreturn [msg, messages]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 280,
        "wires": [
            [
                "3221def52c06d766"
            ],
            [
                "964ed66cfe05da8b"
            ]
        ],
        "outputLabels": [
            "resources",
            ""
        ]
    },
    {
        "id": "153449edfaf38a67",
        "type": "EventSource",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "x": 750,
        "y": 340,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ],
            [
                "4ab229c77e4ce0fe"
            ],
            [
                "5e36497f30cb3265"
            ]
        ]
    },
    {
        "id": "964ed66cfe05da8b",
        "type": "rbe",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "bbf1e13fabc2641b"
            ]
        ]
    },
    {
        "id": "7e0cf896d463421a",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"url\":\"https://\" & $env('ADDRESS') & \"/eventstream/clip/v2\",\t   \"initDict\":{\t       \"withCredentials\": false,\t       \"https\": { \"rejectUnauthorized\":false },\t       \"headers\": { \"hue-application-key\": $env('KEY') }\t   }\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 320,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "5ed6402bdc19dd70",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "close",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "4ab229c77e4ce0fe",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "${TOPIC}/onopen",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 340,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "5e36497f30cb3265",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "${TOPIC}/onerror",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 400,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "bbf1e13fabc2641b",
        "type": "mqtt out",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 1250,
        "y": 340,
        "wires": []
    },
    {
        "id": "6ce6327771b66664",
        "type": "complete",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "format event",
        "scope": [
            "d3e5044fe363855b"
        ],
        "uncaught": false,
        "x": 470,
        "y": 320,
        "wires": [
            [
                "7e0cf896d463421a"
            ]
        ]
    },
    {
        "id": "7e48f675042d8b93",
        "type": "mqtt in",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 460,
        "y": 360,
        "wires": [
            [
                "5ed6402bdc19dd70"
            ]
        ]
    },
    {
        "id": "02be9eee8ee84874",
        "type": "status",
        "z": "85ed27d795e6e866",
        "g": "b550cd7d040d0256",
        "name": "status: eventsource",
        "scope": [
            "153449edfaf38a67"
        ],
        "x": 190,
        "y": 660,
        "wires": [
            [
                "f7f6f7ad28d5faba",
                "a0e4a9a77c23f9ce"
            ]
        ]
    },
    {
        "id": "f564e0e7691828da",
        "type": "complete",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "close",
        "scope": [
            "5ed6402bdc19dd70"
        ],
        "uncaught": false,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "5a1b87c5d08fa5d4"
            ]
        ]
    },
    {
        "id": "f7841898977deb1b",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "63b8c849bdb4c8f3",
        "name": "ui model",
        "func": "const model = []\n\nfunction findOwner(grouped_light) {\n\n    const groups = msg.payload[grouped_light.owner.rtype]\n\n    if (Object.prototype.hasOwnProperty.call(groups, grouped_light.owner.rid)) {\n\n        return groups[grouped_light.owner.rid]\n\n    }\n\n    throw 'no container found for grouped_light ' + grouped_light.id\n\n}\n\nfunction findScenes(owner) {\n\n    const scenes = []\n\n    for (let sceneId in msg.payload.scene) {\n\n        const scene = msg.payload.scene[sceneId]\n\n        if (scene.group.rid == owner.id) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n        return a.metadata.name.localeCompare(b.metadata.name)\n    })\n\n}\n\nfor (let grouped_light_id in msg.payload.grouped_light) {\n\n    const grouped_light = msg.payload.grouped_light[grouped_light_id]\n    const owner = findOwner(grouped_light)\n    const scenes = findScenes(owner)\n\n    model.push({\n        grouped_light: grouped_light,\n        owner: owner,\n        scenes: scenes,\n        name: (owner.metadata ? owner.metadata.name : 'All Lights')\n    })\n\n}\n\nmsg.payload = model.sort((a, b) => {\n    return a.name.localeCompare(b.name)\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 520,
        "wires": [
            [
                "14183f3dd2381282",
                "558b67d0475e7440"
            ]
        ]
    },
    {
        "id": "3c4dc36276340285",
        "type": "comment",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "https://www.npmjs.com/package/@parasaurolophus/node-red-eventsource",
        "info": "",
        "x": 560,
        "y": 400,
        "wires": []
    },
    {
        "id": "1a1956aaf2b915c7",
        "type": "comment",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "https://github.com/parasaurolophus/create-hue-application-key",
        "info": "",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "3635f7d1709b0fa7",
        "type": "comment",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "14183f3dd2381282",
        "type": "flexdash custom",
        "z": "85ed27d795e6e866",
        "g": "63b8c849bdb4c8f3",
        "fd_container": "fa8112538a948337",
        "fd_cols": "6",
        "fd_rows": "18",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "hue controls",
        "title": "",
        "sfc_source": "<template>\n\n  <div style=\"height: 100%; vertical-align: top;\">\n\n    <!-- for each element in the array in msg.payload... -->\n    <div style=\"padding: 1em;\"\n        v-for=\"(model, index) in payload\"\n        :key=\"model.grouped_light.id\">\n\n      <!-- add a separator between elements -->\n      <hr v-if=\"index > 0\">\n\n      <!-- add a toggle switch for the element's light group -->\n      <v-switch inset @change=\"changed(model)\"\n          v-model=\"model.grouped_light.on.on\" :label=\"model.name\" />\n\n      <!-- add a button for each of the element's lighting scenes -->\n      <v-btn @click=\"clicked(scene)\"\n          v-for=\"scene in model.scenes\" :key=\"scene.id\">\n        {{ scene.metadata.name }}\n      </v-btn>\n\n    </div>\n\n  </div>\n\n</template>\n\n<script scoped>\n\nexport default {\n\n  props: {\n    payload: { type: Array, default: [] }\n  },\n\n  emits: ['send'],\n\n  methods: {\n\n    clicked(scene) {\n      this.$emit('send', {\n        payload: { recall: { action: 'dynamic_palette' }},\n        topic: 'resource/scene/' + scene.id,\n        method: 'PUT'\n      })\n    },\n\n    changed(model) {\n      this.$emit('send', {\n        payload: { on: { on: model.grouped_light.on.on }},\n        topic: 'resource/grouped_light/' + model.grouped_light.id,\n        method: 'PUT'\n      })\n    }\n  }\n}\n\n</script>",
        "import_map": {},
        "x": 430,
        "y": 500,
        "wires": [
            [
                "47c110cf31929730"
            ]
        ]
    },
    {
        "id": "47c110cf31929730",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "63b8c849bdb4c8f3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "payload.method",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 500,
        "wires": [
            [
                "0632d0568ac3c7f7"
            ]
        ]
    },
    {
        "id": "0632d0568ac3c7f7",
        "type": "link call",
        "z": "85ed27d795e6e866",
        "g": "63b8c849bdb4c8f3",
        "name": "",
        "links": [
            "7a4ba2d58e8e1f70"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 780,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "368e25b0f6f27139",
        "type": "link out",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "controls",
        "mode": "link",
        "links": [
            "ababe72bf0305c42"
        ],
        "x": 1220,
        "y": 260,
        "wires": [],
        "l": true
    },
    {
        "id": "ababe72bf0305c42",
        "type": "link in",
        "z": "85ed27d795e6e866",
        "g": "63b8c849bdb4c8f3",
        "name": "controls",
        "links": [
            "368e25b0f6f27139"
        ],
        "x": 150,
        "y": 520,
        "wires": [
            [
                "f7841898977deb1b"
            ]
        ],
        "l": true
    },
    {
        "id": "3221def52c06d766",
        "type": "rbe",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "368e25b0f6f27139"
            ]
        ]
    },
    {
        "id": "f7f6f7ad28d5faba",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "b550cd7d040d0256",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "status.text = '-1' ? 'gray' : status.text = '0' ? 'yellow' : status.text = '1' ? 'green' : 'red'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "label",
                "pt": "msg",
                "to": "status.text = '-1' ? 'unitialized' : status.text = '0' ? 'connecting' : status.text = '1' ? 'connected' : status.text = '2' ? 'failed' : status.text",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 640,
        "wires": [
            [
                "971b60c46976e238"
            ]
        ]
    },
    {
        "id": "971b60c46976e238",
        "type": "delay",
        "z": "85ed27d795e6e866",
        "g": "b550cd7d040d0256",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 640,
        "wires": [
            [
                "6a4e95234f50527b"
            ]
        ]
    },
    {
        "id": "558b67d0475e7440",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "63b8c849bdb4c8f3",
        "name": "markdown",
        "func": "let markdown = ''\n\nfor (let entry of msg.payload) {\n\n    const state = entry.grouped_light.on.on ?\n        'on' :\n        'off'\n\n    markdown += '# ' +\n        entry.name +\n        ' ' +\n        entry.grouped_light.id +\n        ' ' +\n        state +\n        '\\n\\n'\n\n    if (entry.scenes.length > 0) {\n\n        for (let scene of entry.scenes) {\n\n            markdown += '| ' +\n                scene.metadata.name +\n                ' |  ' +\n                scene.id +\n                ' |\\n'\n\n        }\n\n        markdown += '\\n'\n\n    }\n}\n\nmarkdown += '---\\n'\nmsg.payload = markdown\nmsg.title = env.get('TITLE') + ' Model'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 540,
        "wires": [
            [
                "909bdb017a8b4918"
            ]
        ]
    },
    {
        "id": "909bdb017a8b4918",
        "type": "fd-popup-button",
        "z": "85ed27d795e6e866",
        "g": "63b8c849bdb4c8f3",
        "fd_container": "fa8112538a948337",
        "fd_cols": "6",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "model pop-up",
        "title": "",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "text": "",
        "icon": null,
        "x": 600,
        "y": 540,
        "wires": []
    },
    {
        "id": "6a4e95234f50527b",
        "type": "fd-label",
        "z": "85ed27d795e6e866",
        "g": "b550cd7d040d0256",
        "fd_container": "fa8112538a948337",
        "fd_cols": "6",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "eventsource readystate",
        "title": "${TITLE}",
        "popup_info": "hue bridge connection status",
        "label": null,
        "color": "",
        "align": "center",
        "justify": "center",
        "weight": "400",
        "size": "100%",
        "padding": "4px",
        "x": 750,
        "y": 640,
        "wires": []
    },
    {
        "id": "02eb116aa3a7efad",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "set msg.url and msg.target",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('ADDRESS') & $env('URI')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "a2ce2f10f0cbc3b4"
            ]
        ],
        "info": "Set `msg.url` to request the list of scenes from the PowerView hub."
    },
    {
        "id": "a2ce2f10f0cbc3b4",
        "type": "link call",
        "z": "699fdca4e881f8ec",
        "name": "retrieve metadata",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 430,
        "y": 100,
        "wires": [
            [
                "4597056c8e33d1d2"
            ]
        ]
    },
    {
        "id": "4597056c8e33d1d2",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$lookup(payload, $env('DATA'))",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 100,
        "wires": [
            [
                "a4b2cb7314b93cec"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.sceneData`."
    },
    {
        "id": "a4b2cb7314b93cec",
        "type": "split",
        "z": "699fdca4e881f8ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 100,
        "wires": [
            [
                "e89d138990a2c571"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "e89d138990a2c571",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "decode name",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"name\":$base64decode(payload.name),\"id\":payload.id,\"roomId\":payload.roomId}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 100,
        "wires": [
            [
                "09ed6328f31946db"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "09ed6328f31946db",
        "type": "join",
        "z": "699fdca4e881f8ec",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1010,
        "y": 100,
        "wires": [
            [
                "ca455aa5752d94d8"
            ]
        ],
        "info": "Join previously split messages back into an array."
    },
    {
        "id": "ca455aa5752d94d8",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "TOPIC",
                "tot": "env",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 100,
        "wires": [
            []
        ],
        "info": "Set `msg.topic` to `scenes`."
    },
    {
        "id": "6363f7176ee29fbb",
        "type": "comment",
        "z": "699fdca4e881f8ec",
        "name": "retrieve and parse metadata for a specified type of resource from a given PowerView hub",
        "info": "",
        "x": 330,
        "y": 40,
        "wires": []
    },
    {
        "id": "3aead3d3f53c86d6",
        "type": "function",
        "z": "450f4de3c4f73b40",
        "name": "commands",
        "func": "const messages = []\n\nfor (let command of env.get('COMMANDS')) {\n\n    const message = RED.util.cloneMessage(msg)\n\n    message.payload = command.payload\n    message.topic = command.topic\n    message.method = command.method\n    message.target = command.target\n    messages.push(message)\n\n}\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 100,
        "wires": [
            [
                "2cc17430425dda9f"
            ]
        ]
    },
    {
        "id": "2cc17430425dda9f",
        "type": "link call",
        "z": "450f4de3c4f73b40",
        "name": "Hue API V2",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "ce6b2ab301f750ee"
            ]
        ]
    },
    {
        "id": "ce6b2ab301f750ee",
        "type": "join",
        "z": "450f4de3c4f73b40",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "1fed66fe72fa7562"
            ]
        ]
    },
    {
        "id": "1fed66fe72fa7562",
        "type": "change",
        "z": "450f4de3c4f73b40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"text\":$count($keys(payload)),\t   \"shape\":\"dot\",\t   \"fill\":\"blue\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "04b2b788b1d86771",
        "type": "comment",
        "z": "450f4de3c4f73b40",
        "name": "interoperate with \"Hue API V2\" subflow",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "239d297ededcfbde",
        "type": "mqtt out",
        "z": "d37f5cd9edab358d",
        "g": "cb32c24aeeeec965",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "69fd3ee579dc148a",
        "type": "status",
        "z": "d37f5cd9edab358d",
        "g": "cb32c24aeeeec965",
        "name": "",
        "scope": [
            "239d297ededcfbde"
        ],
        "x": 100,
        "y": 60,
        "wires": [
            [
                "7ec1cebca066ee16"
            ]
        ]
    },
    {
        "id": "7ec1cebca066ee16",
        "type": "switch",
        "z": "d37f5cd9edab358d",
        "g": "cb32c24aeeeec965",
        "name": "node-red:common.status.connected",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red:common.status.connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 60,
        "wires": [
            [
                "93c938e0879f3d82"
            ]
        ]
    },
    {
        "id": "93c938e0879f3d82",
        "type": "change",
        "z": "d37f5cd9edab358d",
        "g": "cb32c24aeeeec965",
        "name": "timestamp",
        "rules": [
            {
                "t": "delete",
                "p": "status",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 80,
        "wires": [
            [
                "239d297ededcfbde"
            ]
        ]
    },
    {
        "id": "a7cf1643a9332de2",
        "type": "link in",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "locale string",
        "links": [],
        "x": 950,
        "y": 360,
        "wires": [
            [
                "3bf82acf8b05bc31"
            ]
        ],
        "l": true
    },
    {
        "id": "3bf82acf8b05bc31",
        "type": "function",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "locale string",
        "func": "msg.payload = new Date(msg.payload).toLocaleString()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "1af506ce07ba6b16"
            ]
        ],
        "info": "Replace the timestamp in `msg.payload` with its localized string\nrepresentation."
    },
    {
        "id": "1af506ce07ba6b16",
        "type": "link out",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "locale string",
        "mode": "return",
        "links": [],
        "x": 1270,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "e40f297f548886a6",
        "type": "mqtt out",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "name": "",
        "topic": "settings/bedtime",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 480,
        "y": 200,
        "wires": []
    },
    {
        "id": "b998fb7500b44508",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "name": "",
        "topic": "settings/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 320,
        "wires": [
            [
                "a3aea892e9c6ef6f"
            ]
        ]
    },
    {
        "id": "eb9677a3b953f055",
        "type": "mqtt out",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "name": "",
        "topic": "settings/lighting",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 540,
        "y": 320,
        "wires": []
    },
    {
        "id": "8d5cd4e2b6741532",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "name": "",
        "topic": "settings/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 260,
        "wires": [
            [
                "6c53863e9ee9d907"
            ]
        ]
    },
    {
        "id": "7924b2b1ee902373",
        "type": "mqtt out",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "name": "",
        "topic": "settings/shades",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "8c8a22c79a66a856",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "name": "",
        "topic": "settings/bedtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "c4918657ee3c8205"
            ]
        ]
    },
    {
        "id": "dedc6f621fe92832",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "topic": "daily/theme",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 950,
        "y": 60,
        "wires": [
            [
                "8b5f3d43ab04f15f"
            ]
        ]
    },
    {
        "id": "5c5154d5bead461b",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "topic": "daily/sunrise",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 950,
        "y": 180,
        "wires": [
            [
                "6293131f50765462"
            ]
        ]
    },
    {
        "id": "fa34b76e712ef007",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "topic": "daily/sunset",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 950,
        "y": 240,
        "wires": [
            [
                "18d43f9fefe9624c"
            ]
        ]
    },
    {
        "id": "9130997453dbb01b",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "topic": "daily/bedtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 950,
        "y": 300,
        "wires": [
            [
                "0b56b8c38bfb3aba"
            ]
        ]
    },
    {
        "id": "9dbd2d38d6ceec1c",
        "type": "mqtt in",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 940,
        "y": 120,
        "wires": [
            [
                "f143492f43470c78"
            ]
        ]
    },
    {
        "id": "6293131f50765462",
        "type": "link call",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "links": [
            "a7cf1643a9332de2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1110,
        "y": 180,
        "wires": [
            [
                "8c71c829aa0ec0ed"
            ]
        ]
    },
    {
        "id": "18d43f9fefe9624c",
        "type": "link call",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "links": [
            "a7cf1643a9332de2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "e88e19eda77e6f5b"
            ]
        ]
    },
    {
        "id": "0b56b8c38bfb3aba",
        "type": "link call",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "name": "",
        "links": [
            "a7cf1643a9332de2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1110,
        "y": 300,
        "wires": [
            [
                "1570464315ea7815"
            ]
        ]
    },
    {
        "id": "8346de5b8a4aac74",
        "type": "link in",
        "z": "d37f5cd9edab358d",
        "g": "2434336f78a2f3e2",
        "name": "error",
        "links": [
            "4bf13bba7e95e190",
            "ab92ee0148a0fed7",
            "b0e90a9025c2015c"
        ],
        "x": 870,
        "y": 460,
        "wires": [
            [
                "5b9edd728b40deb6"
            ]
        ],
        "l": true
    },
    {
        "id": "749b3deee816e422",
        "type": "function",
        "z": "d37f5cd9edab358d",
        "g": "2434336f78a2f3e2",
        "name": "stringify",
        "func": "msg.time = new Date().toLocaleString()\nmsg.payload = JSON.stringify(msg, undefined, 1)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 460,
        "wires": [
            [
                "efa17be91723abcb"
            ]
        ]
    },
    {
        "id": "c4918657ee3c8205",
        "type": "fd-dropdown-select",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "fd_container": "5b9dbfb36097f407",
        "fd_cols": 2,
        "fd_rows": "1",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "settings/bedtime",
        "fd_loopback": false,
        "name": "bedtime setting",
        "title": "Bedtime",
        "popup_info": "choose the center point for the bedtime randomly generated each evening",
        "enabled": true,
        "value": null,
        "choices": [
            21,
            22,
            23
        ],
        "labels": [
            "9PM",
            "10PM",
            "11PM"
        ],
        "allow_multiple": false,
        "color": "",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "e40f297f548886a6"
            ]
        ]
    },
    {
        "id": "c34c16cc16eab87c",
        "type": "fd-push-button",
        "z": "d37f5cd9edab358d",
        "g": "cb32c24aeeeec965",
        "fd_container": "5b9dbfb36097f407",
        "fd_cols": 6,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "refresh controls button",
        "title": "Refresh Controls",
        "popup_info": "recreate dynamically-generated controls",
        "enabled": true,
        "color": "",
        "output_value": true,
        "icon": null,
        "x": 360,
        "y": 100,
        "wires": [
            [
                "93c938e0879f3d82"
            ]
        ]
    },
    {
        "id": "8b5f3d43ab04f15f",
        "type": "fd-text-field",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "fd_container": "efe428ce929d2eb3",
        "fd_cols": "3",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "theme",
        "title": "Theme",
        "popup_info": "current date-based \"theme\" for lighting automation",
        "enabled": true,
        "color": "transparent",
        "text": "",
        "align": "center",
        "x": 1090,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f143492f43470c78",
        "type": "fd-text-field",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "fd_container": "efe428ce929d2eb3",
        "fd_cols": "3",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "time",
        "title": "Time",
        "popup_info": "current time of day for automation",
        "enabled": true,
        "color": "transparent",
        "text": "",
        "align": "center",
        "x": 1090,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "1570464315ea7815",
        "type": "fd-text-field",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "fd_container": "efe428ce929d2eb3",
        "fd_cols": "6",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "bedtime",
        "title": "Bedtime",
        "popup_info": "current randomly-generated bedtime",
        "enabled": true,
        "color": "transparent",
        "text": "",
        "align": "center",
        "x": 1260,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "8c71c829aa0ec0ed",
        "type": "fd-text-field",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "fd_container": "efe428ce929d2eb3",
        "fd_cols": "6",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "sunrise",
        "title": "Sunrise",
        "popup_info": "time at which the sun rises on the current day",
        "enabled": true,
        "color": "transparent",
        "text": "",
        "align": "center",
        "x": 1260,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e88e19eda77e6f5b",
        "type": "fd-text-field",
        "z": "d37f5cd9edab358d",
        "g": "943477037c4d5918",
        "fd_container": "efe428ce929d2eb3",
        "fd_cols": "6",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "sunset",
        "title": "Sunset",
        "popup_info": "time at which the sun sets on the current day",
        "enabled": true,
        "color": "transparent",
        "text": "",
        "align": "center",
        "x": 1250,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "efa17be91723abcb",
        "type": "fd-text-view",
        "z": "d37f5cd9edab358d",
        "g": "2434336f78a2f3e2",
        "fd_container": "d25331d49825beb1",
        "fd_cols": "6",
        "fd_rows": "6",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "error",
        "title": "Error",
        "popup_info": "the most recent error reported by any device API",
        "text": "",
        "editable": false,
        "wrap": false,
        "autoscroll": true,
        "x": 1290,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "5b9edd728b40deb6",
        "type": "function",
        "z": "d37f5cd9edab358d",
        "g": "2434336f78a2f3e2",
        "name": "persist error",
        "func": "const date = new Date()\nconst error = global.get('error', 'file') || { count: 0 }\n\nerror.timestamp = date.getTime()\nerror.localeString = date.toLocaleString()\nerror.count += 1\nerror.latest = RED.util.cloneMessage(msg)\nglobal.set('error', error, 'file')\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "749b3deee816e422"
            ]
        ]
    },
    {
        "id": "6c53863e9ee9d907",
        "type": "fd-toggle",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "fd_container": "5b9dbfb36097f407",
        "fd_cols": 2,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "settings/shades",
        "fd_loopback": false,
        "name": "shades automation setting",
        "title": "Shades",
        "popup_info": "turn on or off time-based window shades automation",
        "value": null,
        "enabled": true,
        "color": "",
        "on_value": true,
        "off_value": false,
        "show_value": true,
        "x": 330,
        "y": 260,
        "wires": [
            [
                "7924b2b1ee902373"
            ]
        ]
    },
    {
        "id": "a3aea892e9c6ef6f",
        "type": "fd-toggle",
        "z": "d37f5cd9edab358d",
        "g": "ee96bb221d02295e",
        "fd_container": "5b9dbfb36097f407",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "settings/lighting",
        "fd_loopback": false,
        "name": "lighting automation setting",
        "title": "Lighting",
        "popup_info": "turn on or off time-based ligting automation",
        "value": null,
        "enabled": true,
        "color": "",
        "on_value": true,
        "off_value": false,
        "show_value": true,
        "x": 330,
        "y": 320,
        "wires": [
            [
                "eb9677a3b953f055"
            ]
        ]
    },
    {
        "id": "b8e996d829493cf7",
        "type": "mqtt in",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "topic": "settings/bedtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 260,
        "wires": [
            [
                "2172861d6eca2d1c"
            ]
        ],
        "info": "Subscribe to `settings/bedtime` messages from the MQTT broker. See the\ndocumentation for the _Bedtime_ dashboard control for more information."
    },
    {
        "id": "aea41299ec309be7",
        "type": "inject",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 01 * * *",
        "once": true,
        "onceDelay": "1",
        "topic": "daily",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "2172861d6eca2d1c"
            ]
        ],
        "info": "Send the current timestamp:\n\n1. At start up\n2. Each morning at 1:01AM"
    },
    {
        "id": "2172861d6eca2d1c",
        "type": "join",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "ec4c72ab0b8b53ad",
                "cbcdf85a73052db5",
                "b42f1fba69cb70e0"
            ]
        ],
        "info": "Synchronize receipt of `daily/timestamp` and `settings/bedtime`\nmessages."
    },
    {
        "id": "ec4c72ab0b8b53ad",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "theme",
        "func": "const date = new Date(msg.payload.daily)\nconst month = date.getMonth() + 1\nconst day = date.getDate()\n\nif ((month == 7) && (day <= 4)) {\n\n    msg.payload = 'tribal'\n\n} else if (month == 10) {\n\n    msg.payload = 'spooky'\n\n} else if (month == 12) {\n\n    msg.payload = 'jolly'\n\n} else {\n\n    msg.payload = 'standard'\n\n}\n\nnode.status({\n    text: msg.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'daily/theme'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "theme"
        ],
        "info": "Set `msg.payload` to one of the _theme_ values, described below, and\n`msg.topic` to `daily/theme`.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/theme`\n- `msg.payload` set to one of the following strings, based on the\n  the timestamp from the input:\n\n| `msg.payload` | Description         |\n|---------------|---------------------|\n| `tribal`      | July 1 - 4          |\n| `spooky`      | Any day in October  |\n| `jolly`       | Any day in December |\n| `standard`    | Any other day       |"
    },
    {
        "id": "cbcdf85a73052db5",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "sunrise | sunset",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst sunrise = RED.util.cloneMessage(msg)\nconst sunset = RED.util.cloneMessage(msg)\nconst date = new Date(msg.payload.daily)\n\nconst times = suncalc.getTimes(\n    // work around bug in suncalc\n    new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        1,\n        1\n    ),\n    LATITUDE,\n    LONGITUDE\n)\n\nsunrise.payload = times.sunrise.getTime()\nsunrise.topic = 'daily/sunrise'\nsunset.payload = times.sunset.getTime()\nsunset.topic = 'daily/sunset'\n\nconst status =\n    new Date(sunrise.payload).toLocaleTimeString() +\n    ' | ' +\n    new Date(sunset.payload).toLocaleTimeString()\n\nnode.status({\n    text: status,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [sunrise, sunset]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "46ac71815281ccea"
            ],
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "sunrise",
            "sunset"
        ],
        "info": "Use the [suncalc](https://www.npmjs.com/package/suncalc) package to\nobtain the times at which the sun rises and sets on a given day.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n_Note also that this assumes:_\n\n_- `function` nodes are allowed to dynamically load the_ suncalc\n   _package_\n\n_- `${LATITUDE}` and `${LONGITUDE}` environment variables contain the\n  georgraphical coordinates to pass to `suncalc.getTimes()`_\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n1. sunrise\n   - `msg.payload` is the timestamp for sunrise as reported by _suncalc_\n   - `msg.topic` is `daily/sunrise`\n2. sunset\n   - `msg.payload` is the timestamp for sunset as reported by _suncalc_\n   - `msg.topic` is `daily/sunset`\n"
    },
    {
        "id": "b42f1fba69cb70e0",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "bedtime",
        "func": "const MILLIS_PER_SECOND = 1000\nconst MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\nconst MILLIS_PER_HALF_HOUR = 30 * MILLIS_PER_MINUTE\nconst MILLIS_PER_HOUR = 2 * MILLIS_PER_HALF_HOUR\n\nconst date = new Date(msg.payload.daily)\nconst offset = MILLIS_PER_HALF_HOUR - Math.floor(Math.random() * MILLIS_PER_HOUR)\nconst time = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    msg.payload['settings/bedtime']\n).getTime()\n\nmsg.payload = time + offset\n\nnode.status({\n    text: new Date(msg.payload).toLocaleTimeString(),\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'daily/bedtime'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 280,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "outputLabels": [
            "bedtime"
        ],
        "info": "Calculate a slightly randomized timestamp based on the values of\n`msg.payload.daily` and `msg.payload.settings/bedtime` as described\nbelow.\n\n# Input\n \n - timestamp for the current day in `msg.payload.daily`\n - value from the `Bedtime` dashboard control in\n   `msg.payload.settings/bedtime`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/bedtime`\n- `msg.payload` set to a timestamp as described below\n\n# Details\n\nThis `function` node receives input from a `join` node that combines the\ntimestamp for a given day with a value selected by use of a dropdown\ncontrol on the dashboard. It calculates a random offset of plus or minus\n30 minutes, adds that to the hour specified by the received value in\n`msg.payload.settings/bedtime` and calculates the timestamp for that\nhour on the day specified by the value received in `msg.payload.daily`,\nplacing it in `msg.payload` in the output message.\n"
    },
    {
        "id": "bf9f3e514e81d58c",
        "type": "mqtt out",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "daily/+",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 830,
        "y": 220,
        "wires": [],
        "info": "Broadcast daily event messages using MQTT based on the values of their\n`msg.payload` and `msg.topic` properties."
    },
    {
        "id": "46ac71815281ccea",
        "type": "rbe",
        "z": "0b58b958ed2dda42",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "bf9f3e514e81d58c"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "ce36e830ccb196af",
        "type": "mqtt out",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 800,
        "y": 420,
        "wires": [],
        "info": "Send the output of the `function` node named `time` as a `timer/time`\nevent using MQTT."
    },
    {
        "id": "449c4612546c24a3",
        "type": "function",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "time",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst now = msg.payload.now\nconst sunrise = msg.payload['daily/sunrise']\nconst sunset = msg.payload['daily/sunset']\nconst bedtime = msg.payload['daily/bedtime']\nconst position = suncalc.getPosition(new Date(now), LATITUDE, LONGITUDE)\n\nif ((now < sunrise) || (now >= bedtime)) {\n\n    msg.payload = 'night'\n\n} else if (now > sunset) {\n\n    msg.payload = 'evening'\n\n} else if (position.altitude > 0.8) {\n\n    msg.payload = 'midday'\n\n} else if (position.azimuth > 0) {\n\n    msg.payload = 'afternoon'\n\n} else {\n\n    msg.payload = 'morning'\n\n}\n\nnode.status({\n    text: msg.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'timer/time'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "f901e2f89786bb1d"
            ]
        ],
        "info": "Use the [suncalc](https://www.npmjs.com/package/suncalc) package to\ncalculate a _time_ value, described below, based on the position of\nthe sun.\n\n_Note that this assumes:_\n\n_- `function` nodes are allowed to dynamically load the_ suncalc\n   _package_\n\n_- `${LATITUDE}` and `${LONGITUDE}` environment variables contain the\n  georgraphical coordinates to pass to `suncalc.getPosition()`_\n\n# Input\n\n- timestamp for current minute in `msg.payload.now`\n- timestamp for sunrise in `msg.payload.daily/sunrise`\n- timestamp for sunset in `msg.payload.daily/sunset`\n- timestamp for bedtime in `msg.payload.daily/bedtime`\n- all other `msg` properties are ignored\n\n_See the documentation for the `function` node named `bedtime` for\ninformation on how `msg.payload.daily/bedtime` is calculated._\n\n# Output\n\n- `msg.topic` is `timer/time`\n- `msg.payload` is one of the following strings:\n\n| `msg.payload` | Description                                                                                                                                                             |\n|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `morning`     | Sunrise to the time at which either the sun is high enough so as not to shine directly into any windows or the sun is no longer shining on the eastern side of the home |\n| `midday`      | Time during which the sun is high enough so as not to shine directly into any windows                                                                                   |\n| `afternoon`   | Time at which the sun is shining on the western side of the home and low enough to shine directly into windows                                                          |\n| `evening`     | Sunset to bedtime                                                                                                                                                       |\n| `night`       | Bedtime to sunrise of the next day                                                                                                                                      |\n\n# Details\n\nThe \"time at which the is high enough so as not to shine directly into\nany windows\" is determined empirically for a home based on its location,\nelevation, orientation, size of awnings or roof overhang and so on.\nBased on that value and the values of `${LATITUDE}` and `${LONGITUDE}`,\nthe sun may not reach such a height on any given day. No messages with\n`msg.payload` set to `midday` will be sent on such occasions.\n\nSimilarly, this function assumes that sunrise and sunset will occur\non the same day and that both will always precede bedtime. These\nassumptions might be violated at certain times of year for extreme\nvalues of `${LATITUDE}`."
    },
    {
        "id": "795ddbf1ece0c9e6",
        "type": "join",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 430,
        "y": 420,
        "wires": [
            [
                "449c4612546c24a3"
            ]
        ],
        "info": "Synchronize the daily events with the ones sent every minute."
    },
    {
        "id": "dde26fd5b0242b48",
        "type": "rbe",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "795ddbf1ece0c9e6"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "91c56df5c885cf9f",
        "type": "mqtt in",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "topic": "daily/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 460,
        "wires": [
            [
                "dde26fd5b0242b48"
            ]
        ],
        "info": "Subscribe to all of the daily event messages sent via MQTT."
    },
    {
        "id": "f5730fdb6bc0272f",
        "type": "inject",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "dde26fd5b0242b48"
            ]
        ],
        "info": "Send a message:\n\n1. At start up\n2. Every 60 seconds thereafter\n\nEach such message will have `msg.payload` set to the timestamp for the\nmoment it was sent and `msg.topic` set to `now`."
    },
    {
        "id": "42dab2bfc218b7c3",
        "type": "comment",
        "z": "0b58b958ed2dda42",
        "name": "https://www.npmjs.com/package/suncalc",
        "info": "",
        "x": 180,
        "y": 80,
        "wires": []
    },
    {
        "id": "935f5813b09efe70",
        "type": "comment",
        "z": "0b58b958ed2dda42",
        "name": "assumes ${LATITUDE} and ${LONGITUDE} are defined",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "f901e2f89786bb1d",
        "type": "rbe",
        "z": "0b58b958ed2dda42",
        "g": "1afeb43be3175917",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 670,
        "y": 420,
        "wires": [
            [
                "ce36e830ccb196af"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, without regard to\n`msg.topic`."
    },
    {
        "id": "0dd52d2dccf3d476",
        "type": "rbe",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 410,
        "y": 120,
        "wires": [
            [
                "ec26adec2aa94c40",
                "bae913eb3593854f"
            ]
        ]
    },
    {
        "id": "6184212dd8e32e40",
        "type": "join",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "0dd52d2dccf3d476"
            ]
        ]
    },
    {
        "id": "ec26adec2aa94c40",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "settings/shades",
        "property": "payload.settings/shades",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 600,
        "y": 180,
        "wires": [
            [
                "37bac7a6b658ade4"
            ]
        ]
    },
    {
        "id": "0862949d83e8b2e4",
        "type": "mqtt in",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "",
        "topic": "settings/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "6184212dd8e32e40"
            ]
        ]
    },
    {
        "id": "f16f4fda7c0b0f7a",
        "type": "mqtt in",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "6184212dd8e32e40"
            ]
        ]
    },
    {
        "id": "37bac7a6b658ade4",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "timer/time",
        "property": "payload.timer/time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "midday",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "afternoon",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 760,
        "y": 180,
        "wires": [
            [
                "6a9ac472018c38ea"
            ],
            [
                "c8c9c1f0d8b62902"
            ],
            [
                "9e961b1409432775"
            ],
            [
                "db4f7c2c93cd8f30"
            ]
        ],
        "info": "Trigger window shades automation for the `time` specified by the value\nof `msg.payload`."
    },
    {
        "id": "6a9ac472018c38ea",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Morning Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "56393",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "f517b9c953846565"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Morning Shades_."
    },
    {
        "id": "c8c9c1f0d8b62902",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Open All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7307",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 160,
        "wires": [
            [
                "f517b9c953846565"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Open All Shades_."
    },
    {
        "id": "9e961b1409432775",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Afternoon Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "42686",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 200,
        "wires": [
            [
                "f517b9c953846565"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Afternoon Shades_."
    },
    {
        "id": "db4f7c2c93cd8f30",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Close All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "15208",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 240,
        "wires": [
            [
                "f517b9c953846565"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Close All Shades_."
    },
    {
        "id": "f517b9c953846565",
        "type": "link call",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "",
        "links": [
            "aed6009fd524f819"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1210,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "650af68abc81e272",
        "type": "rbe",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 430,
        "y": 420,
        "wires": [
            [
                "ab22f57d983c0a67",
                "71fc2fa7674de915"
            ]
        ]
    },
    {
        "id": "788002ed81a9f5eb",
        "type": "join",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "650af68abc81e272"
            ]
        ]
    },
    {
        "id": "ab22f57d983c0a67",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "settings/lighting",
        "property": "payload.settings/lighting",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 640,
        "y": 500,
        "wires": [
            [
                "aae17e5a30471de5"
            ]
        ]
    },
    {
        "id": "36a9058ec89dc970",
        "type": "mqtt in",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "",
        "topic": "settings/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 360,
        "wires": [
            [
                "788002ed81a9f5eb"
            ]
        ]
    },
    {
        "id": "4f71fe46ad187ae6",
        "type": "mqtt in",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 420,
        "wires": [
            [
                "788002ed81a9f5eb"
            ]
        ]
    },
    {
        "id": "48e8d9fce3eab7a3",
        "type": "mqtt in",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "",
        "topic": "daily/theme",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 480,
        "wires": [
            [
                "788002ed81a9f5eb"
            ]
        ]
    },
    {
        "id": "aae17e5a30471de5",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "timer/time",
        "property": "payload.timer/time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 800,
        "y": 500,
        "wires": [
            [
                "870608ff910feb60"
            ],
            [
                "0e592700939a92aa"
            ],
            [
                "353cfc8157d414e1"
            ]
        ],
        "info": "Trigger window shades automation for the `time` specified by the value\nof `msg.payload.timer/time`."
    },
    {
        "id": "870608ff910feb60",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Morning",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/grouped_light/9c1c7975-2f47-4552-bac8-c19b643cd678\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/grouped_light/aea74e74-d544-4d08-ad71-3b6665045256\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            },
            {
                "name": "GROUPS",
                "value": "",
                "type": "json"
            },
            {
                "name": "SCENES",
                "value": "",
                "type": "json"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 1000,
        "y": 420,
        "wires": []
    },
    {
        "id": "0e592700939a92aa",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "daily/theme",
        "property": "payload.daily/theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tribal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spooky",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jolly",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "1cb0a0826e19ac25"
            ],
            [
                "8b2870e325e61ea1"
            ],
            [
                "541a0eff9f0235b7"
            ],
            [
                "4c3ffaa9eed2fd35"
            ]
        ],
        "info": "Trigger evening lighting automation for the specified _theme_."
    },
    {
        "id": "353cfc8157d414e1",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Night",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            },
            {
                "name": "GROUPS",
                "value": "",
                "type": "json"
            },
            {
                "name": "SCENES",
                "value": "",
                "type": "json"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 990,
        "y": 580,
        "wires": []
    },
    {
        "id": "1cb0a0826e19ac25",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Tribal",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"resource/scene/c4681d32-3368-43cd-9cf1-436132521068\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            },
            {
                "name": "GROUPS",
                "value": "",
                "type": "json"
            },
            {
                "name": "SCENES",
                "value": "",
                "type": "json"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "8b2870e325e61ea1",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Spooky",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"resource/scene/70a0a8a6-b4b7-4b24-a9cf-0ecea0f359cc\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            },
            {
                "name": "GROUPS",
                "value": "",
                "type": "json"
            },
            {
                "name": "SCENES",
                "value": "",
                "type": "json"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 1220,
        "y": 460,
        "wires": []
    },
    {
        "id": "541a0eff9f0235b7",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Jolly",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"resource/scene/3ac45cbb-21c0-4c2f-8037-c40345537ce2\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/12571f23-7714-4b47-8e75-a3040389b788\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            },
            {
                "name": "GROUPS",
                "value": "",
                "type": "json"
            },
            {
                "name": "SCENES",
                "value": "",
                "type": "json"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 1210,
        "y": 540,
        "wires": []
    },
    {
        "id": "4c3ffaa9eed2fd35",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Standard",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/9b6935e2-f8ed-4f91-83a2-2bff1850da99\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            },
            {
                "name": "GROUPS",
                "value": "",
                "type": "json"
            },
            {
                "name": "SCENES",
                "value": "",
                "type": "json"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 1220,
        "y": 620,
        "wires": []
    },
    {
        "id": "bae913eb3593854f",
        "type": "json",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 570,
        "y": 60,
        "wires": [
            [
                "7fd58ccd357887b3"
            ]
        ]
    },
    {
        "id": "71fc2fa7674de915",
        "type": "json",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 610,
        "y": 340,
        "wires": [
            [
                "80c3792cf898b831"
            ]
        ]
    },
    {
        "id": "7fd58ccd357887b3",
        "type": "fd-text-view",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "fd_container": "efe428ce929d2eb3",
        "fd_cols": "6",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "shades automation trigger",
        "title": "Shades Automation Trigger",
        "popup_info": "",
        "text": "",
        "editable": false,
        "wrap": false,
        "autoscroll": true,
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "80c3792cf898b831",
        "type": "fd-text-view",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "fd_container": "efe428ce929d2eb3",
        "fd_cols": "6",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "lighting automation trigger",
        "title": "Lighting Automation Trigger",
        "popup_info": "",
        "text": "",
        "editable": false,
        "wrap": false,
        "autoscroll": true,
        "x": 790,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e685110a1eb864fd",
        "type": "comment",
        "z": "d17c63f280964e0b",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "9b22e1e38e67938b",
        "type": "comment",
        "z": "d17c63f280964e0b",
        "name": "https://motorisation.hde.nl/hd/powerview/general-guides/API/",
        "info": "",
        "x": 260,
        "y": 80,
        "wires": []
    },
    {
        "id": "aed6009fd524f819",
        "type": "link in",
        "z": "d17c63f280964e0b",
        "g": "9cf0457b813ca743",
        "name": "activate powerview scene",
        "links": [],
        "x": 150,
        "y": 300,
        "wires": [
            [
                "34eaa776ddc24669"
            ]
        ],
        "l": true,
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "4bf13bba7e95e190",
        "type": "link out",
        "z": "d17c63f280964e0b",
        "g": "cb106476337f4d38",
        "name": "powerview error",
        "mode": "link",
        "links": [
            "8346de5b8a4aac74"
        ],
        "x": 780,
        "y": 200,
        "wires": [],
        "l": true
    },
    {
        "id": "a250d71416af8250",
        "type": "link in",
        "z": "d17c63f280964e0b",
        "g": "cb106476337f4d38",
        "name": "send to powerview",
        "links": [],
        "x": 130,
        "y": 180,
        "wires": [
            [
                "70e42b6637f4c865"
            ]
        ],
        "l": true
    },
    {
        "id": "70e42b6637f4c865",
        "type": "delay",
        "z": "d17c63f280964e0b",
        "g": "cb106476337f4d38",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "413305fe8cf8bc16"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the PowerView hub to 1 per\nsecond."
    },
    {
        "id": "413305fe8cf8bc16",
        "type": "http request",
        "z": "d17c63f280964e0b",
        "g": "cb106476337f4d38",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "3b9aea255e25c86d",
                "450c11f088a3f9ee"
            ]
        ],
        "info": "Send `msg.url` as a `GET` request to the PowerView hub."
    },
    {
        "id": "3b9aea255e25c86d",
        "type": "function",
        "z": "d17c63f280964e0b",
        "g": "cb106476337f4d38",
        "name": "validate",
        "func": "let fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n\n    }\n\n    return null\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 200,
        "wires": [
            [
                "4bf13bba7e95e190"
            ]
        ],
        "outputLabels": [
            "success"
        ],
        "info": "Block unless the response indicates an error occurred."
    },
    {
        "id": "450c11f088a3f9ee",
        "type": "link out",
        "z": "d17c63f280964e0b",
        "g": "cb106476337f4d38",
        "name": "powerview response",
        "mode": "return",
        "links": [],
        "x": 660,
        "y": 160,
        "wires": [],
        "l": true
    },
    {
        "id": "34eaa776ddc24669",
        "type": "change",
        "z": "d17c63f280964e0b",
        "g": "9cf0457b813ca743",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/scenes?sceneId=' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 300,
        "wires": [
            [
                "2bf099ec37e84bbc"
            ]
        ],
        "info": "Set `msg.url` to the URL with query string to activate the scene\nspecified by `msg.payload` using the IP address specified by the\nenvironment variable named `POWERVIEW_ADDRESS`."
    },
    {
        "id": "2bf099ec37e84bbc",
        "type": "link call",
        "z": "d17c63f280964e0b",
        "g": "9cf0457b813ca743",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 300,
        "wires": [
            [
                "9b5a655543db6ec5"
            ]
        ]
    },
    {
        "id": "9b5a655543db6ec5",
        "type": "link out",
        "z": "d17c63f280964e0b",
        "g": "9cf0457b813ca743",
        "name": "powerview response",
        "mode": "return",
        "links": [],
        "x": 740,
        "y": 300,
        "wires": [],
        "l": true
    },
    {
        "id": "de8273a5bd63e29f",
        "type": "function",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "powerview model",
        "func": "msg.dashboard = []\n\nfunction findScenes(roomId) {\n\n    const scenes = []\n\n    for (const scene of msg.payload.scenes) {\n\n        if (scene.roomId == roomId) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n        return a.name.localeCompare(b.name)\n    })\n}\n\nfor (const room of msg.payload.rooms) {\n\n    const scenes = findScenes(room.id)\n\n    if (scenes.length > 0) {\n\n        const roomScenes = []\n\n        for (const scene of scenes) {\n\n            roomScenes.push({\n                sceneName: scene.name,\n                sceneId: scene.id\n            })\n        }\n\n        msg.dashboard.push({\n            roomName: room.name,\n            roomId: room.id,\n            roomScenes: roomScenes\n        })\n    }\n}\n\nmsg.dashboard = msg.dashboard.sort((a, b) => {\n    return a.roomName.localeCompare(b.roomName)\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 420,
        "wires": [
            [
                "273346c13d4b93a6"
            ]
        ],
        "info": "Format `rooms` and `scenes` metadata into a combined data structure\nsuitable for use with a `template` node to dynamically create dashboard\ncontrols."
    },
    {
        "id": "eb7123132bce19c7",
        "type": "join",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 430,
        "y": 420,
        "wires": [
            [
                "de8273a5bd63e29f"
            ]
        ],
        "info": "Join messages containing `rooms` and `scenes` metadata."
    },
    {
        "id": "02eec7feccc1567d",
        "type": "subflow:699fdca4e881f8ec",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "Get Scenes",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            },
            {
                "name": "URI",
                "value": "/api/scenes/",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send to powerview",
                "type": "str"
            },
            {
                "name": "DATA",
                "value": "sceneData",
                "type": "str"
            },
            {
                "name": "TOPIC",
                "value": "scenes",
                "type": "str"
            },
            {
                "name": "ATTRIBUTE",
                "value": "sceneData",
                "type": "str"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 400,
        "wires": [
            [
                "eb7123132bce19c7"
            ]
        ]
    },
    {
        "id": "07a492e2d29b5dd3",
        "type": "subflow:699fdca4e881f8ec",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "Get Rooms",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            },
            {
                "name": "URI",
                "value": "/api/rooms/",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send to powerview",
                "type": "str"
            },
            {
                "name": "DATA",
                "value": "roomData",
                "type": "str"
            },
            {
                "name": "TOPIC",
                "value": "rooms",
                "type": "str"
            },
            {
                "name": "ATTRIBUTE",
                "value": "sceneData",
                "type": "str"
            },
            {
                "name": "flexdash_grid",
                "value": "",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 440,
        "wires": [
            [
                "eb7123132bce19c7"
            ]
        ]
    },
    {
        "id": "57c39b659f421513",
        "type": "mqtt in",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 420,
        "wires": [
            [
                "02eec7feccc1567d",
                "07a492e2d29b5dd3"
            ]
        ],
        "info": "Subscribe to `controls/refresh` messages using MQTT."
    },
    {
        "id": "20fcd070f0572dc0",
        "type": "flexdash custom",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "fd_container": "b1e7a12608de7a06",
        "fd_cols": "6",
        "fd_rows": "18",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "powerview controls",
        "title": "Shades",
        "sfc_source": "<template>\n\n  <div style=\"height: 100%; vertical-align: top;\">\n\n    <!-- for each element in the array in msg.dashboard... -->\n    <div style=\"padding: 1em;\"\n        v-for=\"(model, index) in dashboard\"\n        :key=\"model.roomId\">\n\n      <!-- add a separator between elements -->\n      <hr v-if=\"index > 0\">\n\n      <p>{{ model.roomName }}</p>\n\n      <!-- add a button for each of the element's window shade scenes -->\n      <v-btn @click=\"clicked(scene)\"\n          v-for=\"scene in model.roomScenes\" :key=\"scene.sceneId\">\n        {{ scene.sceneName }}\n      </v-btn>\n\n    </div>\n\n  </div>\n\n</template>\n\n<script scoped>\n\nexport default {\n\n  props: {\n    dashboard: { type: Array, default: [] }\n  },\n\n  emits: ['send'],\n\n  methods: {\n\n    clicked(scene) {\n      this.$emit('send', scene.sceneId)\n    }\n  }\n}\n\n</script>",
        "import_map": {},
        "x": 910,
        "y": 400,
        "wires": [
            [
                "e85b0e2a6e90da31"
            ]
        ]
    },
    {
        "id": "273346c13d4b93a6",
        "type": "rbe",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "20fcd070f0572dc0",
                "0e632e274bbeb040"
            ]
        ]
    },
    {
        "id": "e85b0e2a6e90da31",
        "type": "link call",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "",
        "links": [
            "aed6009fd524f819"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1130,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0e632e274bbeb040",
        "type": "function",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "name": "markdown",
        "func": "function sortByName(array) {\n\n    return array.sort((a, b) => {\n\n        return a.name.localeCompare(b.name)\n\n    })\n}\n\nfunction findScenes(room, scenes) {\n\n    const roomScenes = []\n\n    for (let scene of scenes) {\n\n        if (room.id == scene.roomId) {\n\n            roomScenes.push(scene)\n\n        }\n    }\n\n    return roomScenes\n\n}\n\nconst allScenes = sortByName(msg.payload.scenes)\nconst allRooms = sortByName(msg.payload.rooms)\nlet markdown = ''\n\nfor (let room of allRooms) {\n\n    const roomScenes = findScenes(room, allScenes)\n\n    if (roomScenes.length > 0) {\n\n        markdown += '# ' +\n            room.name +\n            ' ' +\n            room.id +\n            '\\n\\n'\n\n        for (let scene of roomScenes) {\n\n            markdown += '| ' +\n                scene.name +\n                ' |  ' +\n                scene.id +\n                ' |\\n'\n\n        }\n\n        markdown += '\\n'\n\n    }\n}\n\nmarkdown += '---\\n'\nmsg.payload = markdown\ndelete msg.title\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 440,
        "wires": [
            [
                "6da2a4ce93760596"
            ]
        ]
    },
    {
        "id": "6da2a4ce93760596",
        "type": "fd-popup-button",
        "z": "d17c63f280964e0b",
        "g": "f61f788a11efec04",
        "fd_container": "b1e7a12608de7a06",
        "fd_cols": "6",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "name": "model pop-up",
        "title": "Shades Model",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "text": "",
        "icon": null,
        "x": 1060,
        "y": 440,
        "wires": []
    },
    {
        "id": "d3686879543e1951",
        "type": "subflow:85ed27d795e6e866",
        "z": "2191f395ad362596",
        "g": "8002cb7f995536e6",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "TOPIC",
                "type": "env"
            },
            {
                "name": "TITLE",
                "value": "TITLE",
                "type": "env"
            },
            {
                "name": "flexdash_grid",
                "value": "3f52c6a91a658ce1",
                "type": "str"
            }
        ],
        "flexdash_grid": "3f52c6a91a658ce1",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "b0e90a9025c2015c"
            ]
        ]
    },
    {
        "id": "a4bd3631d548f809",
        "type": "link in",
        "z": "2191f395ad362596",
        "g": "8002cb7f995536e6",
        "name": "send to basement hue",
        "links": [],
        "x": 160,
        "y": 300,
        "wires": [
            [
                "d3686879543e1951"
            ]
        ],
        "l": true
    },
    {
        "id": "afe43437400cbd95",
        "type": "subflow:85ed27d795e6e866",
        "z": "2191f395ad362596",
        "g": "2556ad75d549c17f",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "TOPIC",
                "type": "env"
            },
            {
                "name": "TITLE",
                "value": "TITLE",
                "type": "env"
            },
            {
                "name": "flexdash_grid",
                "value": "3f52c6a91a658ce1",
                "type": "str"
            }
        ],
        "flexdash_grid": "3f52c6a91a658ce1",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "ab92ee0148a0fed7"
            ]
        ]
    },
    {
        "id": "e492a91b947bc715",
        "type": "link in",
        "z": "2191f395ad362596",
        "g": "2556ad75d549c17f",
        "name": "send to ground floor hue",
        "links": [],
        "x": 170,
        "y": 160,
        "wires": [
            [
                "afe43437400cbd95"
            ]
        ],
        "l": true
    },
    {
        "id": "4618e940bf9ae3a5",
        "type": "comment",
        "z": "2191f395ad362596",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "a6c65b71fb515b1e",
        "type": "comment",
        "z": "2191f395ad362596",
        "g": "2556ad75d549c17f",
        "name": "assumes ${GROUND_FLOOR_HUE_ADDRESS} and ${GROUND_FLOOR_HUE_KEY} are defined",
        "info": "",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "603def2442931ab8",
        "type": "comment",
        "z": "2191f395ad362596",
        "g": "8002cb7f995536e6",
        "name": "assumes ${BASEMENT_HUE_ADDRESS} and ${BASEMENT_HUE_KEY} are defined",
        "info": "",
        "x": 360,
        "y": 260,
        "wires": []
    },
    {
        "id": "ab92ee0148a0fed7",
        "type": "link out",
        "z": "2191f395ad362596",
        "g": "2556ad75d549c17f",
        "name": "ground floor hue error",
        "mode": "link",
        "links": [
            "8346de5b8a4aac74"
        ],
        "x": 560,
        "y": 160,
        "wires": [],
        "l": true
    },
    {
        "id": "b0e90a9025c2015c",
        "type": "link out",
        "z": "2191f395ad362596",
        "g": "8002cb7f995536e6",
        "name": "basement hue error",
        "mode": "link",
        "links": [
            "8346de5b8a4aac74"
        ],
        "x": 530,
        "y": 300,
        "wires": [],
        "l": true
    },
    {
        "id": "05224ffb74b3f646",
        "type": "comment",
        "z": "2191f395ad362596",
        "g": "4d34d7515d2d5eb7",
        "name": "https://developers.meethue.com/develop/application-design-guidance/hue-bridge-discovery/",
        "info": "",
        "x": 370,
        "y": 400,
        "wires": []
    },
    {
        "id": "3fd817749715b4c8",
        "type": "discovery",
        "z": "2191f395ad362596",
        "g": "4d34d7515d2d5eb7",
        "name": "_hue._tcp",
        "topic": "",
        "service": "_hue._tcp",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "dde39b996d199227"
            ]
        ]
    },
    {
        "id": "0ac450bd2cb71c4b",
        "type": "rbe",
        "z": "2191f395ad362596",
        "g": "4d34d7515d2d5eb7",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 430,
        "y": 440,
        "wires": [
            [
                "951c2a51ed6be94c"
            ]
        ]
    },
    {
        "id": "dde39b996d199227",
        "type": "function",
        "z": "2191f395ad362596",
        "g": "4d34d7515d2d5eb7",
        "name": "split by address",
        "func": "const messages = []\n\nfor (let address of msg.payload.addresses) {\n\n    const message = RED.util.cloneMessage(msg)\n\n    message.payload = {\n        id: msg.payload.txtRecord.bridgeid,\n        model: msg.payload.txtRecord.modelid,\n        name: msg.payload.name,\n        host: msg.payload.host,\n        address: address,\n        port: msg.payload.port\n    }\n\n    message.topic = 'hue/bridge/' + message.payload.id\n    messages.push(message)\n\n}\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 440,
        "wires": [
            [
                "0ac450bd2cb71c4b"
            ]
        ]
    },
    {
        "id": "9a4d24d3dd15f6f3",
        "type": "fd-simple-table",
        "z": "2191f395ad362596",
        "g": "aa4b11da55ec8165",
        "fd_container": "0206e4e57203648e",
        "fd_cols": "10",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "address",
        "fd_loopback": false,
        "name": "hue bridges table",
        "title": "Hue Bridges",
        "popup_info": "click on a row within 30 seconds of pressing the \"link\" button on the corresponding bridge",
        "data": null,
        "columns": [
            "id",
            "model",
            "name",
            "host",
            "address",
            "port"
        ],
        "labels": [
            "Id",
            "Model",
            "Name",
            "Host",
            "Address",
            "Port"
        ],
        "align": null,
        "click": true,
        "sort": false,
        "x": 570,
        "y": 540,
        "wires": [
            [
                "a16f51b7e78155b0"
            ]
        ]
    },
    {
        "id": "db20507d47d41df9",
        "type": "join",
        "z": "2191f395ad362596",
        "g": "aa4b11da55ec8165",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 270,
        "y": 540,
        "wires": [
            [
                "58f9b91f469c2298"
            ]
        ]
    },
    {
        "id": "58f9b91f469c2298",
        "type": "function",
        "z": "2191f395ad362596",
        "g": "aa4b11da55ec8165",
        "name": "to array",
        "func": "const array = []\n\nfor (let topic in msg.payload) {\n\n    array.push(msg.payload[topic])\n\n}\n\nmsg.payload = array\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "9a4d24d3dd15f6f3"
            ]
        ]
    },
    {
        "id": "a16f51b7e78155b0",
        "type": "change",
        "z": "2191f395ad362596",
        "g": "aa4b11da55ec8165",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.data.address",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 540,
        "wires": [
            [
                "e5f2d38d9320e4d2"
            ]
        ]
    },
    {
        "id": "951c2a51ed6be94c",
        "type": "mqtt out",
        "z": "2191f395ad362596",
        "g": "4d34d7515d2d5eb7",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d43897d45226a6e5",
        "x": 550,
        "y": 440,
        "wires": []
    },
    {
        "id": "388512dfed2f201e",
        "type": "mqtt in",
        "z": "2191f395ad362596",
        "g": "aa4b11da55ec8165",
        "name": "",
        "topic": "hue/bridge/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d43897d45226a6e5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 540,
        "wires": [
            [
                "db20507d47d41df9"
            ]
        ]
    },
    {
        "id": "4edaa94ac96845e1",
        "type": "change",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "name": "request key",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'https://' & payload & '/api'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"devicetype\":$env('HUE_USERNAME'),\"generateclientkey\":true}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 680,
        "wires": [
            [
                "0ed14c935a7933e8"
            ]
        ],
        "info": "Set `msg.url` and `msg.payload` to use as the parameters in a command to\nregister a user name with a Hue Bridge.\n\nSee\n<https://developers.meethue.com/develop/hue-api-v2/getting-started/>\nfor more information."
    },
    {
        "id": "0ed14c935a7933e8",
        "type": "http request",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "06c952f588cb12f4",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 680,
        "wires": [
            [
                "f74128d99635d540"
            ]
        ],
        "info": "Send a HTTP `POST` request using TLS but without certificate validation\ndue to defects in the Hue Bridge API."
    },
    {
        "id": "e5f2d38d9320e4d2",
        "type": "link out",
        "z": "2191f395ad362596",
        "g": "aa4b11da55ec8165",
        "name": "hue bridge address",
        "mode": "link",
        "links": [
            "32957b8846e57f76"
        ],
        "x": 950,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "32957b8846e57f76",
        "type": "link in",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "name": "create hue key",
        "links": [
            "e5f2d38d9320e4d2"
        ],
        "x": 140,
        "y": 680,
        "wires": [
            [
                "4edaa94ac96845e1"
            ]
        ],
        "l": true
    },
    {
        "id": "ef28c8779729e38a",
        "type": "fd-text-view",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "fd_container": "0206e4e57203648e",
        "fd_cols": "10",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "hue client application key",
        "title": "Client Application Key",
        "popup_info": "if successful, the newly created client key will appear here as \"username\"",
        "text": "",
        "editable": false,
        "wrap": false,
        "autoscroll": true,
        "x": 970,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "47127182921210f4",
        "type": "json",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 790,
        "y": 680,
        "wires": [
            [
                "ef28c8779729e38a"
            ]
        ]
    },
    {
        "id": "f74128d99635d540",
        "type": "function",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "name": "persist hue key",
        "func": "const hueKey = global.get('hue-key', 'file') || {}\n\nhueKey[msg.topic] = msg.payload\nglobal.set('hue-key', hueKey, 'file')\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 680,
        "wires": [
            [
                "47127182921210f4"
            ]
        ]
    },
    {
        "id": "19340c4a132003af",
        "type": "comment",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "name": "assumes ${HUE_USERNAME} is defined",
        "info": "",
        "x": 720,
        "y": 640,
        "wires": []
    },
    {
        "id": "3dbe561bfaf5bbf1",
        "type": "comment",
        "z": "2191f395ad362596",
        "g": "23bf1f9635c44cc8",
        "name": "https://developers.meethue.com/develop/hue-api-v2/getting-started/",
        "info": "",
        "x": 300,
        "y": 640,
        "wires": []
    }
]