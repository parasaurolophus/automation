[
    {
        "id": "13e9081a904c6a12",
        "type": "tab",
        "label": "Timer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6913f223fa29d4d2",
        "type": "tab",
        "label": "Shades",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "448b73182a92925c",
        "type": "tab",
        "label": "Lighting",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dcb190a34f9985d0",
        "type": "tab",
        "label": "PowerView",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "86021a0ae2220c2b",
        "type": "tab",
        "label": "Hue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "531b5b7886a5f8e6",
        "type": "tab",
        "label": "Monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a8af92611acc27a",
        "type": "subflow",
        "name": "Notify",
        "info": "Display a message as a \"toast\" on the\ndashboard and in the debug console.",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "d2492fc09315bfc0"
                    },
                    {
                        "id": "30e1991ea828ba4f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {
            "module": "@parasaurolophus/node-red-notify",
            "type": "notify",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Display a message as a toast on the dashboard and in the debug console",
            "keywords": "node-red",
            "license": "MIT"
        },
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_toast.png",
        "status": {
            "x": 200,
            "y": 220,
            "wires": [
                {
                    "id": "5280e126498476bc",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a0b7d0294edc5956",
        "type": "subflow",
        "name": "EventSource readyState",
        "info": "Convert the numeric status code for an EventSource into a string for\ndisplay to the user.\n\n# Input\n\n- `status` node output for an `EventSource` node.\n\n# Output\n\n- `msg.payload` is the string representation of `EventSource.readyState`\n- `msg.color` is the color with which to render `msg.payload`\n- `msg.icon` is a HTML snippet containing a Font Awesome icon to use\n   when rendering `msg.payload`\n- `msg.template` is a HTML snippet that will render `msg.payload`\n  in a `ui_template` node",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "726e859588b521d1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 100,
                "wires": [
                    {
                        "id": "907c3a162e221669",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "@parasaurolophus/node-red-eventsource-readystate",
            "type": "eventsource-readystate",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Convert the numeric status code for an EventSource into a string for display to the user",
            "keywords": "node-red",
            "license": "MIT"
        },
        "color": "#3FADB5",
        "inputLabels": [
            "readyState"
        ],
        "outputLabels": [
            "template"
        ],
        "icon": "node-red/status.svg",
        "status": {
            "x": 960,
            "y": 180,
            "wires": [
                {
                    "id": "b00c5123ccc7aca8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d61db14468b910ab",
        "type": "subflow",
        "name": "Hue API V2",
        "info": "This subflow encapsulates logic necessary to subscribe to event messages\nsent by a Philips Hue Bridge. It wraps this fairly complex logic as a\nsubflow as a convenience for connecting to multiple bridges on a single\nLAN.\n\n# Input\n\nThe receipt of any input message triggers a sequence of events as\ndescribed below. The actual content of the incoming message is ignored.\n\n# Output\n\nAn ongoing stream of event messages wrapped in a data structure suitable\nfor providing a set of dynamically created dashboard controls using a\n`ui_template` node.\n\n# Details\n\nThis subflow requires the following configuration:\n\n| Environment Variable | Description                                                                       |\n|----------------------|-----------------------------------------------------------------------------------|\n| `ADDRESS`            | IP address or host name of the Hue bridge                                         |\n| `KEY`                | A valid client application key for the Hue bridge                                 |\n| `TARGET`             | The label of a `link in` node that will be called to send messages to the Hue bridge |\n| `BRIDGE`             | A unique name for the Hue bridge at the given `ADDRESS`                           |\n\nSee\n<https://developers.meethue.com/develop/application-design-guidance/hue-bridge-discovery/>\nfor information on determining the value for `${ADDRESS}`.\n\nSee <https://developers.meethue.com/develop/hue-api-v2/getting-started/>\nfor information on how to generate the value for `${KEY}`; the\n_@parasaurolophus/node-red-create-hue-application-key_ subflow provides\na convenience wrapper for the relevant API.\n\nThe value of `${TARGET}` must be the name of a `link in` node that\nconnects to an instance of the\n_@parasaurolophus/node-red-send-hue-command_ subflow configured\nwith the same values for `${ADDRESS}` and `${KEY}`. The output of that\nsubflow must connect to a `link out` node configured to return its\ncaller.\n\nThe value of `${BRIDGE}` can be any string you wish to identify a\nparticular bridge. It will be used to form flow context storage keys.\n\nUpon receipt of any incoming message, this subflow:\n\n1. Fetches the complete set of \"resources\" from the Hue bridge\n2. Parses and reformats a subset of that metadata for use in\n   dynamically creating dashboard controls for the light groups and\n   scenes defined using the native Hue mobile app\n3. Uses a\n   [@parasaurolophus/node-red-eventsource](https://flows.nodered.org/node/@parasaurolophus/node-red-eventsource)\n   node to subscribe to event messages sent by the bridge\n4. Sends update messages each time the state of the dynamically created\n   dashboard controls change\n\nThe output of this flow should be connected to a `ui_template` node. The\noutput of that `ui_template` should be sent to an instance of the\n_@parasaurolophus/node-red-send-hue-command_ subflow configured with the\nsame values for `${ADDRESS}` and `${KEY}`. Typically, this would be\nthrough a `link call` node configured to invoke the same `link in` as\nspecified by `${TARGET}`.",
        "category": "hue",
        "in": [
            {
                "x": 40,
                "y": 180,
                "wires": [
                    {
                        "id": "07d9702ee21263d3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1190,
                "y": 580,
                "wires": [
                    {
                        "id": "d9ae737367ebed62",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": ""
            },
            {
                "name": "KEY",
                "type": "str",
                "value": ""
            },
            {
                "name": "TARGET",
                "type": "str",
                "value": ""
            },
            {
                "name": "TOPIC",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-api-v2",
            "type": "hue-api-v2",
            "version": "1.0.1",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Wrap the API (V2) exposed by a Philips Hue Bridge",
            "keywords": "node-red,philips-hue,hue",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "outputLabels": [
            "dashboard",
            "onopen",
            "onerror",
            "events"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 1280,
            "y": 420,
            "wires": [
                {
                    "id": "8cd24b2b4ab64410",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "dd3a1235085c7ed7",
        "type": "subflow",
        "name": "Send Hue Command",
        "info": "Send a HTTP request to the API (V2) on a Philips Hue Bridge.\n\n# Input\n\nSee the documentation for the `http request` node for information about\nhow to format a message for use with an HTTP based API like that exposed\nby a Hue Bridge. In particular, this subflow assumes that `msg.payload`\nand `msg.method` will be set appropriately for the particular API entry\npoint you wish to invoke. In addition, this subflow assumes that\n`msg.topic` is the bridge resource URI representing the command entry\npoint or resource to fetch. It will be converted to a proper value for\nthe `msg.url` property, as described below.\n\n# Output\n\nThe the output of a `http request` node used to interact with the Hue\nbridge.\n\n# Details\n\nThis subflow will set `msg.url` and `msg.headers` according to the\nvalues of:\n\n- `msg.topic`\n- `${ADDRESS}`\n- `${KEY}`\n\nbefore sending the message through to a `http request` node. The URL\nwill be formed by prepending the `htts://` scheme and value of the\n`${ADDRESS}` environment variable to `msg.topic`. The value of\n`msg.headers` will include the client application security token\ncontained in the `${KEY}` environment variable. The other message\nproperties will be passed through unchanged to the `http request` node.\n\nSee <https://developers.meethue.com/develop/hue-api-v2/> for details of\nthe various API entry points that can be invoked using this subflow.\n\nSee\n<https://developers.meethue.com/develop/application-design-guidance/hue-bridge-discovery/>\nfor information on how to obtain the `${ADDRESS}` for your bridge.\n\nSee <https://developers.meethue.com/develop/hue-api-v2/getting-started/> for\ninformation on how to generate a value to pass as the `${KEY}`. The\n_@parasaurolophus/node-red-create-hue-application-key_ subflow provides\na convenient way to invoke the relevat API entry point.",
        "category": "hue",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "fa870f94fa1ea10b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 120,
                "wires": [
                    {
                        "id": "20ac42d7649c260a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 870,
                "y": 200,
                "wires": [
                    {
                        "id": "c029fcaa62306eb2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": ""
            },
            {
                "name": "KEY",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-send-hue-command",
            "type": "send-hue-command",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Send a message to the Philips Hue Bridge API V2",
            "keywords": "node-red,philips-hue,hue",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "inputLabels": [
            "command"
        ],
        "outputLabels": [
            "response",
            "error"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 640,
            "y": 280,
            "wires": [
                {
                    "id": "7f6c4efded50ed6b",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "60e4d1c056ed3a0c",
        "type": "group",
        "z": "448b73182a92925c",
        "name": "trigger lighting automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "aae17e5a30471de5",
            "f590050ce69df70f",
            "7ed122d84c5e7167",
            "6b81bc8a01c525d8",
            "0de1a81dd7644afc",
            "776dedfbba2c68ec",
            "b314af61e3fe5e68",
            "5720dd9348b987ef",
            "c2ebf6c0d74ad0e4",
            "4e1d20e601e89e22",
            "31328f7909c93485",
            "c92600f6307981f9",
            "8bd183126cc5beaf",
            "c015dc9dbd457ad9",
            "e69068dc88fed591",
            "ece9e398ddf1a6a0",
            "fa502f5378dbe770",
            "28d0a7dae21e1fcf",
            "e913f94a740c212f",
            "91fe88dbcdcfd5fc",
            "59515344b6be644c",
            "d16bfe986e4d4a68",
            "945e6e160c72332c",
            "4e93eb39bfa118ac"
        ],
        "x": 14,
        "y": 239,
        "w": 1192,
        "h": 542,
        "info": "Route `automation/lighting` event messages to invoke the appropriate\ndevice control API's."
    },
    {
        "id": "eaaca1e226cc9251",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "send message to powerview hub",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "70e42b6637f4c865",
            "413305fe8cf8bc16",
            "3b9aea255e25c86d",
            "b528e18246309ead",
            "450c11f088a3f9ee",
            "a250d71416af8250"
        ],
        "x": 14,
        "y": 119,
        "w": 732,
        "h": 122,
        "info": "Send API command messages to a _PowerView_ hub at a rate of no more than\none per second."
    },
    {
        "id": "74348749d23b9082",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "dynamically create powerview controls on dashboard",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "02eb116aa3a7efad",
            "a2ce2f10f0cbc3b4",
            "4597056c8e33d1d2",
            "a4b2cb7314b93cec",
            "e89d138990a2c571",
            "09ed6328f31946db",
            "a4115f1a663ecf84",
            "b3fa2dd0b396e5ba",
            "7379bd9759e06a98",
            "fa994326c2180556",
            "97d89691a9505bb9",
            "23ce9cde77523965",
            "ca455aa5752d94d8",
            "78a3fbe808d63c4c",
            "9950e52333199d8f",
            "b3b32f662f388893",
            "b6e07b7b99531b02",
            "7fb1bd1acb1ca5f7",
            "0a9432f7e85182e1",
            "6f2a76cdcf373136",
            "75f0adce74746386",
            "57c39b659f421513"
        ],
        "x": 14,
        "y": 259,
        "w": 1302,
        "h": 182,
        "info": "Dynamically create dashboard buttons corresponding to each scene\ndiscovered by querying a _PowerView_ hub."
    },
    {
        "id": "2c4eab1ce95057ef",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "get all configuration data from hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "07d9702ee21263d3",
            "27cbc52e000f9fd1",
            "8909e3d843ad752c",
            "fcf52eacd721a4a9",
            "afd10513e80a6c06"
        ],
        "x": 74,
        "y": 119,
        "w": 602,
        "h": 122,
        "info": "Initialize flow context by querying a Hue bridge for the current state\nof all resources. Forward the state of `grouped_light` resources as\nan initial set of server-sent event messages to \"prime the pump\" for\ndynamically created dashboard controls."
    },
    {
        "id": "ad76998e48254ce7",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "5e8b87d6d8f0fed7"
        ],
        "x": 74,
        "y": 19,
        "w": 432,
        "h": 82
    },
    {
        "id": "86efe0cfe1142093",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "store resource state changes in flow context and propagate event",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "339ebff143d5b535",
            "1bc6cee6558ccaf4",
            "36dd0d5dc31ca8b4",
            "980418c680804201",
            "d29c26656d2e74ae",
            "49f749ec3853b862",
            "b7a82562452fd1c7",
            "eeb425059507ba39",
            "b698fabef55c0f4c",
            "3fe9b64e4c386d21",
            "d9ae737367ebed62"
        ],
        "x": 74,
        "y": 519,
        "w": 1032,
        "h": 162,
        "info": "Add, update or delete a resource cached in flow context."
    },
    {
        "id": "d6d68c481562616a",
        "type": "group",
        "z": "d61db14468b910ab",
        "name": "subscribe to server sent events from hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "1056f2ddf9c58227",
            "2d13eb8e173c7968",
            "d48dd4b5aa1368b0",
            "d6f78cafaf0b00d7",
            "22e026e913c8a836",
            "1cd6fafb6c18354c",
            "f855f79c60d5581f",
            "dc94e795cd3258f8",
            "1da7ab591b98f32c",
            "8cd24b2b4ab64410",
            "deabf93d3bae00ab",
            "8429f9197c437a40",
            "1e8c287442df967c"
        ],
        "x": 74,
        "y": 259,
        "w": 1162,
        "h": 242,
        "info": "Subscribe to event messages sent by a Hue bridge. Parse the event\nmessages and forward them as streams of individual events, one parsed\nevent message per resource."
    },
    {
        "id": "2d9ad017d6aeb18f",
        "type": "group",
        "z": "dcb190a34f9985d0",
        "name": "activate a powerview scene",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "b6ce3321e4119a91",
            "689bb9bf9977b2c7",
            "26124b0246ef158d"
        ],
        "x": 864,
        "y": 459,
        "w": 442,
        "h": 82,
        "info": "Set `msg.url` to the command that will activate the _PowerView_ scene\nwhose id is in `msg.payload`."
    },
    {
        "id": "f773f7f5615b8215",
        "type": "group",
        "z": "86021a0ae2220c2b",
        "name": "ground floor hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "0226968bb49f22c5",
            "4ebca8a3aa5763e5",
            "466fb66350e127f2",
            "acac97da53ff2812",
            "460867bbae94da5a",
            "f4e7f3f6609ec608",
            "13a8932676232537",
            "33da30d97725e077",
            "0696c3dfdfb89df9",
            "6b013bba424e77d0",
            "6f0668809a721b69",
            "f87cd6036de631b7",
            "553ac57ece1e5df2"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "send ground floor hue command",
                "type": "str"
            },
            {
                "name": "TOPIC",
                "value": "hue/ground-floor",
                "type": "str"
            }
        ],
        "x": 14,
        "y": 119,
        "w": 952,
        "h": 322,
        "info": "Group together those nodes which interface to the _Philips Hue_ bridge\nspecified by the `${GROUND_FLOOR_HUE_ADDRESS}` environment variable.\nThis group sets the following variables, shared by all the nodes it\ncontains:\n\n| Variable  | Value                           | Description                                                                     |\n|-----------|---------------------------------|---------------------------------------------------------------------------------|\n| `ADDRESS` | `${GROUND_FLOOR_HUE_ADDRESS}`   | The IP address of the _Hue_ bridge                                              |\n| `KEY`     | `${GROUND_FLOOR_HUE_KEY}`       | The client application key to pass in HTTP headers when calling the bridge API  |\n| `TARGET`  | `send ground floor hue command` | The name of the `link in` node to invoke in order to call the _Hue_ bridge API  |"
    },
    {
        "id": "1858ee0bbe9b4418",
        "type": "group",
        "z": "13e9081a904c6a12",
        "name": "send daily events",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "b8e996d829493cf7",
            "eebfe3308b2effb6",
            "717839e17957d8b8",
            "aea41299ec309be7",
            "2172861d6eca2d1c",
            "ec4c72ab0b8b53ad",
            "cbcdf85a73052db5",
            "b42f1fba69cb70e0",
            "bf9f3e514e81d58c",
            "46ac71815281ccea",
            "da376bc386711c2d"
        ],
        "x": 14,
        "y": 119,
        "w": 1032,
        "h": 262,
        "info": "Send daily events:\n\n1. Once at start up\n2. Each time a user changes the value of the _Bedtime_ dashboard control\n3. Every morning at 1:01AM\n\nThe events sent periodically by this group of nodes are:\n\n| `msg.topic`        | `msg.payload`                                                                                             | Description                                                                           |\n|--------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|\n| `settings/bedtime` | Value selected by a user using the _Bedtime_ control on the dashboard                                     | Approximate hour at which \"night mode\" should begin each day                          |\n| `daily/theme`      | The _theme_string for the current day                                                                     | See the information for the `function` node named `theme` for more details            |\n| `daily/sunrise`    | Timestamp at which the sun rises on the current day                                                       | See the information for the `function` node named `sunrise | sunset` for more details |\n| `daily/sunset`     | Timestamp at which the sun sets on the current day                                                        | See the information for the `function` node named `sunrise | sunset` for more details |\n| `daily/bedtime`    | A timestamp that varies slightly each day, based on the value of the most recent `settings/bedtime` event | See the information for the `function` node named `bedtime` for more details          |"
    },
    {
        "id": "1afeb43be3175917",
        "type": "group",
        "z": "13e9081a904c6a12",
        "name": "send timer events",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "ce36e830ccb196af",
            "449c4612546c24a3",
            "795ddbf1ece0c9e6",
            "dde26fd5b0242b48",
            "91c56df5c885cf9f",
            "f5730fdb6bc0272f",
            "f901e2f89786bb1d"
        ],
        "x": 14,
        "y": 399,
        "w": 852,
        "h": 122,
        "info": "Send timer events over the course of each day:\n\n1. Once at start up\n2. At the start of each time of day as calculated by the `function` node\n   named `time`\n\nEach such message will have `msg.topic` set to `timer/time` and\n`msg.payload` set to one of the _time_ values:\n\n- `morning`\n- `midday`\n- `afternoon`\n- `evening`\n- `night`\n\nAgain, see the documentation for the `function` node named `time` for\nmore details."
    },
    {
        "id": "04fca032bcc6efa3",
        "type": "group",
        "z": "531b5b7886a5f8e6",
        "name": "monitor timer events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "e43b73cd179f533b",
            "00bf383888ead194",
            "676e915f8e7e9976",
            "c5d6d36f82db1d24",
            "9fb64e1fa768d0f4",
            "3568efea7e9587e9",
            "c687725e2ca87760",
            "2f0e1c0c5ea3f3ad",
            "fc30aa70e609677e",
            "f13cf33dbebf9d64",
            "19c243d436fa4879",
            "a53fce9165bb2dfc",
            "d9c03db6d6a667eb",
            "1a1c71c70288eeba",
            "289977609efd87a1",
            "8d9dfb650e457ba4",
            "d57cf5e60919f695",
            "a37ec130e6a88b93"
        ],
        "x": 14,
        "y": 19,
        "w": 672,
        "h": 322,
        "info": "Display each `daily/+` and `timer/time` on the dashboard as it occurs,\nas an aid in debugging."
    },
    {
        "id": "49f5aae09949b530",
        "type": "group",
        "z": "6913f223fa29d4d2",
        "name": "trigger shades automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "37bac7a6b658ade4",
            "ec730ac674a50f58",
            "6a9ac472018c38ea",
            "c8c9c1f0d8b62902",
            "9e961b1409432775",
            "db4f7c2c93cd8f30",
            "10e466a4aef7940a"
        ],
        "x": 14,
        "y": 239,
        "w": 702,
        "h": 202,
        "info": "Route `automation/shades` event messages to invoke the appropriate\ndevice control API's."
    },
    {
        "id": "0a9025328509689d",
        "type": "group",
        "z": "6913f223fa29d4d2",
        "name": "send window shades automation trigger events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "cf057fb563602af9",
            "ba8aefaef362e646",
            "3358ef6c85b6df35",
            "d02ca2c4ab46c97c",
            "9022d5c9a6f5198c",
            "9f3235aa3de2fd5f",
            "2ee072159afbe3bf",
            "6c7be01156028ce2",
            "ced848a163c0d081",
            "a76da85781b20782"
        ],
        "x": 14,
        "y": 19,
        "w": 1232,
        "h": 202,
        "info": "Send `automation/shades` event when:\n\n- A new `timer/time` event is received, and\n- Window shade automation is enabled by users"
    },
    {
        "id": "4ec1d58b5d01e809",
        "type": "group",
        "z": "448b73182a92925c",
        "name": "send lighting automation trigger events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "1c66374732c2db12",
            "d5f8ba86d3d33717",
            "74600007c532fc76",
            "591be4f2e810669d",
            "286c4389ae9eb388",
            "e4620749ca5eb56b",
            "cae972d0d4110a67",
            "fc87a75f0b3bdf1c",
            "819f2ca9cc921d88",
            "b6aad9b8ca77d2b0",
            "ed34c221bd829fa5"
        ],
        "x": 14,
        "y": 19,
        "w": 1332,
        "h": 202,
        "info": "Send `automation/lighting` event when:\n\n- Either a new `timer/time` or `daily/theme` event is received, and\n- Lighting automation is enabled by users"
    },
    {
        "id": "13f1c7a5db24ee5d",
        "type": "group",
        "z": "531b5b7886a5f8e6",
        "name": "Monitor automation trigger events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "bf37d1982ff16bf2",
            "3ff0bb8b6add3fe0",
            "dbc4627664a4416a",
            "e9e790f3255f401b",
            "6a357e5856c62176",
            "1553eb9c5ef58f40"
        ],
        "x": 14,
        "y": 359,
        "w": 552,
        "h": 142,
        "info": "Display each `automation/+` on the dashboard as it occurs, as an aid in\ndebugging."
    },
    {
        "id": "62bf741a649d768b",
        "type": "group",
        "z": "13e9081a904c6a12",
        "name": "initialize dashboard controls at start",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "da937b595bc3a1f7",
            "9ceebfc83d14a522",
            "ec6aa9abab8c68dd",
            "20156727fa450f4e",
            "69d428a61380b8e2"
        ],
        "x": 14,
        "y": 539,
        "w": 1032,
        "h": 82,
        "info": "Send an event to initialize dynamically created dashboard controls each\ntime:\n\n1. this client successfully connects to the MQTT broker\n2. a user presses the _Refresh_ button on the dashboard\n\nSee the documentation for the _Refresh_ dashboard button for more\ninformation."
    },
    {
        "id": "595f21be09dd9396",
        "type": "group",
        "z": "86021a0ae2220c2b",
        "name": "basement hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "85c6aa31ab17c911",
            "ef72c1743493465e",
            "214548005f7e99ab",
            "40f45c398a50b05e",
            "3600df219088f5a6",
            "e53ba9a7af486095",
            "ab59aff7c27c6728",
            "0236f877cea9aa1b",
            "174b7dc47587b326",
            "46486cd695774a6c",
            "10c74bd3ce62390f",
            "11eb928fb0bb7d9a",
            "a1572f6f29d2b127"
        ],
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "send basement hue command",
                "type": "str"
            },
            {
                "name": "TOPIC",
                "value": "hue/basement",
                "type": "str"
            }
        ],
        "x": 14,
        "y": 459,
        "w": 912,
        "h": 322,
        "info": "Group together those nodes which interface to the _Philips Hue_ bridge\nspecified by the `${BASEMENT_HUE_ADDRESS}` environment variable.\nThis group sets the following variables, shared by all the nodes it\ncontains:\n\n| Variable  | Value                       | Description                                                                     |\n|-----------|-----------------------------|---------------------------------------------------------------------------------|\n| `ADDRESS` | `${BASEMENT_HUE_ADDRESS}`   | The IP address of the _Hue_ bridge                                              |\n| `KEY`     | `${BASEMENT_HUE_KEY}`       | The client application key to pass in HTTP headers when calling the bridge API  |\n| `TARGET`  | `send basement hue command` | The name of the `link in` node to invoke in order to call the _Hue_ bridge API  |"
    },
    {
        "id": "0f5b03b5d4d2e65f",
        "type": "group",
        "z": "531b5b7886a5f8e6",
        "name": "common subroutines",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "f6da1ea5274dc572",
            "2de4b859d8fae1fb",
            "16f886656dac69cd",
            "3461485c28eb5d0d",
            "b13425e7971cfdb4",
            "a2dc4ff27f0d4239",
            "9fabc6d997673bce"
        ],
        "x": 14,
        "y": 519,
        "w": 422,
        "h": 142,
        "info": "Support calling certain `function` nodes as subroutines using\n`link call` nodes."
    },
    {
        "id": "7ed122d84c5e7167",
        "type": "junction",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "x": 440,
        "y": 480,
        "wires": [
            [
                "f590050ce69df70f",
                "c2ebf6c0d74ad0e4"
            ]
        ]
    },
    {
        "id": "834d9349d1ebe8de",
        "type": "junction",
        "z": "a0b7d0294edc5956",
        "x": 720,
        "y": 140,
        "wires": [
            [
                "b00c5123ccc7aca8",
                "7c7ae6028d0f8afc"
            ]
        ]
    },
    {
        "id": "31328f7909c93485",
        "type": "junction",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "x": 460,
        "y": 700,
        "wires": [
            [
                "4e1d20e601e89e22",
                "5720dd9348b987ef",
                "91fe88dbcdcfd5fc"
            ]
        ]
    },
    {
        "id": "8bd183126cc5beaf",
        "type": "junction",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "x": 440,
        "y": 320,
        "wires": [
            [
                "c92600f6307981f9",
                "c015dc9dbd457ad9",
                "e913f94a740c212f"
            ]
        ]
    },
    {
        "id": "49f749ec3853b862",
        "type": "junction",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "x": 460,
        "y": 600,
        "wires": [
            [
                "b7a82562452fd1c7",
                "eeb425059507ba39"
            ]
        ]
    },
    {
        "id": "6e79e7537966793f",
        "type": "ui_tab",
        "name": "Controls",
        "icon": "fa-home",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "679eed718054e895",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Automation",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "none",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "bad6261ac75df85d",
        "type": "ui_group",
        "name": "Window Shades",
        "tab": "6e79e7537966793f",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "21f11f110d626f5a",
        "type": "ui_group",
        "name": "Ground Floor Lighting",
        "tab": "6e79e7537966793f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ab9e7529ab02c320",
        "type": "ui_group",
        "name": "Basement Lighting",
        "tab": "6e79e7537966793f",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "96738d9e92f617dc",
        "type": "tls-config",
        "z": "dd3a1235085c7ed7",
        "name": "Ignore Certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "fe1c0af9d7c8c368",
        "type": "mqtt-broker",
        "name": "Broker",
        "broker": "nodered.local",
        "port": "1883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7f388d69eb09e37c",
        "type": "ui_group",
        "name": "Automation",
        "tab": "6e79e7537966793f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "96fc183cf1c3e5c2",
        "type": "ui_group",
        "name": "Monitor",
        "tab": "6e79e7537966793f",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "448d1e2ff0ff4a74",
        "type": "ui_toast",
        "z": "4a8af92611acc27a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 450,
        "y": 60,
        "wires": [
            []
        ],
        "info": "Display the HTML snippet as a \"toast\" on the dashboard."
    },
    {
        "id": "30e1991ea828ba4f",
        "type": "debug",
        "z": "4a8af92611acc27a",
        "name": "notification",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 190,
        "y": 140,
        "wires": [],
        "info": "Add the message to the debug pane."
    },
    {
        "id": "0985cf211a9510a2",
        "type": "template",
        "z": "4a8af92611acc27a",
        "name": "<pre>",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div>\n    <pre>{{payload}}</pre>\n</div>",
        "output": "str",
        "x": 310,
        "y": 60,
        "wires": [
            [
                "448d1e2ff0ff4a74"
            ]
        ],
        "info": "Wrap `msg.payload` in HTML."
    },
    {
        "id": "d2492fc09315bfc0",
        "type": "function",
        "z": "4a8af92611acc27a",
        "name": "stringify",
        "func": "msg.payload = JSON.stringify(msg, undefined, ' ')\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            [
                "0985cf211a9510a2"
            ]
        ],
        "info": "Pretty-print `msg.payload`."
    },
    {
        "id": "5280e126498476bc",
        "type": "status",
        "z": "4a8af92611acc27a",
        "name": "count",
        "scope": [
            "30e1991ea828ba4f"
        ],
        "x": 90,
        "y": 220,
        "wires": [
            []
        ],
        "info": "Send the `debug` node's status as this subflow's status."
    },
    {
        "id": "152881af3cfe09a3",
        "type": "switch",
        "z": "a0b7d0294edc5956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "391066e787482e4e"
            ],
            [
                "5eb790bedf5af742"
            ],
            [
                "6210109bc86af3d6"
            ],
            [
                "c003bae9b06f729e"
            ],
            [
                "54ca900f5d16ed6c"
            ]
        ],
        "info": "Select the string representation of `EventSource.readyState` based on\nits numeric value."
    },
    {
        "id": "726e859588b521d1",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(status.text)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "152881af3cfe09a3"
            ]
        ],
        "info": "Parse `msg.status.text` as a number in `msg.payload`."
    },
    {
        "id": "b00c5123ccc7aca8",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"text\":payload,\t   \"shape\":status.shape,\t   \"fill\":color\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 180,
        "wires": [
            []
        ],
        "info": "Convert the string representation of the `EventSource.readyState` back\ninto this subflow's status."
    },
    {
        "id": "907c3a162e221669",
        "type": "delay",
        "z": "a0b7d0294edc5956",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 970,
        "y": 100,
        "wires": [
            []
        ],
        "info": "Limit the rate at which state-change messages are sent, as an aid in\ndebugging."
    },
    {
        "id": "391066e787482e4e",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "Unitialized",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Unitialized",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle-o\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "blue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 60,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ]
    },
    {
        "id": "5eb790bedf5af742",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "Connecting",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Connecting",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle-o-notch fa-spin fa-fw\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 100,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value 0, (_connecting_)."
    },
    {
        "id": "6210109bc86af3d6",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "Connected",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Connected",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 140,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value 1, (_connected_)."
    },
    {
        "id": "c003bae9b06f729e",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "Failed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Failed",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-circle-o\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 180,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value 2, (_failed_)."
    },
    {
        "id": "54ca900f5d16ed6c",
        "type": "change",
        "z": "a0b7d0294edc5956",
        "name": "Invalid",
        "rules": [
            {
                "t": "set",
                "p": "icon",
                "pt": "msg",
                "to": "<i class=\"fa fa-ban\"></i>",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "834d9349d1ebe8de"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to any\nunsupported value of `EventSource.readyState`."
    },
    {
        "id": "7c7ae6028d0f8afc",
        "type": "template",
        "z": "a0b7d0294edc5956",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div style=\"margin: 0; position: relative; width: 100%; height: 100%;\">\n    <div style=\"margin: 0; position: absolute; top: 50%; transform: translateY(-50%); width: 100%;\">\n        <table style=\"width: 100%;\">\n            <tr>\n                <td style=\"width: 15%; padding: 0 0 0 1em; color: {{color}}\">{{{icon}}}</td>\n                <td>{{payload}}</td>\n            </tr>\n        </table>\n    </div>\n</div>",
        "output": "str",
        "x": 820,
        "y": 100,
        "wires": [
            [
                "907c3a162e221669"
            ]
        ],
        "info": "Set `msg.payload`, `msg.icon` and `msg.color` corresponding to\nthe `EventSource.readyState` value -1, (_unitialized_)."
    },
    {
        "id": "07d9702ee21263d3",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 180,
        "wires": [
            [
                "27cbc52e000f9fd1"
            ]
        ],
        "info": "Prepare `msg.topic`, `msg.payload`, `msg.method` and `msg.target` to\nsend a request for all resource metadata to a Hue bridge using a\n`link call` node. The assumption is that the link will invoke an\ninstance of the _Send to Hue Bridge_ subflow configured with the same\nvalues for `ADDRESS` and `KEY`."
    },
    {
        "id": "27cbc52e000f9fd1",
        "type": "link call",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "${TARGET}",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 350,
        "y": 180,
        "wires": [
            [
                "8909e3d843ad752c"
            ]
        ],
        "info": "Dynamically call the `link in` specified by `${TARGET}`."
    },
    {
        "id": "8909e3d843ad752c",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "parse metadata",
        "func": "if (msg.statusCode != 200) {\n\n    throw 'response status ' + msg.statusCode + ' from Hue API'\n\n}\n\nconst resources = {}\nconst events = []\n\nfor (let resource of msg.payload.data) {\n\n    const type = resources[resource.type] || {}\n\n    type[resource.id] = resource\n    resources[resource.type] = type\n\n}\n\nflow.set('resources', resources)\nflow.set('merged', [])\n\nfor (let id in resources.grouped_light) {\n\n    const grouped_light = resources.grouped_light[id]\n\n    events.push({\n        topic: 'add',\n        payload: grouped_light\n    })\n}\n\nreturn [\n    events,\n    {\n        payload: true\n    }\n]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "afd10513e80a6c06"
            ],
            [
                "fcf52eacd721a4a9"
            ]
        ],
        "outputLabels": [
            "events",
            ""
        ],
        "info": "Reformat the resource data received from the Hue bridge for more\nefficient access while processing server-sent events and dynamically\nmanaging dashboard controls. Store the reformatted data in flow\ncontext. \"Prime the pump\" for server-sent event handling by forwarding\n`grouped_light` resources as an initial set of event messages.\n\n# Input\n\nResponse from a Hue bridge containing response to a `/resource` request.\n\n# Outputs\n\n1. A stream of `grouped_light` events in the same format that would\n   be received as server-sent events\n2. A message used to signal that the flow context is ready to start\n   receiving event messages sent by the Hue bridge.\n"
    },
    {
        "id": "d48dd4b5aa1368b0",
        "type": "EventSource",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "x": 410,
        "y": 380,
        "wires": [
            [
                "d6f78cafaf0b00d7"
            ],
            [
                "deabf93d3bae00ab"
            ],
            [
                "8429f9197c437a40"
            ]
        ],
        "info": "Subscribe to server-sent events from the\n[Hue Bridge API v2](https://developers.meethue.com/develop/hue-api-v2/).\n\nSee\n<https://developers.meethue.com/develop/hue-api-v2/core-concepts/#events>\nfor more information."
    },
    {
        "id": "2d13eb8e173c7968",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"url\":\"https://\" & $env('ADDRESS') & \"/eventstream/clip/v2\",\"initDict\":{\"withCredentials\":false,\"https\":{\"rejectUnauthorized\":false},\"headers\":{\"hue-application-key\":$env('KEY')}}}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "d48dd4b5aa1368b0"
            ]
        ],
        "info": "Set `msg.payload` to the URL and `initDict` parameters required by the\n[Hue Bridge API V2](https://developers.meethue.com/develop/hue-api-v2/)\n\nSee\n<https://developers.meethue.com/develop/hue-api-v2/core-concepts/#events>\nfor more information."
    },
    {
        "id": "d6f78cafaf0b00d7",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "22e026e913c8a836"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.data`."
    },
    {
        "id": "22e026e913c8a836",
        "type": "json",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 710,
        "y": 300,
        "wires": [
            [
                "1cd6fafb6c18354c"
            ]
        ],
        "info": "Parse the JSON string in `msg.payload`."
    },
    {
        "id": "1cd6fafb6c18354c",
        "type": "split",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 300,
        "wires": [
            [
                "f855f79c60d5581f"
            ]
        ],
        "info": "Split the array in `msg.payload` into individual messages."
    },
    {
        "id": "f855f79c60d5581f",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "topic & data",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.type",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "dc94e795cd3258f8"
            ]
        ],
        "info": "Set `msg.topic` to `msg.payload.type` and then move `msg.payload.data`\nto `msg.payload`."
    },
    {
        "id": "dc94e795cd3258f8",
        "type": "split",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 300,
        "wires": [
            [
                "1da7ab591b98f32c"
            ]
        ],
        "info": "Split the array in `msg.payload` into individual messages."
    },
    {
        "id": "8cd24b2b4ab64410",
        "type": "status",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "eventsource status",
        "scope": [
            "d48dd4b5aa1368b0"
        ],
        "x": 1110,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "1056f2ddf9c58227",
        "type": "link in",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "subscribe",
        "links": [
            "fcf52eacd721a4a9"
        ],
        "x": 115,
        "y": 380,
        "wires": [
            [
                "2d13eb8e173c7968"
            ]
        ]
    },
    {
        "id": "fcf52eacd721a4a9",
        "type": "link out",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "ready",
        "mode": "link",
        "links": [
            "1056f2ddf9c58227"
        ],
        "x": 635,
        "y": 200,
        "wires": []
    },
    {
        "id": "339ebff143d5b535",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "update",
        "func": "const resources = flow.get('resources')\nconst type = resources[msg.payload.type] || {}\nconst resource = type[msg.payload.id] || {}\n\nfor (let key in msg.payload) {\n\n    resource[key] = msg.payload[key]\n\n}\n\nmsg.payload = resource\ntype[msg.payload.id] = resource\nresources[msg.payload.type] = type\nflow.set('resources', resources)\n\nmsg.topic = env.get('TOPIC') + '/resource/' + msg.payload.type + '/' + msg.payload.id\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 600,
        "wires": [
            [
                "49f749ec3853b862"
            ]
        ],
        "info": "Update `msg.payload` in the resources and, for `grouped_light` events,\nmerged metadata cached in flow context."
    },
    {
        "id": "1bc6cee6558ccaf4",
        "type": "switch",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 210,
        "y": 600,
        "wires": [
            [
                "d29c26656d2e74ae"
            ],
            [
                "339ebff143d5b535"
            ],
            [
                "36dd0d5dc31ca8b4"
            ]
        ],
        "info": "Use the value of `msg.topic` to select whether to `add`, `update` or\n`delete` a resource contained in `msg.payload` from flow context."
    },
    {
        "id": "36dd0d5dc31ca8b4",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "delete",
        "func": "const resources = flow.get('resources')\nconst type = resources[msg.payload.type] || {}\n\ndelete type[msg.payload.id]\nresources[msg.payload.type] = type\nflow.set('resources', resources)\n\nif (msg.payload.type == 'grouped_light') {\n\n    const oldMerged = flow.get('merged')\n    const newMerged = []\n\n    for (let entry of oldMerged) {\n\n        if (msg.payload.id != entry.grouped_light.id) {\n\n            newMerged.push(entry)\n\n        }\n    }\n\n    flow.set('merged', newMerged)\n\n}\n\nmsg.topic = env.get('TOPIC') + '/resource/' + msg.payload.type + '/' + msg.payload.id\nmsg.payload = ''\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 640,
        "wires": [
            [
                "49f749ec3853b862"
            ]
        ],
        "info": "Delete `msg.payload` from the resources and, for `grouped_light` events,\nmerged metadata cached in flow context."
    },
    {
        "id": "3fe9b64e4c386d21",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "format metadata",
        "func": "const merged = flow.get('merged') || []\nconst resources = flow.get('resources') || {}\nconst model = []\n\nfor (let entry of merged) {\n\n    const grouped_light = entry.grouped_light\n    const group = entry.group\n    const scenes = entry.scenes\n    const label = (group.metadata ? group.metadata.name : 'All Lights')\n\n    model.push({\n        label: label,\n        id: grouped_light.id,\n        state: resources.grouped_light[grouped_light.id].on.on,\n        scenes: scenes.map((scene) => {\n            return {\n                id: scene.id,\n                name: scene.metadata.name\n            }\n        }).sort((a, b) => {\n\n            return a.name.localeCompare(b.name)\n\n        })\n    })\n}\n\nmsg.payload = model.sort((a, b) => {\n\n    return a.label.localeCompare(b.label)\n\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 580,
        "wires": [
            [
                "d9ae737367ebed62"
            ]
        ],
        "info": "Extract the cached state of all `grouped_light` resources into a data\nstructure suitable for use by dynamically created dashboard controls."
    },
    {
        "id": "d9ae737367ebed62",
        "type": "template",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<div style=\"text-align: center;\">\n    <div ng-repeat=\"model in msg.payload\">\n        <div ng-if=\"$index > 0\">\n            <hr>\n        </div>\n        <md-switch style=\"margin-left: 1em;\" ng-value=\"model.state\" ng-model=\"model.state\"\n            ng-change=\"send({ topic: 'resource/grouped_light/' + model.id, payload: { on: { on:model.state } }, method: 'PUT' })\">\n            {{model.label}}\n        </md-switch>\n        <md-button style=\"display: inline-block; margin: 1px\" ng-repeat=\"scene in model.scenes\"\n            ng-click=\"send({topic: 'resource/scene/' + scene.id, payload: {recall:{action:'dynamic_palette'}}, method: 'PUT'})\">\n            {{scene.name}}\n        </md-button>\n    </div>\n</div>",
        "output": "str",
        "x": 1020,
        "y": 580,
        "wires": [
            []
        ],
        "info": "Provide the HTML template for dynamically created dashboard controls.\nThis uses the Node-RED dashboard's built-in support for AngularJS.\nThe intent is that the output of this function will be sent to a\n`ui_template` node for inclusion on the dashboard."
    },
    {
        "id": "eeb425059507ba39",
        "type": "switch",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "grouped_light",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "grouped_light",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 580,
        "wires": [
            [
                "b698fabef55c0f4c"
            ]
        ],
        "info": "Block unless this is a `grouped_light` event."
    },
    {
        "id": "5e8b87d6d8f0fed7",
        "type": "comment",
        "z": "d61db14468b910ab",
        "g": "ad76998e48254ce7",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "<https://developers.meethue.com/develop/hue-api-v2/>",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "afd10513e80a6c06",
        "type": "link out",
        "z": "d61db14468b910ab",
        "g": "2c4eab1ce95057ef",
        "name": "initialize",
        "mode": "link",
        "links": [
            "980418c680804201"
        ],
        "x": 635,
        "y": 160,
        "wires": []
    },
    {
        "id": "b698fabef55c0f4c",
        "type": "rbe",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 710,
        "y": 580,
        "wires": [
            [
                "3fe9b64e4c386d21"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "980418c680804201",
        "type": "link in",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "update",
        "links": [
            "1da7ab591b98f32c",
            "afd10513e80a6c06"
        ],
        "x": 115,
        "y": 600,
        "wires": [
            [
                "1bc6cee6558ccaf4"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "1da7ab591b98f32c",
        "type": "link out",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "events",
        "mode": "link",
        "links": [
            "980418c680804201"
        ],
        "x": 1195,
        "y": 300,
        "wires": []
    },
    {
        "id": "d29c26656d2e74ae",
        "type": "function",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "add",
        "func": "const resources = flow.get('resources')\nconst type = resources[msg.payload.type] || {}\nconst resource = type[msg.payload.id] || {}\n\nfunction findScenes(group) {\n\n    const scenes = []\n\n    for (let id in resources.scene) {\n\n        const scene = resources.scene[id]\n\n        if (scene.group.rid == group.id) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes\n\n}\n\nfunction findGroup(grouped_light) {\n\n    const groups = resources[grouped_light.owner.rtype]\n\n    for (let id in groups) {\n\n        const group = groups[id]\n\n        if (id == grouped_light.owner.rid) {\n\n            return {\n                grouped_light: grouped_light,\n                group: group,\n                scenes: findScenes(group)\n            }\n        }\n    }\n\n    throw 'no group found for grouped_light ' + grouped_light.id\n\n}\n\nif (resource.type == 'grouped_light') {\n\n    const merged = flow.get('merged')\n\n    merged.push(findGroup(resource))\n    flow.set('merged', merged)\n\n}\n\nfor (let key in msg.payload) {\n\n    resource[key] = msg.payload[key]\n\n}\n\nmsg.payload = resource\ntype[msg.payload.id] = resource\nresources[msg.payload.type] = type\nflow.set('resources',resources)\n\nmsg.topic = env.get('TOPIC') + '/resource/' + msg.payload.type + '/' + msg.payload.id\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "49f749ec3853b862"
            ]
        ],
        "info": "Add `msg.payload` to the resources and, for `grouped_light` events,\nmerged metadata cached in flow context."
    },
    {
        "id": "b7a82562452fd1c7",
        "type": "mqtt out",
        "z": "d61db14468b910ab",
        "g": "86efe0cfe1142093",
        "name": "retained",
        "topic": "",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 540,
        "y": 620,
        "wires": []
    },
    {
        "id": "deabf93d3bae00ab",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$env('TOPIC') & '/onopen'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 380,
        "wires": [
            [
                "1e8c287442df967c"
            ]
        ]
    },
    {
        "id": "8429f9197c437a40",
        "type": "change",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$env('TOPIC') & '/onerror'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 460,
        "wires": [
            [
                "1e8c287442df967c"
            ]
        ]
    },
    {
        "id": "1e8c287442df967c",
        "type": "mqtt out",
        "z": "d61db14468b910ab",
        "g": "d6d68c481562616a",
        "name": "not retained",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "fa870f94fa1ea10b",
        "type": "change",
        "z": "dd3a1235085c7ed7",
        "name": "url and headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\"hue-application-key\": $env('KEY')}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'https://' & $env('ADDRESS') & '/clip/v2/' & topic",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "3709e3d94bfad967"
            ]
        ],
        "info": "Set `msg.url` and `msg.headers` based on the values i `msg.topic` and\nthe environment variables named `ADDRESS` and `KEY`."
    },
    {
        "id": "3709e3d94bfad967",
        "type": "delay",
        "z": "dd3a1235085c7ed7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 160,
        "wires": [
            [
                "20ac42d7649c260a"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the Hue bridge to 1 per\nsecond."
    },
    {
        "id": "20ac42d7649c260a",
        "type": "http request",
        "z": "dd3a1235085c7ed7",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "96738d9e92f617dc",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "c029fcaa62306eb2"
            ]
        ],
        "info": "Send a message to the Hue bridge using TLS but with certificate\nvalidation disabled due to defects in the Hue Bridge API."
    },
    {
        "id": "c029fcaa62306eb2",
        "type": "function",
        "z": "dd3a1235085c7ed7",
        "name": "validate response",
        "func": "let fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode < 200) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode >= 300) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (!msg.payload.data) {\n\n        fill = 'yellow'\n        return msg\n\n    }\n\n    if (!msg.payload.errors) {\n\n        fill = 'yellow'\n        return msg\n\n    }\n\n    /*\n    hue bridge api defect: meaningless warning messages\n                           are often included in errors\n                           array so there is no actual\n                           way to determine if a command\n                           was successful\n    \n    if (msg.payload.errors.length > 0) {\n    \n        fill = 'yellow'\n        return msg\n    \n    }\n    */\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n\n    }\n\n    return null\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 200,
        "wires": [
            []
        ],
        "outputLabels": [
            "response"
        ],
        "info": "Block unless the output from the `http request` node indicates an\nerror."
    },
    {
        "id": "7f6c4efded50ed6b",
        "type": "status",
        "z": "dd3a1235085c7ed7",
        "name": "validate response",
        "scope": [
            "c029fcaa62306eb2"
        ],
        "x": 520,
        "y": 280,
        "wires": [
            []
        ],
        "info": "Set the status of the `function` node named `validate response` as this\nsubflow's status."
    },
    {
        "id": "aef7dcdbe4ac6a64",
        "type": "comment",
        "z": "dd3a1235085c7ed7",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 60,
        "wires": []
    },
    {
        "id": "b8e996d829493cf7",
        "type": "mqtt in",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "topic": "settings/bedtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "eebfe3308b2effb6",
                "da376bc386711c2d"
            ]
        ],
        "info": "Subscribe to `settings/bedtime` messages from the MQTT broker. See the\ndocumentation for the _Bedtime_ dashboard control for more information."
    },
    {
        "id": "eebfe3308b2effb6",
        "type": "ui_dropdown",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "Bedtime Setting",
        "label": "Bedtime",
        "tooltip": "",
        "place": "Select option",
        "group": "7f388d69eb09e37c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "9PM",
                "value": 21,
                "type": "num"
            },
            {
                "label": "10PM",
                "value": "22",
                "type": "str"
            },
            {
                "label": "11PM",
                "value": "23",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "settings/bedtime",
        "topicType": "str",
        "className": "",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "717839e17957d8b8"
            ]
        ],
        "info": "Allow a user to select 9PM, 10PM or 11PM as the base time for the value\nof the `daily/bedtime` event each day. See the documentation of the\n`function` node named `bedtime` for more information on how this\nsetting is used to calculate a random value for `daily/bedtime`."
    },
    {
        "id": "717839e17957d8b8",
        "type": "mqtt out",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "topic": "settings/bedtime",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 560,
        "y": 340,
        "wires": [],
        "info": "Send user interaction as an event message using MQTT."
    },
    {
        "id": "aea41299ec309be7",
        "type": "inject",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 01 * * *",
        "once": true,
        "onceDelay": "0.1",
        "topic": "daily",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "da376bc386711c2d"
            ]
        ],
        "info": "Send the current timestamp:\n\n1. At start up\n2. Each morning at 1:01AM"
    },
    {
        "id": "2172861d6eca2d1c",
        "type": "join",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "b42f1fba69cb70e0",
                "cbcdf85a73052db5",
                "ec4c72ab0b8b53ad"
            ]
        ],
        "info": "Synchronize receipt of `daily/timestamp` and `settings/bedtime`\nmessages."
    },
    {
        "id": "ec4c72ab0b8b53ad",
        "type": "function",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "theme",
        "func": "const date = new Date(msg.payload.daily)\nconst month = date.getMonth()\nconst day = date.getDate()\n\nif ((month == 7) && (day <= 4)) {\n\n    msg.payload = 'tribal'\n\n} else if (month == 10) {\n\n    msg.payload = 'spooky'\n\n} else if (month == 12) {\n\n    msg.payload = 'jolly'\n\n} else {\n\n    msg.payload = 'standard'\n\n}\n\nnode.status({\n    text: msg.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'daily/theme'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 160,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "theme"
        ],
        "info": "Set `msg.payload` to one of the _theme_ values, described below, and\n`msg.topic` to `daily/theme`.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/theme`\n- `msg.payload` set to one of the following strings, based on the\n  the timestamp from the input:\n\n| `msg.payload` | Description         |\n|---------------|---------------------|\n| `tribal`      | July 1 - 4          |\n| `spooky`      | Any day in October  |\n| `jolly`       | Any day in December |\n| `standard`    | Any other day       |"
    },
    {
        "id": "cbcdf85a73052db5",
        "type": "function",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "sunrise | sunset",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst sunrise = RED.util.cloneMessage(msg)\nconst sunset = RED.util.cloneMessage(msg)\nconst date = new Date(msg.payload.daily)\n\nconst times = suncalc.getTimes(\n    // work around bug in suncalc\n    new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        1,\n        1\n    ),\n    LATITUDE,\n    LONGITUDE\n)\n\nsunrise.payload = times.sunrise.getTime()\nsunrise.topic = 'daily/sunrise'\nsunset.payload = times.sunset.getTime()\nsunset.topic = 'daily/sunset'\n\nconst status =\n    new Date(sunrise.payload).toLocaleTimeString() +\n    ' | ' +\n    new Date(sunset.payload).toLocaleTimeString()\n\nnode.status({\n    text: status,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [sunrise, sunset]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 660,
        "y": 220,
        "wires": [
            [
                "46ac71815281ccea"
            ],
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "sunrise",
            "sunset"
        ],
        "info": "Use the [suncalc](https://www.npmjs.com/package/suncalc) package to\nobtain the times at which the sun rises and sets on a given day.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n_Note also that this assumes:_\n\n_- `function` nodes are allowed to dynamically load the_ suncalc\n   _package_\n\n_- `${LATITUDE}` and `${LONGITUDE}` environment variables contain the\n  georgraphical coordinates to pass to `suncalc.getTimes()`_\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n1. sunrise\n   - `msg.payload` is the timestamp for sunrise as reported by _suncalc_\n   - `msg.topic` is `daily/sunrise`\n2. sunset\n   - `msg.payload` is the timestamp for sunset as reported by _suncalc_\n   - `msg.topic` is `daily/sunset`\n"
    },
    {
        "id": "b42f1fba69cb70e0",
        "type": "function",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "bedtime",
        "func": "const MILLIS_PER_SECOND = 1000\nconst MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\nconst MILLIS_PER_HALF_HOUR = 30 * MILLIS_PER_MINUTE\nconst MILLIS_PER_HOUR = 2 * MILLIS_PER_HALF_HOUR\n\nconst date = new Date(msg.payload.daily)\nconst offset = MILLIS_PER_HALF_HOUR - Math.floor(Math.random() * MILLIS_PER_HOUR)\nconst time = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    msg.payload['settings/bedtime']\n).getTime()\n\nmsg.payload = time + offset\n\nnode.status({\n    text: new Date(msg.payload).toLocaleTimeString(),\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'daily/bedtime'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "outputLabels": [
            "bedtime"
        ],
        "info": "Calculate a slightly randomized timestamp based on the values of\n`msg.payload.daily` and `msg.payload.settings/bedtime` as described\nbelow.\n\n# Input\n \n - timestamp for the current day in `msg.payload.daily`\n - value from the `Bedtime` dashboard control in\n   `msg.payload.settings/bedtime`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/bedtime`\n- `msg.payload` set to a timestamp as described below\n\n# Details\n\nThis `function` node receives input from a `join` node that combines the\ntimestamp for a given day with a value selected by use of a dropdown\ncontrol on the dashboard. It calculates a random offset of plus or minus\n30 minutes, adds that to the hour specified by the received value in\n`msg.payload.settings/bedtime` and calculates the timestamp for that\nhour on the day specified by the value received in `msg.payload.daily`,\nplacing it in `msg.payload` in the output message.\n"
    },
    {
        "id": "bf9f3e514e81d58c",
        "type": "mqtt out",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 970,
        "y": 220,
        "wires": [],
        "info": "Broadcast daily event messages using MQTT based on the values of their\n`msg.payload` and `msg.topic` properties."
    },
    {
        "id": "46ac71815281ccea",
        "type": "rbe",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 220,
        "wires": [
            [
                "bf9f3e514e81d58c"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "da376bc386711c2d",
        "type": "rbe",
        "z": "13e9081a904c6a12",
        "g": "1858ee0bbe9b4418",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 350,
        "y": 220,
        "wires": [
            [
                "2172861d6eca2d1c"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "ce36e830ccb196af",
        "type": "mqtt out",
        "z": "13e9081a904c6a12",
        "g": "1afeb43be3175917",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 780,
        "y": 460,
        "wires": [],
        "info": "Send the output of the `function` node named `time` as a `timer/time`\nevent using MQTT."
    },
    {
        "id": "449c4612546c24a3",
        "type": "function",
        "z": "13e9081a904c6a12",
        "g": "1afeb43be3175917",
        "name": "time",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst now = msg.payload.now\nconst sunrise = msg.payload['daily/sunrise']\nconst sunset = msg.payload['daily/sunset']\nconst bedtime = msg.payload['daily/bedtime']\nconst position = suncalc.getPosition(new Date(now), LATITUDE, LONGITUDE)\n\nif ((now < sunrise) || (now >= bedtime)) {\n\n    msg.payload = 'night'\n\n} else if (now > sunset) {\n\n    msg.payload = 'evening'\n\n} else if (position.altitude > 0.8) {\n\n    msg.payload = 'midday'\n\n} else if (position.azimuth > 0) {\n\n    msg.payload = 'afternoon'\n\n} else {\n\n    msg.payload = 'morning'\n\n}\n\nnode.status({\n    text: msg.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmsg.topic = 'timer/time'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 530,
        "y": 460,
        "wires": [
            [
                "f901e2f89786bb1d"
            ]
        ],
        "info": "Use the [suncalc](https://www.npmjs.com/package/suncalc) package to\ncalculate a _time_ value, described below, based on the position of\nthe sun.\n\n_Note that this assumes:_\n\n_- `function` nodes are allowed to dynamically load the_ suncalc\n   _package_\n\n_- `${LATITUDE}` and `${LONGITUDE}` environment variables contain the\n  georgraphical coordinates to pass to `suncalc.getPosition()`_\n\n# Input\n\n- timestamp for current minute in `msg.payload.now`\n- timestamp for sunrise in `msg.payload.daily/sunrise`\n- timestamp for sunset in `msg.payload.daily/sunset`\n- timestamp for bedtime in `msg.payload.daily/bedtime`\n- all other `msg` properties are ignored\n\n_See the documentation for the `function` node named `bedtime` for\ninformation on how `msg.payload.daily/bedtime` is calculated._\n\n# Output\n\n- `msg.topic` is `timer/time`\n- `msg.payload` is one of the following strings:\n\n| `msg.payload` | Description                                                                                                                                                             |\n|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `morning`     | Sunrise to the time at which either the sun is high enough so as not to shine directly into any windows or the sun is no longer shining on the eastern side of the home |\n| `midday`      | Time during which the sun is high enough so as not to shine directly into any windows                                                                                   |\n| `afternoon`   | Time at which the sun is shining on the western side of the home and low enough to shine directly into windows                                                          |\n| `evening`     | Sunset to bedtime                                                                                                                                                       |\n| `night`       | Bedtime to sunrise of the next day                                                                                                                                      |\n\n# Details\n\nThe \"time at which the is high enough so as not to shine directly into\nany windows\" is determined empirically for a home based on its location,\nelevation, orientation, size of awnings or roof overhang and so on.\nBased on that value and the values of `${LATITUDE}` and `${LONGITUDE}`,\nthe sun may not reach such a height on any given day. No messages with\n`msg.payload` set to `midday` will be sent on such occasions.\n\nSimilarly, this function assumes that sunrise and sunset will occur\non the same day and that both will always precede bedtime. These\nassumptions might be violated at certain times of year for extreme\nvalues of `${LATITUDE}`."
    },
    {
        "id": "795ddbf1ece0c9e6",
        "type": "join",
        "z": "13e9081a904c6a12",
        "g": "1afeb43be3175917",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "449c4612546c24a3"
            ]
        ],
        "info": "Synchronize the daily events with the ones sent every minute."
    },
    {
        "id": "dde26fd5b0242b48",
        "type": "rbe",
        "z": "13e9081a904c6a12",
        "g": "1afeb43be3175917",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 290,
        "y": 460,
        "wires": [
            [
                "795ddbf1ece0c9e6"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "91c56df5c885cf9f",
        "type": "mqtt in",
        "z": "13e9081a904c6a12",
        "g": "1afeb43be3175917",
        "name": "",
        "topic": "daily/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 480,
        "wires": [
            [
                "dde26fd5b0242b48"
            ]
        ],
        "info": "Subscribe to all of the daily event messages sent via MQTT."
    },
    {
        "id": "f5730fdb6bc0272f",
        "type": "inject",
        "z": "13e9081a904c6a12",
        "g": "1afeb43be3175917",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "dde26fd5b0242b48"
            ]
        ],
        "info": "Send a message:\n\n1. At start up\n2. Every 60 seconds thereafter\n\nEach such message will have `msg.payload` set to the timestamp for the\nmoment it was sent and `msg.topic` set to `now`."
    },
    {
        "id": "f901e2f89786bb1d",
        "type": "rbe",
        "z": "13e9081a904c6a12",
        "g": "1afeb43be3175917",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 650,
        "y": 460,
        "wires": [
            [
                "ce36e830ccb196af"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, without regard to\n`msg.topic`."
    },
    {
        "id": "0f32fac2e754eb6f",
        "type": "comment",
        "z": "13e9081a904c6a12",
        "name": "assumes that ${LATITUDE} and ${LONGITUDE} are defined",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "ec6aa9abab8c68dd",
        "type": "status",
        "z": "13e9081a904c6a12",
        "g": "62bf741a649d768b",
        "name": "status: controls/refresh",
        "scope": [
            "9ceebfc83d14a522"
        ],
        "x": 140,
        "y": 580,
        "wires": [
            [
                "20156727fa450f4e"
            ]
        ],
        "info": "Receive status changes from the `mqtt out` node that sends\n`controls/refresh` messages."
    },
    {
        "id": "69d428a61380b8e2",
        "type": "switch",
        "z": "13e9081a904c6a12",
        "g": "62bf741a649d768b",
        "name": "node-red:common.status.connected",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red:common.status.connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 580,
        "wires": [
            [
                "da937b595bc3a1f7"
            ]
        ],
        "info": "Block messages unless `msg.payload` is\n`node-red:common.status.connected`"
    },
    {
        "id": "20156727fa450f4e",
        "type": "change",
        "z": "13e9081a904c6a12",
        "g": "62bf741a649d768b",
        "name": "status.text",
        "rules": [
            {
                "t": "move",
                "p": "status.text",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 580,
        "wires": [
            [
                "69d428a61380b8e2"
            ]
        ],
        "info": "Move `msg.status.text` to `msg.payload`."
    },
    {
        "id": "da937b595bc3a1f7",
        "type": "ui_button",
        "z": "13e9081a904c6a12",
        "g": "62bf741a649d768b",
        "name": "",
        "group": "7f388d69eb09e37c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "controls/refresh",
        "topicType": "str",
        "x": 780,
        "y": 580,
        "wires": [
            [
                "9ceebfc83d14a522"
            ]
        ],
        "info": "Trigger the dynamic creation of dashboard controls by querying the\nHue and PowerView API's at start up and each time the _Refresh_\nbutton is pressed.\n\nEach such message will have `msg.topic` set to `controls/refresh` and\n`msg.payload` set to the timestamp of the moment the button-press event\noccurred."
    },
    {
        "id": "9ceebfc83d14a522",
        "type": "mqtt out",
        "z": "13e9081a904c6a12",
        "g": "62bf741a649d768b",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 940,
        "y": 580,
        "wires": [],
        "info": "Send the timestamp in `msg.payload` as an MQTT message with topic\n`controls/refresh`.\n\nThe intent is that flows receiving such messages will (re-)initialize\ndynamically created dashboard controls."
    },
    {
        "id": "33f0226d5e55a07c",
        "type": "comment",
        "z": "13e9081a904c6a12",
        "name": "assumes that function nodes are permitted to load the suncalc package",
        "info": "",
        "x": 290,
        "y": 80,
        "wires": []
    },
    {
        "id": "9f3235aa3de2fd5f",
        "type": "mqtt in",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "topic": "settings/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 100,
        "wires": [
            [
                "2ee072159afbe3bf",
                "cf057fb563602af9"
            ]
        ],
        "info": "Subscribe to `settings/shades` messages using MQTT."
    },
    {
        "id": "2ee072159afbe3bf",
        "type": "ui_switch",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "label": "Enable Shades",
        "tooltip": "",
        "group": "7f388d69eb09e37c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "settings/shades",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "6c7be01156028ce2"
            ]
        ],
        "info": "Dashboard control to enable or disable window shades automation."
    },
    {
        "id": "6c7be01156028ce2",
        "type": "mqtt out",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "topic": "settings/shades",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 500,
        "y": 60,
        "wires": [],
        "info": "Send user interaction as an event message using MQTT."
    },
    {
        "id": "37bac7a6b658ade4",
        "type": "switch",
        "z": "6913f223fa29d4d2",
        "g": "49f5aae09949b530",
        "name": "time",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "midday",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "afternoon",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "6a9ac472018c38ea"
            ],
            [
                "c8c9c1f0d8b62902"
            ],
            [
                "9e961b1409432775"
            ],
            [
                "db4f7c2c93cd8f30"
            ]
        ],
        "info": "Trigger window shades automation for the `time` specified by the value\nof `msg.payload`."
    },
    {
        "id": "ec730ac674a50f58",
        "type": "link out",
        "z": "6913f223fa29d4d2",
        "g": "49f5aae09949b530",
        "name": "activate shades scene",
        "mode": "link",
        "links": [
            "689bb9bf9977b2c7"
        ],
        "x": 675,
        "y": 340,
        "wires": []
    },
    {
        "id": "6a9ac472018c38ea",
        "type": "change",
        "z": "6913f223fa29d4d2",
        "g": "49f5aae09949b530",
        "name": "Morning Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "56393",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 280,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Morning Shades_."
    },
    {
        "id": "c8c9c1f0d8b62902",
        "type": "change",
        "z": "6913f223fa29d4d2",
        "g": "49f5aae09949b530",
        "name": "Open All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7307",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 320,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Open All Shades_."
    },
    {
        "id": "9e961b1409432775",
        "type": "change",
        "z": "6913f223fa29d4d2",
        "g": "49f5aae09949b530",
        "name": "Afternoon Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "42686",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Afternoon Shades_."
    },
    {
        "id": "db4f7c2c93cd8f30",
        "type": "change",
        "z": "6913f223fa29d4d2",
        "g": "49f5aae09949b530",
        "name": "Close All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "15208",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 400,
        "wires": [
            [
                "ec730ac674a50f58"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Close All Shades_."
    },
    {
        "id": "cf057fb563602af9",
        "type": "rbe",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "ba8aefaef362e646"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "ba8aefaef362e646",
        "type": "join",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "3358ef6c85b6df35"
            ]
        ],
        "info": "Synchronize received `settings/shades` and `timer/time` messages."
    },
    {
        "id": "3358ef6c85b6df35",
        "type": "rbe",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 530,
        "y": 140,
        "wires": [
            [
                "d02ca2c4ab46c97c"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, without regard to\n`msg.topic`."
    },
    {
        "id": "d02ca2c4ab46c97c",
        "type": "switch",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "settings/shades",
        "property": "payload.settings/shades",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "9022d5c9a6f5198c"
            ]
        ],
        "info": "Block unless shades automation is enabled by a user."
    },
    {
        "id": "9022d5c9a6f5198c",
        "type": "change",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.timer/time",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 140,
        "wires": [
            [
                "a76da85781b20782"
            ]
        ],
        "info": "Move `msg.payload.timer/time` to `msg.payload`."
    },
    {
        "id": "ced848a163c0d081",
        "type": "mqtt in",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "cf057fb563602af9"
            ]
        ],
        "info": "Subscribe to `timer/time` messages using MQTT."
    },
    {
        "id": "a76da85781b20782",
        "type": "mqtt out",
        "z": "6913f223fa29d4d2",
        "g": "0a9025328509689d",
        "name": "",
        "topic": "automation/shades",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 1130,
        "y": 140,
        "wires": [],
        "info": "Send `automation/shades` event message using MQTT."
    },
    {
        "id": "10e466a4aef7940a",
        "type": "mqtt in",
        "z": "6913f223fa29d4d2",
        "g": "49f5aae09949b530",
        "name": "",
        "topic": "automation/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 340,
        "wires": [
            [
                "37bac7a6b658ade4"
            ]
        ],
        "info": "Subscribe to `automation/shades` event messages."
    },
    {
        "id": "aae17e5a30471de5",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "timer/time",
        "property": "payload.timer/time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 300,
        "y": 480,
        "wires": [
            [
                "8bd183126cc5beaf"
            ],
            [
                "7ed122d84c5e7167"
            ],
            [
                "31328f7909c93485"
            ]
        ],
        "info": "Trigger window shades automation for the `time` specified by the value\nof `msg.payload.timer/time`."
    },
    {
        "id": "f590050ce69df70f",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "daily/theme",
        "property": "payload.daily/theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tribal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spooky",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jolly",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 570,
        "y": 540,
        "wires": [
            [
                "6b81bc8a01c525d8"
            ],
            [
                "0de1a81dd7644afc"
            ],
            [
                "776dedfbba2c68ec"
            ],
            [
                "b314af61e3fe5e68"
            ]
        ],
        "info": "Trigger evening lighting automation for the specified _theme_."
    },
    {
        "id": "6b81bc8a01c525d8",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard tribal",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/c4681d32-3368-43cd-9cf1-436132521068",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 480,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Tribal_ scene."
    },
    {
        "id": "0de1a81dd7644afc",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard spooky",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/70a0a8a6-b4b7-4b24-a9cf-0ecea0f359cc",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 520,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Spooky_ scene."
    },
    {
        "id": "776dedfbba2c68ec",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard jolly",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/12571f23-7714-4b47-8e75-a3040389b788",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 560,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Jolly_ scene."
    },
    {
        "id": "b314af61e3fe5e68",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/9b6935e2-f8ed-4f91-83a2-2bff1850da99",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 600,
        "wires": [
            [
                "28d0a7dae21e1fcf"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Yard_ \"room's\" _Sunset_ scene."
    },
    {
        "id": "5720dd9348b987ef",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main bathroom nightlight",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Bathroom_'s _Nightlight_ scene."
    },
    {
        "id": "c2ebf6c0d74ad0e4",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/6eff0801-01e2-4803-9840-e31c06cee079",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 420,
        "wires": [
            [
                "e69068dc88fed591"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Floor_ zone's _Sunset_ scene."
    },
    {
        "id": "4e1d20e601e89e22",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor nightlight",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 700,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill activate the _Main Floor_ zone's _Nightlight_ scene."
    },
    {
        "id": "c92600f6307981f9",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main floor off",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/9c1c7975-2f47-4552-bac8-c19b643cd678",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 320,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Main Floor_ zone."
    },
    {
        "id": "c015dc9dbd457ad9",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "main bathroom off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/aea74e74-d544-4d08-ad71-3b6665045256",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 360,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Main Bathroom_."
    },
    {
        "id": "e69068dc88fed591",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ece9e398ddf1a6a0",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "fa502f5378dbe770",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "28d0a7dae21e1fcf",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1050,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "59515344b6be644c",
        "type": "link in",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "links": [],
        "x": 55,
        "y": 740,
        "wires": [
            [
                "d16bfe986e4d4a68"
            ]
        ]
    },
    {
        "id": "d16bfe986e4d4a68",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 740,
        "wires": [
            [
                "945e6e160c72332c"
            ]
        ],
        "info": "Set `msg.topic`, `msg.payload` and `msg.method` to the values that\nwill turn off the lights in the _Yard_ \"room\"."
    },
    {
        "id": "945e6e160c72332c",
        "type": "link out",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "yard off",
        "mode": "return",
        "links": [],
        "x": 255,
        "y": 740,
        "wires": []
    },
    {
        "id": "e913f94a740c212f",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "59515344b6be644c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 280,
        "wires": [
            [
                "fa502f5378dbe770"
            ]
        ]
    },
    {
        "id": "91fe88dbcdcfd5fc",
        "type": "link call",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "links": [
            "59515344b6be644c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 660,
        "y": 740,
        "wires": [
            [
                "ece9e398ddf1a6a0"
            ]
        ]
    },
    {
        "id": "1c66374732c2db12",
        "type": "mqtt in",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "topic": "settings/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "d5f8ba86d3d33717",
                "591be4f2e810669d"
            ]
        ],
        "info": "Subscribe to `settings/lighting` messages using MQTT."
    },
    {
        "id": "d5f8ba86d3d33717",
        "type": "ui_switch",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "label": "Enable Lighting",
        "tooltip": "",
        "group": "7f388d69eb09e37c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "settings/lighting",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 380,
        "y": 60,
        "wires": [
            [
                "74600007c532fc76"
            ]
        ],
        "info": "Dashboard control to enable or disable lighting automation."
    },
    {
        "id": "74600007c532fc76",
        "type": "mqtt out",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "topic": "settings/lighting",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 560,
        "y": 60,
        "wires": [],
        "info": "Send user interaction as an event message using MQTT."
    },
    {
        "id": "591be4f2e810669d",
        "type": "rbe",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 350,
        "y": 180,
        "wires": [
            [
                "286c4389ae9eb388"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "286c4389ae9eb388",
        "type": "join",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "e4620749ca5eb56b"
            ]
        ],
        "info": "Synchronize `settings/lighting`, `daily/theme` and `timer/time` messages\nreceived using MQTT."
    },
    {
        "id": "e4620749ca5eb56b",
        "type": "rbe",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 180,
        "wires": [
            [
                "fc87a75f0b3bdf1c"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, without regard to\n`msg.topic`."
    },
    {
        "id": "cae972d0d4110a67",
        "type": "change",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload.settings/lighting",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 180,
        "wires": [
            [
                "ed34c221bd829fa5"
            ]
        ],
        "info": "Delet the `settings/lighting` property from `msg.payload`."
    },
    {
        "id": "fc87a75f0b3bdf1c",
        "type": "switch",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "settings/lighting",
        "property": "payload.settings/lighting",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 180,
        "wires": [
            [
                "cae972d0d4110a67"
            ]
        ],
        "info": "Block unless lighting automation is enabled by a user."
    },
    {
        "id": "819f2ca9cc921d88",
        "type": "mqtt in",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "591be4f2e810669d"
            ]
        ],
        "info": "Subscribe to `timer/time` messages using MQTT."
    },
    {
        "id": "b6aad9b8ca77d2b0",
        "type": "mqtt in",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "topic": "daily/theme",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "591be4f2e810669d"
            ]
        ],
        "info": "Subscribe to `daily./theme` messages using MQTT."
    },
    {
        "id": "4e93eb39bfa118ac",
        "type": "mqtt in",
        "z": "448b73182a92925c",
        "g": "60e4d1c056ed3a0c",
        "name": "",
        "topic": "automation/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 480,
        "wires": [
            [
                "aae17e5a30471de5"
            ]
        ],
        "info": "Subscribe to `automation/lighting` event messages."
    },
    {
        "id": "ed34c221bd829fa5",
        "type": "mqtt out",
        "z": "448b73182a92925c",
        "g": "4ec1d58b5d01e809",
        "name": "",
        "topic": "automation/lighting",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fe1c0af9d7c8c368",
        "x": 1230,
        "y": 180,
        "wires": [],
        "info": "Send `automation/lighting` event message using MQTT with `msg.payload`\nset to an object with `daily/theme` and `timer/time` properties:\n\n- `msg.topic` set to `automation/lighting`\n- `msg.payload` set to an object:\n  - `msg.payload.daily/theme` see the documentation for the `function`\n     node named `theme` on the _Timer_ flow tab\n  - `msg.payload.timer/time` see the documentation for the `function`\n     node named `time` on the _Timer_ flow tab"
    },
    {
        "id": "70e42b6637f4c865",
        "type": "delay",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "413305fe8cf8bc16"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the PowerView hub to 1 per\nsecond."
    },
    {
        "id": "413305fe8cf8bc16",
        "type": "http request",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "3b9aea255e25c86d",
                "450c11f088a3f9ee"
            ]
        ],
        "info": "Send `msg.url` as a `GET` request to the PowerView hub."
    },
    {
        "id": "3b9aea255e25c86d",
        "type": "function",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "check status code",
        "func": "let fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n        fill = 'red'\n        return msg\n\n    }\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n\n    }\n\n    return null\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "b528e18246309ead"
            ]
        ],
        "outputLabels": [
            "success"
        ],
        "info": "Block unless the response indicates an error occurred."
    },
    {
        "id": "b528e18246309ead",
        "type": "subflow:4a8af92611acc27a",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "",
        "x": 670,
        "y": 200,
        "wires": [],
        "info": "Display error messages on the dashboard and in the debug pane."
    },
    {
        "id": "450c11f088a3f9ee",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "powerview response",
        "mode": "return",
        "links": [],
        "x": 435,
        "y": 160,
        "wires": []
    },
    {
        "id": "a250d71416af8250",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "eaaca1e226cc9251",
        "name": "send to powerview",
        "links": [],
        "x": 55,
        "y": 180,
        "wires": [
            [
                "70e42b6637f4c865"
            ]
        ]
    },
    {
        "id": "02eb116aa3a7efad",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/scenes/'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 300,
        "wires": [
            [
                "a2ce2f10f0cbc3b4"
            ]
        ],
        "info": "Set `msg.url` to request the list of scenes from the PowerView hub."
    },
    {
        "id": "a2ce2f10f0cbc3b4",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 300,
        "wires": [
            [
                "4597056c8e33d1d2"
            ]
        ]
    },
    {
        "id": "4597056c8e33d1d2",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "sceneData",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sceneData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "a4b2cb7314b93cec"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.sceneData`."
    },
    {
        "id": "a4b2cb7314b93cec",
        "type": "split",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 300,
        "wires": [
            [
                "e89d138990a2c571"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "e89d138990a2c571",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "scene",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"sceneName\":$base64decode(payload.name),\"sceneId\":payload.id,\"roomId\":payload.roomId}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 300,
        "wires": [
            [
                "09ed6328f31946db"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "09ed6328f31946db",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1030,
        "y": 300,
        "wires": [
            [
                "ca455aa5752d94d8"
            ]
        ],
        "info": "Join previously split messages back into an array."
    },
    {
        "id": "a4115f1a663ecf84",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/rooms/'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "b3fa2dd0b396e5ba"
            ]
        ],
        "info": "Set `msg.url` to request the list of room from the PowerView hub."
    },
    {
        "id": "b3fa2dd0b396e5ba",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "7379bd9759e06a98"
            ]
        ]
    },
    {
        "id": "7379bd9759e06a98",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "roomData",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.roomData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 340,
        "wires": [
            [
                "fa994326c2180556"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.roomData`."
    },
    {
        "id": "fa994326c2180556",
        "type": "split",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "97d89691a9505bb9"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "97d89691a9505bb9",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "room",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"roomName\":$base64decode(payload.name),\"roomId\":payload.id}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 340,
        "wires": [
            [
                "23ce9cde77523965"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "23ce9cde77523965",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "b3b32f662f388893"
            ]
        ],
        "info": "Join previously split messages back into an array."
    },
    {
        "id": "ca455aa5752d94d8",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scenes",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "78a3fbe808d63c4c"
            ]
        ],
        "info": "Set `msg.topic` to `scenes`."
    },
    {
        "id": "78a3fbe808d63c4c",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "get rooms",
        "mode": "link",
        "links": [
            "b6e07b7b99531b02"
        ],
        "x": 1275,
        "y": 300,
        "wires": []
    },
    {
        "id": "9950e52333199d8f",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "powerview metadata",
        "mode": "link",
        "links": [
            "b6e07b7b99531b02"
        ],
        "x": 1275,
        "y": 340,
        "wires": []
    },
    {
        "id": "b6e07b7b99531b02",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "powerview metadata",
        "links": [
            "9950e52333199d8f",
            "78a3fbe808d63c4c"
        ],
        "x": 75,
        "y": 400,
        "wires": [
            [
                "75f0adce74746386"
            ]
        ]
    },
    {
        "id": "b3b32f662f388893",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rooms",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 340,
        "wires": [
            [
                "9950e52333199d8f"
            ]
        ],
        "info": "Set `msg.topic` to `rooms`."
    },
    {
        "id": "7fb1bd1acb1ca5f7",
        "type": "function",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "for dashboard",
        "func": "msg.dashboard = []\n\nfunction findScenes(roomId) {\n\n    const scenes = []\n\n    for (const scene of msg.payload.scenes) {\n\n        if (scene.roomId == roomId) {\n\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n        return a.sceneName.localeCompare(b.sceneName)\n    })\n}\n\nfor (const room of msg.payload.rooms) {\n\n    const scenes = findScenes(room.roomId)\n\n    if (scenes.length > 0) {\n\n        const roomScenes = []\n\n        for (const scene of scenes) {\n\n            roomScenes.push({\n                sceneName: scene.sceneName,\n                sceneId: scene.sceneId\n            })\n        }\n\n        msg.dashboard.push({\n            roomName: room.roomName,\n            roomScenes: roomScenes\n        })\n    }\n}\n\nmsg.dashboard = msg.dashboard.sort((a, b) => {\n    return a.roomName.localeCompare(b.roomName)\n})\n\ncontext.set('metadata', msg.payload)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 400,
        "wires": [
            [
                "0a9432f7e85182e1"
            ]
        ],
        "info": "Format `rooms` and `scenes` metadata into a combined data structure\nsuitable for use with a `template` node to dynamically create dashboard\ncontrols."
    },
    {
        "id": "0a9432f7e85182e1",
        "type": "ui_template",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "group": "bad6261ac75df85d",
        "name": "Shade Controls",
        "order": 2,
        "width": "6",
        "height": "10",
        "format": "<div>\n    <div ng-repeat=\"room in msg.dashboard\" style=\"text-align:center\">\n        <hr ng-if=\"$index > 0\">\n        <p style=\"font-style:italic\">{{room.roomName}}</p>\n        <md-button ng-repeat=\"scene in room.roomScenes\" ng-click=\"send({topic:scene.sceneName,payload:scene.sceneId})\">\n            {{scene.sceneName}}\n        </md-button>\n    </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 400,
        "wires": [
            [
                "6f2a76cdcf373136"
            ]
        ],
        "info": "Display dynamically created controls on the dashboard."
    },
    {
        "id": "6f2a76cdcf373136",
        "type": "link out",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "activate powerview scene",
        "mode": "link",
        "links": [
            "689bb9bf9977b2c7"
        ],
        "x": 615,
        "y": 400,
        "wires": []
    },
    {
        "id": "75f0adce74746386",
        "type": "join",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "7fb1bd1acb1ca5f7"
            ]
        ],
        "info": "Join messages containing `rooms` and `scenes` metadata."
    },
    {
        "id": "b6ce3321e4119a91",
        "type": "change",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('POWERVIEW_ADDRESS') & '/api/scenes?sceneId=' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "26124b0246ef158d"
            ]
        ],
        "info": "Set `msg.url` to the URL with query string to activate the scene\nspecified by `msg.payload` using the IP address specified by the\nenvironment variable named `POWERVIEW_ADDRESS`."
    },
    {
        "id": "689bb9bf9977b2c7",
        "type": "link in",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "activate powerview scene",
        "links": [
            "81d6c43098a91e64",
            "6f2a76cdcf373136",
            "ec730ac674a50f58",
            "4517f2c78c9498d7",
            "3d7ec93adc3b5b60",
            "bbbb4e53c2082d73"
        ],
        "x": 905,
        "y": 500,
        "wires": [
            [
                "b6ce3321e4119a91"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "26124b0246ef158d",
        "type": "link call",
        "z": "dcb190a34f9985d0",
        "g": "2d9ad017d6aeb18f",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1190,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "74e55c13e48dd047",
        "type": "comment",
        "z": "dcb190a34f9985d0",
        "name": "https://motorisation.hde.nl/hd/powerview/general-guides/API/",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "57c39b659f421513",
        "type": "mqtt in",
        "z": "dcb190a34f9985d0",
        "g": "74348749d23b9082",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 320,
        "wires": [
            [
                "02eb116aa3a7efad",
                "a4115f1a663ecf84"
            ]
        ],
        "info": "Subscribe to `controls/refresh` messages using MQTT."
    },
    {
        "id": "c27aaa0ab68af1ca",
        "type": "comment",
        "z": "dcb190a34f9985d0",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "b26df763264faaa4",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "0226968bb49f22c5",
        "type": "subflow:dd3a1235085c7ed7",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "Send Ground Floor Hue Command",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            }
        ],
        "x": 240,
        "y": 260,
        "wires": [
            [
                "acac97da53ff2812"
            ],
            [
                "4ebca8a3aa5763e5"
            ]
        ],
        "info": "Send rate-limited messages to the _Ground Floor_ Hue bridge."
    },
    {
        "id": "4ebca8a3aa5763e5",
        "type": "subflow:4a8af92611acc27a",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "",
        "x": 450,
        "y": 280,
        "wires": [],
        "info": "Display error messages on the dashboard and in the debug pane."
    },
    {
        "id": "466fb66350e127f2",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "assumes ${GROUND_FLOOR_HUE_ADDRESS} and ${GROUND_FLOOR_HUE_KEY} are defined",
        "info": "",
        "x": 380,
        "y": 160,
        "wires": []
    },
    {
        "id": "acac97da53ff2812",
        "type": "link out",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "ground floor hue response",
        "mode": "return",
        "links": [],
        "x": 415,
        "y": 240,
        "wires": []
    },
    {
        "id": "460867bbae94da5a",
        "type": "subflow:d61db14468b910ab",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "Ground Floor Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "TARGET",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "TOPIC",
                "type": "env"
            },
            {
                "name": "BRIDGE",
                "value": "BRIDGE",
                "type": "env"
            }
        ],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "f4e7f3f6609ec608"
            ]
        ],
        "info": "Subscribe to server-sent events from the _Ground Floor_ Hue bridge."
    },
    {
        "id": "f4e7f3f6609ec608",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "group": "21f11f110d626f5a",
        "name": "Ground Floor Hue Controls",
        "order": 2,
        "width": "6",
        "height": "28",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 540,
        "y": 340,
        "wires": [
            [
                "13a8932676232537"
            ]
        ],
        "info": "Display dynamically created dashboard controls for the _Ground Floor_\nHue bridge."
    },
    {
        "id": "13a8932676232537",
        "type": "link call",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "",
        "links": [
            "f87cd6036de631b7"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "33da30d97725e077",
        "type": "status",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "ground floor hue status",
        "scope": [
            "460867bbae94da5a"
        ],
        "x": 140,
        "y": 400,
        "wires": [
            [
                "0696c3dfdfb89df9"
            ]
        ],
        "info": "Monitor `EventSource.readyState` for the _Ground Floor_ Hue bridge."
    },
    {
        "id": "0696c3dfdfb89df9",
        "type": "subflow:a0b7d0294edc5956",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "Ground Floor Hue Status",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "6b013bba424e77d0"
            ]
        ],
        "info": "Prepare the _Ground Floor_ Hue bridge connection status for rendering on\nthe dashboard. "
    },
    {
        "id": "6b013bba424e77d0",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "group": "21f11f110d626f5a",
        "name": "Ground Floor Hue readyState",
        "order": 1,
        "width": "6",
        "height": "1",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 400,
        "wires": [
            []
        ],
        "info": "Render the _Ground Floor_ Hue bridge connection status on the dashboard."
    },
    {
        "id": "6f0668809a721b69",
        "type": "mqtt in",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 340,
        "wires": [
            [
                "460867bbae94da5a"
            ]
        ],
        "info": "Subscribe to `controls/refresh` events from MQTT."
    },
    {
        "id": "f87cd6036de631b7",
        "type": "link in",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "send ground floor hue command",
        "links": [
            "b377dfca55193e3b",
            "5453ecd10d2275d7",
            "5539f5e5fa8f4bb2"
        ],
        "x": 55,
        "y": 260,
        "wires": [
            [
                "0226968bb49f22c5"
            ]
        ]
    },
    {
        "id": "85c6aa31ab17c911",
        "type": "subflow:dd3a1235085c7ed7",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "Send Basement Hue Command",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            }
        ],
        "x": 230,
        "y": 600,
        "wires": [
            [
                "40f45c398a50b05e"
            ],
            [
                "ef72c1743493465e"
            ]
        ],
        "info": "Send rate-limited messages to the _Basement_ Hue bridge."
    },
    {
        "id": "ef72c1743493465e",
        "type": "subflow:4a8af92611acc27a",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "",
        "x": 430,
        "y": 620,
        "wires": [],
        "info": "Display error messages on the dashboard and in the debug pane."
    },
    {
        "id": "214548005f7e99ab",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "assumes ${BASEMENT_HUE_ADDRESS} and ${BASEMENT_HUE_KEY} are defined",
        "info": "",
        "x": 340,
        "y": 500,
        "wires": []
    },
    {
        "id": "40f45c398a50b05e",
        "type": "link out",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "basement hue response",
        "mode": "return",
        "links": [],
        "x": 395,
        "y": 580,
        "wires": []
    },
    {
        "id": "3600df219088f5a6",
        "type": "subflow:d61db14468b910ab",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "Basement Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "KEY",
                "type": "env"
            },
            {
                "name": "TARGET",
                "value": "TARGET",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "TOPIC",
                "type": "env"
            },
            {
                "name": "BRIDGE",
                "value": "BRIDGE",
                "type": "env"
            }
        ],
        "x": 300,
        "y": 680,
        "wires": [
            [
                "e53ba9a7af486095"
            ]
        ],
        "info": "Subscribe to server-sent events from the _Basement_ Hue bridge."
    },
    {
        "id": "e53ba9a7af486095",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "group": "ab9e7529ab02c320",
        "name": "Basement Hue Controls",
        "order": 2,
        "width": "6",
        "height": "17",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "ab59aff7c27c6728"
            ]
        ],
        "info": "Display dynamically created dashboard controls for the _Basement_\nHue bridge."
    },
    {
        "id": "ab59aff7c27c6728",
        "type": "link call",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "",
        "links": [
            "10c74bd3ce62390f"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 770,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "0236f877cea9aa1b",
        "type": "status",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "basement hue status",
        "scope": [
            "3600df219088f5a6"
        ],
        "x": 130,
        "y": 740,
        "wires": [
            [
                "174b7dc47587b326"
            ]
        ],
        "info": "Monitor `EventSource.readyState` for the _Basement_ Hue bridge."
    },
    {
        "id": "174b7dc47587b326",
        "type": "subflow:a0b7d0294edc5956",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "Basement Hue Status",
        "x": 340,
        "y": 740,
        "wires": [
            [
                "46486cd695774a6c"
            ]
        ],
        "info": "Prepare the _Basement_ Hue bridge connection status for rendering on the\ndashboard. "
    },
    {
        "id": "46486cd695774a6c",
        "type": "ui_template",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "group": "ab9e7529ab02c320",
        "name": "Basement Hue readyState",
        "order": 1,
        "width": "6",
        "height": "1",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 740,
        "wires": [
            []
        ],
        "info": "Render the _Basement_ Hue bridge connection status on the dashboard."
    },
    {
        "id": "10c74bd3ce62390f",
        "type": "link in",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "send basement hue command",
        "links": [],
        "x": 55,
        "y": 600,
        "wires": [
            [
                "85c6aa31ab17c911"
            ]
        ]
    },
    {
        "id": "11eb928fb0bb7d9a",
        "type": "mqtt in",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "",
        "topic": "controls/refresh",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 680,
        "wires": [
            [
                "3600df219088f5a6"
            ]
        ],
        "info": "Subscribe to `controls/refresh` events from MQTT."
    },
    {
        "id": "192295176887705c",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "name": "https://github.com/parasaurolophus/create-hue-application-key",
        "info": "",
        "x": 260,
        "y": 80,
        "wires": []
    },
    {
        "id": "a1572f6f29d2b127",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "595f21be09dd9396",
        "name": "${ADDRESS}, ${KEY}, ${TARGET} and ${TOPIC} are set by this group",
        "info": "",
        "x": 290,
        "y": 540,
        "wires": []
    },
    {
        "id": "553ac57ece1e5df2",
        "type": "comment",
        "z": "86021a0ae2220c2b",
        "g": "f773f7f5615b8215",
        "name": "${ADDRESS}, ${KEY}, ${TARGET} and ${TOPIC} are set by this group",
        "info": "",
        "x": 290,
        "y": 200,
        "wires": []
    },
    {
        "id": "e43b73cd179f533b",
        "type": "mqtt in",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "topic": "daily/theme",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "2f0e1c0c5ea3f3ad"
            ]
        ]
    },
    {
        "id": "00bf383888ead194",
        "type": "mqtt in",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "topic": "daily/sunrise",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 60,
        "wires": [
            [
                "d9c03db6d6a667eb"
            ]
        ]
    },
    {
        "id": "676e915f8e7e9976",
        "type": "mqtt in",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "topic": "daily/sunset",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 120,
        "wires": [
            [
                "1a1c71c70288eeba"
            ]
        ]
    },
    {
        "id": "c5d6d36f82db1d24",
        "type": "mqtt in",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "topic": "daily/bedtime",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 180,
        "wires": [
            [
                "289977609efd87a1"
            ]
        ]
    },
    {
        "id": "9fb64e1fa768d0f4",
        "type": "mqtt in",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "topic": "timer/time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 300,
        "wires": [
            [
                "3568efea7e9587e9"
            ]
        ]
    },
    {
        "id": "1553eb9c5ef58f40",
        "type": "ui_template",
        "z": "531b5b7886a5f8e6",
        "g": "13f1c7a5db24ee5d",
        "group": "96fc183cf1c3e5c2",
        "name": "Monitor Lighting",
        "order": 7,
        "width": "6",
        "height": "3",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "bf37d1982ff16bf2",
        "type": "mqtt in",
        "z": "531b5b7886a5f8e6",
        "g": "13f1c7a5db24ee5d",
        "name": "",
        "topic": "automation/shades",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 400,
        "wires": [
            [
                "3ff0bb8b6add3fe0"
            ]
        ]
    },
    {
        "id": "e9e790f3255f401b",
        "type": "mqtt in",
        "z": "531b5b7886a5f8e6",
        "g": "13f1c7a5db24ee5d",
        "name": "",
        "topic": "automation/lighting",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fe1c0af9d7c8c368",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 460,
        "wires": [
            [
                "6a357e5856c62176"
            ]
        ]
    },
    {
        "id": "f6da1ea5274dc572",
        "type": "function",
        "z": "531b5b7886a5f8e6",
        "g": "0f5b03b5d4d2e65f",
        "name": "stringify",
        "func": "msg.now = new Date().toLocaleString()\nmsg.payload = JSON.stringify(msg.payload, undefined, 1)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 620,
        "wires": [
            [
                "2de4b859d8fae1fb"
            ]
        ],
        "info": "Replace `msg.payload` to its `JSON.stringify()` representation. Set\n`msg.now` to a human-readable representation of the current time."
    },
    {
        "id": "2de4b859d8fae1fb",
        "type": "template",
        "z": "531b5b7886a5f8e6",
        "g": "0f5b03b5d4d2e65f",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<div style=\"margin: 0; position: relative; width: 100%; height: 100%;\">\n    <div style=\"margin: 0; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); width: 90%;\">\n        <p style=\"text-align: center; font-style: italic;\">{{msg.now}}</p>\n        <p style=\"text-align: center; font-weight: bold;\">{{msg.topic}}</p>\n        <pre>{{msg.payload}}</pre>\n    </div>\n</div>",
        "output": "str",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "3461485c28eb5d0d"
            ]
        ],
        "info": "Set `msg.template` to a HTML snippet that can be used to display the\noutput of the `function` node named `stringify` in a `ui_template`\nnode."
    },
    {
        "id": "16f886656dac69cd",
        "type": "link in",
        "z": "531b5b7886a5f8e6",
        "g": "0f5b03b5d4d2e65f",
        "name": "stringify",
        "links": [],
        "x": 55,
        "y": 620,
        "wires": [
            [
                "f6da1ea5274dc572"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "3461485c28eb5d0d",
        "type": "link out",
        "z": "531b5b7886a5f8e6",
        "g": "0f5b03b5d4d2e65f",
        "name": "stringify",
        "mode": "return",
        "links": [],
        "x": 395,
        "y": 620,
        "wires": []
    },
    {
        "id": "6a357e5856c62176",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "13f1c7a5db24ee5d",
        "name": "",
        "links": [
            "16f886656dac69cd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 460,
        "wires": [
            [
                "1553eb9c5ef58f40"
            ]
        ]
    },
    {
        "id": "3ff0bb8b6add3fe0",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "13f1c7a5db24ee5d",
        "name": "",
        "links": [
            "16f886656dac69cd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 400,
        "wires": [
            [
                "dbc4627664a4416a"
            ]
        ]
    },
    {
        "id": "dbc4627664a4416a",
        "type": "ui_template",
        "z": "531b5b7886a5f8e6",
        "g": "13f1c7a5db24ee5d",
        "group": "96fc183cf1c3e5c2",
        "name": "Monitor Shades",
        "order": 6,
        "width": "6",
        "height": "2",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3568efea7e9587e9",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "16f886656dac69cd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 240,
        "y": 300,
        "wires": [
            [
                "c687725e2ca87760"
            ]
        ]
    },
    {
        "id": "c687725e2ca87760",
        "type": "ui_template",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "group": "96fc183cf1c3e5c2",
        "name": "Monitor Time",
        "order": 5,
        "width": "6",
        "height": "2",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 390,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2f0e1c0c5ea3f3ad",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "16f886656dac69cd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 240,
        "wires": [
            [
                "fc30aa70e609677e"
            ]
        ]
    },
    {
        "id": "fc30aa70e609677e",
        "type": "ui_template",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "group": "96fc183cf1c3e5c2",
        "name": "Monitor Theme",
        "order": 4,
        "width": "6",
        "height": "2",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 420,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f13cf33dbebf9d64",
        "type": "ui_template",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "group": "96fc183cf1c3e5c2",
        "name": "Monitor Bedtime",
        "order": 3,
        "width": "6",
        "height": "2",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "19c243d436fa4879",
        "type": "ui_template",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "group": "96fc183cf1c3e5c2",
        "name": "Monitor Sunset",
        "order": 2,
        "width": "6",
        "height": "2",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a53fce9165bb2dfc",
        "type": "ui_template",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "group": "96fc183cf1c3e5c2",
        "name": "Monitor Sunrise",
        "order": 1,
        "width": "6",
        "height": "2",
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b13425e7971cfdb4",
        "type": "link in",
        "z": "531b5b7886a5f8e6",
        "g": "0f5b03b5d4d2e65f",
        "name": "locale string",
        "links": [],
        "x": 55,
        "y": 560,
        "wires": [
            [
                "a2dc4ff27f0d4239"
            ]
        ]
    },
    {
        "id": "a2dc4ff27f0d4239",
        "type": "function",
        "z": "531b5b7886a5f8e6",
        "g": "0f5b03b5d4d2e65f",
        "name": "locale string",
        "func": "msg.payload = new Date(msg.payload).toLocaleString()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 560,
        "wires": [
            [
                "9fabc6d997673bce"
            ]
        ],
        "info": "Replace the timestamp in `msg.payload` with its localized string\nrepresentation."
    },
    {
        "id": "d9c03db6d6a667eb",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "b13425e7971cfdb4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 270,
        "y": 60,
        "wires": [
            [
                "a37ec130e6a88b93"
            ]
        ]
    },
    {
        "id": "1a1c71c70288eeba",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "b13425e7971cfdb4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 270,
        "y": 120,
        "wires": [
            [
                "d57cf5e60919f695"
            ]
        ]
    },
    {
        "id": "289977609efd87a1",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "b13425e7971cfdb4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "8d9dfb650e457ba4"
            ]
        ]
    },
    {
        "id": "8d9dfb650e457ba4",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "16f886656dac69cd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 420,
        "y": 180,
        "wires": [
            [
                "f13cf33dbebf9d64"
            ]
        ]
    },
    {
        "id": "d57cf5e60919f695",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "16f886656dac69cd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "19c243d436fa4879"
            ]
        ]
    },
    {
        "id": "a37ec130e6a88b93",
        "type": "link call",
        "z": "531b5b7886a5f8e6",
        "g": "04fca032bcc6efa3",
        "name": "",
        "links": [
            "16f886656dac69cd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 420,
        "y": 60,
        "wires": [
            [
                "a53fce9165bb2dfc"
            ]
        ]
    },
    {
        "id": "9fabc6d997673bce",
        "type": "link out",
        "z": "531b5b7886a5f8e6",
        "g": "0f5b03b5d4d2e65f",
        "name": "locale string",
        "mode": "return",
        "links": [],
        "x": 275,
        "y": 560,
        "wires": []
    }
]